<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="static_8h" kind="file" language="C++">
    <compoundname>static.h</compoundname>
    <includes local="no">cstdint</includes>
    <includes local="no">type_traits</includes>
    <includedby refid="any_8h" local="no">/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/modules/any.h</includedby>
    <includedby refid="sequential_8h" local="no">/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/modules/sequential.h</includedby>
    <incdepgraph>
      <node id="14274">
        <label>cstdint</label>
      </node>
      <node id="14273">
        <label>/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/detail/static.h</label>
        <link refid="static_8h"/>
        <childnode refid="14274" relation="include">
        </childnode>
        <childnode refid="14275" relation="include">
        </childnode>
      </node>
      <node id="14275">
        <label>type_traits</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="14281">
        <label>/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/torch.h</label>
        <link refid="torch_8h_source"/>
      </node>
      <node id="14278">
        <label>/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/modules/sequential.h</label>
        <link refid="sequential_8h_source"/>
        <childnode refid="14279" relation="include">
        </childnode>
      </node>
      <node id="14279">
        <label>/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/modules.h</label>
        <link refid="modules_8h_source"/>
        <childnode refid="14280" relation="include">
        </childnode>
      </node>
      <node id="14280">
        <label>/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn.h</label>
        <link refid="nn_8h_source"/>
        <childnode refid="14281" relation="include">
        </childnode>
      </node>
      <node id="14277">
        <label>/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/modules/any.h</label>
        <link refid="any_8h_source"/>
        <childnode refid="14278" relation="include">
        </childnode>
        <childnode refid="14279" relation="include">
        </childnode>
      </node>
      <node id="14276">
        <label>/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/detail/static.h</label>
        <link refid="static_8h"/>
        <childnode refid="14277" relation="include">
        </childnode>
        <childnode refid="14278" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structtorch_1_1detail_1_1has__forward" prot="public">torch::detail::has_forward</innerclass>
    <innernamespace refid="namespacetorch">torch</innernamespace>
    <innernamespace refid="namespacetorch_1_1nn">torch::nn</innernamespace>
    <innernamespace refid="namespacetorch_1_1detail">torch::detail</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdint&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetorch" kindref="compound">torch</ref><sp/>{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">nn<sp/>{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Module;</highlight></codeline>
<codeline lineno="9"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>nn</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>torch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetorch" kindref="compound">torch</ref><sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="16" refid="structtorch_1_1detail_1_1has__forward" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtorch_1_1detail_1_1has__forward" kindref="compound">has_forward</ref><sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Declare<sp/>two<sp/>types<sp/>with<sp/>differing<sp/>size.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>yes<sp/>=<sp/>int8_t;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>no<sp/>=<sp/>int16_t;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Here<sp/>we<sp/>declare<sp/>two<sp/>functions.<sp/>The<sp/>first<sp/>is<sp/>only<sp/>enabled<sp/>if<sp/>`&amp;U::forward`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>well-formed<sp/>and<sp/>returns<sp/>the<sp/>`yes`<sp/>type.<sp/>In<sp/>C++,<sp/>the<sp/>ellipsis<sp/>parameter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>type<sp/>(`...`)<sp/>always<sp/>puts<sp/>the<sp/>function<sp/>at<sp/>the<sp/>bottom<sp/>of<sp/>overload<sp/>resolution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>specified<sp/>in<sp/>the<sp/>standard<sp/>as:<sp/>1)<sp/>A<sp/>standard<sp/>conversion<sp/>sequence<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>always<sp/>better<sp/>than<sp/>a<sp/>user-defined<sp/>conversion<sp/>sequence<sp/>or<sp/>an<sp/>ellipsis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>conversion<sp/>sequence.<sp/>2)<sp/>A<sp/>user-defined<sp/>conversion<sp/>sequence<sp/>is<sp/>always<sp/>better</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>than<sp/>an<sp/>ellipsis<sp/>conversion<sp/>sequence<sp/>This<sp/>means<sp/>that<sp/>if<sp/>the<sp/>first<sp/>overload</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>viable,<sp/>it<sp/>will<sp/>be<sp/>preferred<sp/>over<sp/>the<sp/>second<sp/>as<sp/>long<sp/>as<sp/>we<sp/>pass<sp/>any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>convertible<sp/>type.<sp/>The<sp/>type<sp/>of<sp/>`&amp;U::forward`<sp/>is<sp/>a<sp/>pointer<sp/>type,<sp/>so<sp/>we<sp/>can</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>pass<sp/>e.g.<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>yes<sp/>test(decltype(&amp;U::forward));</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>no<sp/>test(...);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Finally<sp/>we<sp/>test<sp/>statically<sp/>whether<sp/>the<sp/>size<sp/>of<sp/>the<sp/>type<sp/>returned<sp/>by<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>selected<sp/>overload<sp/>is<sp/>the<sp/>size<sp/>of<sp/>the<sp/>`yes`<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(test&lt;T&gt;(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">))<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(yes));</highlight></codeline>
<codeline lineno="39"><highlight class="normal">};</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Head<sp/>=<sp/>void,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Tail&gt;</highlight></codeline>
<codeline lineno="42"><highlight class="normal">constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>check_not_lvalue_references()<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(!std::is_lvalue_reference&lt;Head&gt;::value<sp/>||</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_const&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::remove_reference&lt;Head&gt;::type&gt;::value)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>check_not_lvalue_references&lt;Tail...&gt;();</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>check_not_lvalue_references&lt;void&gt;()<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M&gt;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>is_module<sp/>=<sp/>std::is_base_of&lt;torch::nn::Module,<sp/>typename<sp/>std::decay&lt;M&gt;::type&gt;;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T<sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>enable_if_module_t<sp/>=</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;is_module&lt;M&gt;::value,<sp/>T&gt;::type;</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>torch</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/detail/static.h"/>
  </compounddef>
</doxygen>
