<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="classtorch_1_1detail_1_1_cursor_base" kind="class" language="C++" prot="public">
    <compoundname>torch::detail::CursorBase</compoundname>
    <includes refid="cursor_8h" local="no">cursor.h</includes>
    <innerclass refid="structtorch_1_1detail_1_1_cursor_base_1_1_collector" prot="public">torch::detail::CursorBase::Collector</innerclass>
    <innerclass refid="structtorch_1_1detail_1_1_cursor_base_1_1_item" prot="public">torch::detail::CursorBase::Item</innerclass>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classtorch_1_1detail_1_1_cursor_base_1ad0ae73f71db0abffd0f1f16a65377db5" prot="public" static="no">
        <type>T</type>
        <definition>using torch::detail::CursorBase&lt; T &gt;::ValueType =  T</definition>
        <argsstring></argsstring>
        <name>ValueType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/cursor.h" line="43" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/cursor.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classtorch_1_1detail_1_1_cursor_base_1a3bcc865b3abb420783311ad50990fba6" prot="public" static="no">
        <type>typename std::vector&lt; <ref refid="structtorch_1_1detail_1_1_cursor_base_1_1_item" kindref="compound">Item</ref> &gt;::iterator</type>
        <definition>using torch::detail::CursorBase&lt; T &gt;::Iterator =  typename std::vector&lt;Item&gt;::iterator</definition>
        <argsstring></argsstring>
        <name>Iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/cursor.h" line="66" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/cursor.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classtorch_1_1detail_1_1_cursor_base_1a5ba678cb1873e21ebef10d1e3876f0c8" prot="public" static="no">
        <type>typename std::vector&lt; <ref refid="structtorch_1_1detail_1_1_cursor_base_1_1_item" kindref="compound">Item</ref> &gt;::const_iterator</type>
        <definition>using torch::detail::CursorBase&lt; T &gt;::ConstIterator =  typename std::vector&lt;Item&gt;::const_iterator</definition>
        <argsstring></argsstring>
        <name>ConstIterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/cursor.h" line="67" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/cursor.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classtorch_1_1detail_1_1_cursor_base_1ab3e43a9a4f9688fff6263e37a4710a03" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="structtorch_1_1detail_1_1_cursor_base_1_1_item" kindref="compound">Item</ref> &gt;</type>
        <definition>std::vector&lt;Item&gt; torch::detail::CursorBase&lt; T &gt;::items_</definition>
        <argsstring></argsstring>
        <name>items_</name>
        <briefdescription>
<para>The (eagerly) collected vector of items. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/cursor.h" line="187" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/cursor.h" bodystart="184" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtorch_1_1detail_1_1_cursor_base_1a37e4eaf433c05e5d13de5c3386a40117" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>torch::detail::CursorBase&lt; T &gt;::CursorBase</definition>
        <argsstring>()=default</argsstring>
        <name>CursorBase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/cursor.h" line="69" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtorch_1_1detail_1_1_cursor_base_1aa0f545bd42ada28ee9ff7de84fe30ead" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>torch::detail::CursorBase&lt; T &gt;::CursorBase</definition>
        <argsstring>(std::vector&lt; Item &gt; &amp;&amp;items)</argsstring>
        <name>CursorBase</name>
        <param>
          <type>std::vector&lt; <ref refid="structtorch_1_1detail_1_1_cursor_base_1_1_item" kindref="compound">Item</ref> &gt; &amp;&amp;</type>
          <declname>items</declname>
        </param>
        <briefdescription>
<para>Constructs the <computeroutput><ref refid="classtorch_1_1detail_1_1_cursor_base" kindref="compound">CursorBase</ref></computeroutput> from a vector of items. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/cursor.h" line="72" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/src/nn/cursor.cpp" bodystart="44" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="classtorch_1_1detail_1_1_cursor_base_1ac379afe54700abaa6913725d41c90d2b" prot="public" static="no" const="no" explicit="no" inline="no" refqual="lvalue" virt="non-virtual">
        <type>Iterator</type>
        <definition>Iterator torch::detail::CursorBase&lt; T &gt;::begin</definition>
        <argsstring>() &amp;noexcept</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/cursor.h" line="84" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtorch_1_1detail_1_1_cursor_base_1a75030a2f022d48a67d80f684b231d7ea" prot="public" static="no" const="yes" explicit="no" inline="no" refqual="lvalue" virt="non-virtual">
        <type>ConstIterator</type>
        <definition>ConstIterator torch::detail::CursorBase&lt; T &gt;::begin</definition>
        <argsstring>() const &amp;noexcept</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/cursor.h" line="85" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtorch_1_1detail_1_1_cursor_base_1a344534bbab0b0a36e77af6116a300e75" prot="public" static="no" const="no" explicit="no" inline="no" refqual="lvalue" virt="non-virtual">
        <type>Iterator</type>
        <definition>Iterator torch::detail::CursorBase&lt; T &gt;::end</definition>
        <argsstring>() &amp;noexcept</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/cursor.h" line="87" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtorch_1_1detail_1_1_cursor_base_1a2a0a76638e5b18be1879fd44016d1dbf" prot="public" static="no" const="yes" explicit="no" inline="no" refqual="lvalue" virt="non-virtual">
        <type>ConstIterator</type>
        <definition>ConstIterator torch::detail::CursorBase&lt; T &gt;::end</definition>
        <argsstring>() const &amp;noexcept</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/cursor.h" line="88" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtorch_1_1detail_1_1_cursor_base_1a2e0d322e8126f4cc735fa2d1a3066b81" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Function</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void torch::detail::CursorBase&lt; T &gt;::apply</definition>
        <argsstring>(const Function &amp;function)</argsstring>
        <name>apply</name>
        <param>
          <type>const Function &amp;</type>
          <declname>function</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Applies a function to every <emphasis>value</emphasis> available. The function should accept a single argument, that is a reference to the value type (e.g. <computeroutput>Module&amp;</computeroutput>). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/cursor.h" line="93" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/cursor.h" bodystart="93" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classtorch_1_1detail_1_1_cursor_base_1a636e3f5793d65e1f932fa54ce7d06995" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Function</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void torch::detail::CursorBase&lt; T &gt;::apply</definition>
        <argsstring>(const Function &amp;function) const</argsstring>
        <name>apply</name>
        <param>
          <type>const Function &amp;</type>
          <declname>function</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/cursor.h" line="99" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/cursor.h" bodystart="99" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="classtorch_1_1detail_1_1_cursor_base_1a38b7ccc0d24be2127c2e5c0f4b112ec3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Function</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void torch::detail::CursorBase&lt; T &gt;::apply_items</definition>
        <argsstring>(const Function &amp;function)</argsstring>
        <name>apply_items</name>
        <param>
          <type>const Function &amp;</type>
          <declname>function</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Applies a function to every <emphasis>item</emphasis> available. The function should accept two arguments, one taking a reference to the key type (always <computeroutput>const std::string&amp;</computeroutput>) and the other taking a reference to the value type (e.g. <computeroutput>Module&amp;</computeroutput>). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/cursor.h" line="110" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/cursor.h" bodystart="110" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="classtorch_1_1detail_1_1_cursor_base_1a13272408387832468ed0389b6625c3f4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Function</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void torch::detail::CursorBase&lt; T &gt;::apply_items</definition>
        <argsstring>(const Function &amp;function) const</argsstring>
        <name>apply_items</name>
        <param>
          <type>const Function &amp;</type>
          <declname>function</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/cursor.h" line="116" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/cursor.h" bodystart="116" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="classtorch_1_1detail_1_1_cursor_base_1a617132fec1961684fb05457d05f0c79b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Iterator</type>
          </param>
          <param>
            <type>typename Function</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void torch::detail::CursorBase&lt; T &gt;::map</definition>
        <argsstring>(Iterator output_iterator, Function function)</argsstring>
        <name>map</name>
        <param>
          <type>Iterator</type>
          <declname>output_iterator</declname>
        </param>
        <param>
          <type>Function</type>
          <declname>function</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Applies a function to every <emphasis>value</emphasis> available, and stores the return value of the function into the iterator. The function should accept a single argument, that is a reference to the value type (e.g. <computeroutput>Module&amp;</computeroutput>). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/cursor.h" line="126" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/cursor.h" bodystart="126" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="classtorch_1_1detail_1_1_cursor_base_1a4af5848631903b2e94a49e090c6e74cf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Iterator</type>
          </param>
          <param>
            <type>typename Function</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void torch::detail::CursorBase&lt; T &gt;::map</definition>
        <argsstring>(Iterator output_iterator, Function function) const</argsstring>
        <name>map</name>
        <param>
          <type>Iterator</type>
          <declname>output_iterator</declname>
        </param>
        <param>
          <type>Function</type>
          <declname>function</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/cursor.h" line="132" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/cursor.h" bodystart="132" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="classtorch_1_1detail_1_1_cursor_base_1a51ddf4f18841ef198ea109f05e48380f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Iterator</type>
          </param>
          <param>
            <type>typename Function</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void torch::detail::CursorBase&lt; T &gt;::map_items</definition>
        <argsstring>(Iterator output_iterator, Function function)</argsstring>
        <name>map_items</name>
        <param>
          <type>Iterator</type>
          <declname>output_iterator</declname>
        </param>
        <param>
          <type>Function</type>
          <declname>function</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Applies a function to every <emphasis>value</emphasis> available, and stores the return value of the function into the iterator. The function should accept two arguments, one taking a reference to the key type (always <computeroutput>const std::string&amp;</computeroutput>) and the other taking a referen </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/cursor.h" line="143" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/cursor.h" bodystart="143" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="classtorch_1_1detail_1_1_cursor_base_1aec6ec8fedcac108e8e57d4e399cdd3d7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Iterator</type>
          </param>
          <param>
            <type>typename Function</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void torch::detail::CursorBase&lt; T &gt;::map_items</definition>
        <argsstring>(Iterator output_iterator, Function function) const</argsstring>
        <name>map_items</name>
        <param>
          <type>Iterator</type>
          <declname>output_iterator</declname>
        </param>
        <param>
          <type>Function</type>
          <declname>function</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/cursor.h" line="149" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/cursor.h" bodystart="149" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="classtorch_1_1detail_1_1_cursor_base_1a561e0ab3866d4c7ce5ff7efaaf1f93c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>T *</type>
        <definition>T * torch::detail::CursorBase&lt; T &gt;::find</definition>
        <argsstring>(const std::string &amp;key) noexcept</argsstring>
        <name>find</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Attempts to find a value for the given <computeroutput>key</computeroutput>. If found, returns a pointer to the value. If not, returns a null pointer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/cursor.h" line="157" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/src/nn/cursor.cpp" bodystart="68" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classtorch_1_1detail_1_1_cursor_base_1a15eb1e78484f3ef03cc4a91f0c7db320" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const T *</type>
        <definition>const T * torch::detail::CursorBase&lt; T &gt;::find</definition>
        <argsstring>(const std::string &amp;key) const noexcept</argsstring>
        <name>find</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/cursor.h" line="158" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/src/nn/cursor.cpp" bodystart="78" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="classtorch_1_1detail_1_1_cursor_base_1a8bef952a884cc961ca41d7183607ecfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T &amp; torch::detail::CursorBase&lt; T &gt;::at</definition>
        <argsstring>(const std::string &amp;key)</argsstring>
        <name>at</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Attempts to find a value for the given <computeroutput>key</computeroutput>. If found, returns a reference to the value. If not, throws an exception. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/cursor.h" line="162" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/src/nn/cursor.cpp" bodystart="88" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classtorch_1_1detail_1_1_cursor_base_1addd74a58b7f10ae2338f3373e1b79c0b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T &amp; torch::detail::CursorBase&lt; T &gt;::at</definition>
        <argsstring>(const std::string &amp;key) const</argsstring>
        <name>at</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/cursor.h" line="163" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/src/nn/cursor.cpp" bodystart="96" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="classtorch_1_1detail_1_1_cursor_base_1a41a0e908496f0211d235cae4eaf72907" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structtorch_1_1detail_1_1_cursor_base_1_1_item" kindref="compound">Item</ref> &amp;</type>
        <definition>CursorBase&lt; T &gt;::Item &amp; torch::detail::CursorBase&lt; T &gt;::at</definition>
        <argsstring>(size_t index)</argsstring>
        <name>at</name>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Attempts to return the item at the given index. If the index is in range, returns a reference to the item. If not, throws an exception. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/cursor.h" line="167" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/src/nn/cursor.cpp" bodystart="104" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="classtorch_1_1detail_1_1_cursor_base_1a7b4d6896c0d74990ff3748350a41abb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T &amp; torch::detail::CursorBase&lt; T &gt;::operator[]</definition>
        <argsstring>(const std::string &amp;key)</argsstring>
        <name>operator[]</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Equivalent to <computeroutput>at(key)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/cursor.h" line="170" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/src/nn/cursor.cpp" bodystart="115" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="classtorch_1_1detail_1_1_cursor_base_1a0e2671632f6319c91781e90761f8d952" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T &amp; torch::detail::CursorBase&lt; T &gt;::operator[]</definition>
        <argsstring>(const std::string &amp;key) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/cursor.h" line="171" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/src/nn/cursor.cpp" bodystart="120" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="classtorch_1_1detail_1_1_cursor_base_1a2d8a80317c96da70289820459d66b74b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structtorch_1_1detail_1_1_cursor_base_1_1_item" kindref="compound">Item</ref> &amp;</type>
        <definition>CursorBase&lt; T &gt;::Item &amp; torch::detail::CursorBase&lt; T &gt;::operator[]</definition>
        <argsstring>(size_t index)</argsstring>
        <name>operator[]</name>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Equivalent to <computeroutput>at(index)</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/cursor.h" line="174" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/src/nn/cursor.cpp" bodystart="125" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="classtorch_1_1detail_1_1_cursor_base_1a971017ae8a0de559019cdfcd9fae16d0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool torch::detail::CursorBase&lt; T &gt;::contains</definition>
        <argsstring>(const std::string &amp;key) const noexcept</argsstring>
        <name>contains</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Returns true if an item with the given <computeroutput>key</computeroutput> exists. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/cursor.h" line="177" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/src/nn/cursor.cpp" bodystart="130" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="classtorch_1_1detail_1_1_cursor_base_1a030c371fa3ba7961bc60c31404a1c92c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t torch::detail::CursorBase&lt; T &gt;::size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>size</name>
        <briefdescription>
<para>Counts the number of items available. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/cursor.h" line="180" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/src/nn/cursor.cpp" bodystart="135" bodyend="137"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>A cursor provides hierarchical iteration support, with convenient iterator functions like <computeroutput>map</computeroutput> or <computeroutput>find</computeroutput>.</para><para>Fundamentally, cursors are similar to <computeroutput>std::map</computeroutput>, with <computeroutput>[]</computeroutput>, <computeroutput>.<ref refid="classtorch_1_1detail_1_1_cursor_base_1a8bef952a884cc961ca41d7183607ecfc" kindref="member">at()</ref></computeroutput>, <computeroutput>.<ref refid="classtorch_1_1detail_1_1_cursor_base_1a030c371fa3ba7961bc60c31404a1c92c" kindref="member">size()</ref></computeroutput> etc. When iterating over a cursor, use <computeroutput>.key()</computeroutput> to get the associated string, and dereference the returned item or use <computeroutput>.value()</computeroutput> to get the associated value (e.g. the variable, the module or the buffer).</para><para>Note that cursors <emphasis>eagerly</emphasis> collect items. So if you want to perform many operations with a single cursor, it is better to store it in a local variable. This also you means should not store iterators into a temporary cursor, e.g. do not write <computeroutput>auto iterator = module.parameters().begin()</computeroutput>, as the parameter cursor will die at the end of the expression.</para><para>A cursor&apos;s lifetime is bound to the lifetime of the module hierarchy into which it points. </para>    </detaileddescription>
    <location file="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/cursor.h" line="41" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/cursor.h" bodystart="41" bodyend="188"/>
    <listofallmembers>
      <member refid="classtorch_1_1detail_1_1_cursor_base_1a2e0d322e8126f4cc735fa2d1a3066b81" prot="public" virt="non-virtual"><scope>torch::detail::CursorBase</scope><name>apply</name></member>
      <member refid="classtorch_1_1detail_1_1_cursor_base_1a636e3f5793d65e1f932fa54ce7d06995" prot="public" virt="non-virtual"><scope>torch::detail::CursorBase</scope><name>apply</name></member>
      <member refid="classtorch_1_1detail_1_1_cursor_base_1a38b7ccc0d24be2127c2e5c0f4b112ec3" prot="public" virt="non-virtual"><scope>torch::detail::CursorBase</scope><name>apply_items</name></member>
      <member refid="classtorch_1_1detail_1_1_cursor_base_1a13272408387832468ed0389b6625c3f4" prot="public" virt="non-virtual"><scope>torch::detail::CursorBase</scope><name>apply_items</name></member>
      <member refid="classtorch_1_1detail_1_1_cursor_base_1a8bef952a884cc961ca41d7183607ecfc" prot="public" virt="non-virtual"><scope>torch::detail::CursorBase</scope><name>at</name></member>
      <member refid="classtorch_1_1detail_1_1_cursor_base_1addd74a58b7f10ae2338f3373e1b79c0b" prot="public" virt="non-virtual"><scope>torch::detail::CursorBase</scope><name>at</name></member>
      <member refid="classtorch_1_1detail_1_1_cursor_base_1a41a0e908496f0211d235cae4eaf72907" prot="public" virt="non-virtual"><scope>torch::detail::CursorBase</scope><name>at</name></member>
      <member refid="classtorch_1_1detail_1_1_cursor_base_1ac379afe54700abaa6913725d41c90d2b" prot="public" virt="non-virtual"><scope>torch::detail::CursorBase</scope><name>begin</name></member>
      <member refid="classtorch_1_1detail_1_1_cursor_base_1a75030a2f022d48a67d80f684b231d7ea" prot="public" virt="non-virtual"><scope>torch::detail::CursorBase</scope><name>begin</name></member>
      <member refid="classtorch_1_1detail_1_1_cursor_base_1a5ba678cb1873e21ebef10d1e3876f0c8" prot="public" virt="non-virtual"><scope>torch::detail::CursorBase</scope><name>ConstIterator</name></member>
      <member refid="classtorch_1_1detail_1_1_cursor_base_1a971017ae8a0de559019cdfcd9fae16d0" prot="public" virt="non-virtual"><scope>torch::detail::CursorBase</scope><name>contains</name></member>
      <member refid="classtorch_1_1detail_1_1_cursor_base_1a37e4eaf433c05e5d13de5c3386a40117" prot="public" virt="non-virtual"><scope>torch::detail::CursorBase</scope><name>CursorBase</name></member>
      <member refid="classtorch_1_1detail_1_1_cursor_base_1aa0f545bd42ada28ee9ff7de84fe30ead" prot="public" virt="non-virtual"><scope>torch::detail::CursorBase</scope><name>CursorBase</name></member>
      <member refid="classtorch_1_1detail_1_1_cursor_base_1a344534bbab0b0a36e77af6116a300e75" prot="public" virt="non-virtual"><scope>torch::detail::CursorBase</scope><name>end</name></member>
      <member refid="classtorch_1_1detail_1_1_cursor_base_1a2a0a76638e5b18be1879fd44016d1dbf" prot="public" virt="non-virtual"><scope>torch::detail::CursorBase</scope><name>end</name></member>
      <member refid="classtorch_1_1detail_1_1_cursor_base_1a561e0ab3866d4c7ce5ff7efaaf1f93c9" prot="public" virt="non-virtual"><scope>torch::detail::CursorBase</scope><name>find</name></member>
      <member refid="classtorch_1_1detail_1_1_cursor_base_1a15eb1e78484f3ef03cc4a91f0c7db320" prot="public" virt="non-virtual"><scope>torch::detail::CursorBase</scope><name>find</name></member>
      <member refid="classtorch_1_1detail_1_1_cursor_base_1ab3e43a9a4f9688fff6263e37a4710a03" prot="protected" virt="non-virtual"><scope>torch::detail::CursorBase</scope><name>items_</name></member>
      <member refid="classtorch_1_1detail_1_1_cursor_base_1a3bcc865b3abb420783311ad50990fba6" prot="public" virt="non-virtual"><scope>torch::detail::CursorBase</scope><name>Iterator</name></member>
      <member refid="classtorch_1_1detail_1_1_cursor_base_1a617132fec1961684fb05457d05f0c79b" prot="public" virt="non-virtual"><scope>torch::detail::CursorBase</scope><name>map</name></member>
      <member refid="classtorch_1_1detail_1_1_cursor_base_1a4af5848631903b2e94a49e090c6e74cf" prot="public" virt="non-virtual"><scope>torch::detail::CursorBase</scope><name>map</name></member>
      <member refid="classtorch_1_1detail_1_1_cursor_base_1a51ddf4f18841ef198ea109f05e48380f" prot="public" virt="non-virtual"><scope>torch::detail::CursorBase</scope><name>map_items</name></member>
      <member refid="classtorch_1_1detail_1_1_cursor_base_1aec6ec8fedcac108e8e57d4e399cdd3d7" prot="public" virt="non-virtual"><scope>torch::detail::CursorBase</scope><name>map_items</name></member>
      <member refid="classtorch_1_1detail_1_1_cursor_base_1a7b4d6896c0d74990ff3748350a41abb1" prot="public" virt="non-virtual"><scope>torch::detail::CursorBase</scope><name>operator[]</name></member>
      <member refid="classtorch_1_1detail_1_1_cursor_base_1a0e2671632f6319c91781e90761f8d952" prot="public" virt="non-virtual"><scope>torch::detail::CursorBase</scope><name>operator[]</name></member>
      <member refid="classtorch_1_1detail_1_1_cursor_base_1a2d8a80317c96da70289820459d66b74b" prot="public" virt="non-virtual"><scope>torch::detail::CursorBase</scope><name>operator[]</name></member>
      <member refid="classtorch_1_1detail_1_1_cursor_base_1a030c371fa3ba7961bc60c31404a1c92c" prot="public" virt="non-virtual"><scope>torch::detail::CursorBase</scope><name>size</name></member>
      <member refid="classtorch_1_1detail_1_1_cursor_base_1ad0ae73f71db0abffd0f1f16a65377db5" prot="public" virt="non-virtual"><scope>torch::detail::CursorBase</scope><name>ValueType</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
