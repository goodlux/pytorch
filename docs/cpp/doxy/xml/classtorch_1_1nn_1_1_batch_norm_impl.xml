<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="classtorch_1_1nn_1_1_batch_norm_impl" kind="class" language="C++" prot="public">
    <compoundname>torch::nn::BatchNormImpl</compoundname>
    <basecompoundref refid="classtorch_1_1nn_1_1_cloneable" prot="public" virt="non-virtual">torch::nn::Cloneable&lt; BatchNormImpl &gt;</basecompoundref>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classtorch_1_1nn_1_1_batch_norm_impl_1a5119efd68d978fbe635389b8ecb4e14a" prot="public" static="no" mutable="no">
        <type><ref refid="structtorch_1_1nn_1_1_batch_norm_options" kindref="compound">BatchNormOptions</ref></type>
        <definition>BatchNormOptions torch::nn::BatchNormImpl::options</definition>
        <argsstring></argsstring>
        <name>options</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/modules/batchnorm.h" line="31" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/modules/batchnorm.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtorch_1_1nn_1_1_batch_norm_impl_1a985fa7752c97ecc5413ecc0aeb904e67" prot="public" static="no" mutable="no">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor torch::nn::BatchNormImpl::weight</definition>
        <argsstring></argsstring>
        <name>weight</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/modules/batchnorm.h" line="32" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/modules/batchnorm.h" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtorch_1_1nn_1_1_batch_norm_impl_1ab95f94b27f435d9a454758a7edddf72e" prot="public" static="no" mutable="no">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor torch::nn::BatchNormImpl::bias</definition>
        <argsstring></argsstring>
        <name>bias</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/modules/batchnorm.h" line="33" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/modules/batchnorm.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtorch_1_1nn_1_1_batch_norm_impl_1a55a5260e2cde59dcb71c291136559951" prot="public" static="no" mutable="no">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor torch::nn::BatchNormImpl::running_mean</definition>
        <argsstring></argsstring>
        <name>running_mean</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/modules/batchnorm.h" line="34" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/modules/batchnorm.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtorch_1_1nn_1_1_batch_norm_impl_1a96af3e5b1835ff8a445487465568786c" prot="public" static="no" mutable="no">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor torch::nn::BatchNormImpl::running_variance</definition>
        <argsstring></argsstring>
        <name>running_variance</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/modules/batchnorm.h" line="35" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/modules/batchnorm.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtorch_1_1nn_1_1_batch_norm_impl_1a29999ce85971cd4f2b36eb02863bb76b" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>torch::nn::BatchNormImpl::BatchNormImpl</definition>
        <argsstring>(int64_t features)</argsstring>
        <name>BatchNormImpl</name>
        <param>
          <type>int64_t</type>
          <declname>features</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/modules/batchnorm.h" line="22" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/modules/batchnorm.h" bodystart="22" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="classtorch_1_1nn_1_1_batch_norm_impl_1af808aa9df5ba2cf395b440f73c2b07f3" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>torch::nn::BatchNormImpl::BatchNormImpl</definition>
        <argsstring>(BatchNormOptions options)</argsstring>
        <name>BatchNormImpl</name>
        <param>
          <type><ref refid="structtorch_1_1nn_1_1_batch_norm_options" kindref="compound">BatchNormOptions</ref></type>
          <declname>options</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/modules/batchnorm.h" line="24" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/src/nn/modules/batchnorm.cpp" bodystart="16" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="classtorch_1_1nn_1_1_batch_norm_impl_1a466e62abc12ac7a055f535a32f8fa86c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void torch::nn::BatchNormImpl::reset</definition>
        <argsstring>() override</argsstring>
        <name>reset</name>
        <reimplements refid="classtorch_1_1nn_1_1_cloneable_1a615301b61c2146c150a0e5df0c4d83ab">reset</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><computeroutput><ref refid="classtorch_1_1nn_1_1_batch_norm_impl_1a466e62abc12ac7a055f535a32f8fa86c" kindref="member">reset()</ref></computeroutput> must perform initialization of all members with reference semantics, most importantly parameters, buffers and submodules. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/modules/batchnorm.h" line="26" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/src/nn/modules/batchnorm.cpp" bodystart="21" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="classtorch_1_1nn_1_1_batch_norm_impl_1ac3cc4a57c66f425f6429c79fd1b61dc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor torch::nn::BatchNormImpl::forward</definition>
        <argsstring>(Tensor input)</argsstring>
        <name>forward</name>
        <param>
          <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/modules/batchnorm.h" line="28" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/src/nn/modules/batchnorm.cpp" bodystart="36" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="classtorch_1_1nn_1_1_batch_norm_impl_1a9c170707d24ce7d31df9397c5a206b4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor torch::nn::BatchNormImpl::pure_forward</definition>
        <argsstring>(Tensor input, Tensor mean, Tensor variance)</argsstring>
        <name>pure_forward</name>
        <param>
          <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
          <declname>input</declname>
        </param>
        <param>
          <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
          <declname>mean</declname>
        </param>
        <param>
          <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
          <declname>variance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/modules/batchnorm.h" line="29" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/src/nn/modules/batchnorm.cpp" bodystart="40" bodyend="62"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="86">
        <label>torch::nn::Cloneable&lt; BatchNormImpl &gt;</label>
        <link refid="classtorch_1_1nn_1_1_cloneable"/>
        <childnode refid="87" relation="public-inheritance">
        </childnode>
      </node>
      <node id="87">
        <label>torch::nn::Module</label>
        <link refid="classtorch_1_1nn_1_1_module"/>
      </node>
      <node id="85">
        <label>torch::nn::BatchNormImpl</label>
        <link refid="classtorch_1_1nn_1_1_batch_norm_impl"/>
        <childnode refid="86" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="91">
        <label>torch::nn::BatchNormOptions</label>
        <link refid="structtorch_1_1nn_1_1_batch_norm_options"/>
      </node>
      <node id="89">
        <label>torch::nn::Cloneable&lt; BatchNormImpl &gt;</label>
        <link refid="classtorch_1_1nn_1_1_cloneable"/>
        <childnode refid="90" relation="public-inheritance">
        </childnode>
      </node>
      <node id="90">
        <label>torch::nn::Module</label>
        <link refid="classtorch_1_1nn_1_1_module"/>
      </node>
      <node id="88">
        <label>torch::nn::BatchNormImpl</label>
        <link refid="classtorch_1_1nn_1_1_batch_norm_impl"/>
        <childnode refid="89" relation="public-inheritance">
        </childnode>
        <childnode refid="91" relation="usage">
          <edgelabel>options</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/modules/batchnorm.h" line="20" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/modules/batchnorm.h" bodystart="20" bodyend="36"/>
    <listofallmembers>
      <member refid="classtorch_1_1nn_1_1_module_1ab933f8f978b718c513fbc39ab70de97b" prot="public" virt="non-virtual"><scope>torch::nn::BatchNormImpl</scope><name>as</name></member>
      <member refid="classtorch_1_1nn_1_1_module_1a4af0d4c015e6f453f57f078860f607ff" prot="public" virt="non-virtual"><scope>torch::nn::BatchNormImpl</scope><name>as</name></member>
      <member refid="classtorch_1_1nn_1_1_batch_norm_impl_1a29999ce85971cd4f2b36eb02863bb76b" prot="public" virt="non-virtual"><scope>torch::nn::BatchNormImpl</scope><name>BatchNormImpl</name></member>
      <member refid="classtorch_1_1nn_1_1_batch_norm_impl_1af808aa9df5ba2cf395b440f73c2b07f3" prot="public" virt="non-virtual"><scope>torch::nn::BatchNormImpl</scope><name>BatchNormImpl</name></member>
      <member refid="classtorch_1_1nn_1_1_batch_norm_impl_1ab95f94b27f435d9a454758a7edddf72e" prot="public" virt="non-virtual"><scope>torch::nn::BatchNormImpl</scope><name>bias</name></member>
      <member refid="classtorch_1_1nn_1_1_module_1a4a454ce3c8f5f45df56a2af6b45e279d" prot="public" virt="non-virtual"><scope>torch::nn::BatchNormImpl</scope><name>buffers</name></member>
      <member refid="classtorch_1_1nn_1_1_module_1ab9edbda5e5d8f5347ebd71d20151ff28" prot="public" virt="non-virtual"><scope>torch::nn::BatchNormImpl</scope><name>buffers</name></member>
      <member refid="classtorch_1_1nn_1_1_module_1af4749687a6b4ba26c753e670124c0ac3" prot="public" virt="non-virtual"><scope>torch::nn::BatchNormImpl</scope><name>children</name></member>
      <member refid="classtorch_1_1nn_1_1_module_1a0d342685071dfb8ef5d90b88b1c35351" prot="public" virt="non-virtual"><scope>torch::nn::BatchNormImpl</scope><name>children</name></member>
      <member refid="classtorch_1_1nn_1_1_cloneable_1a17155365d71ece55dacb2ad026ad6f6e" prot="public" virt="virtual"><scope>torch::nn::BatchNormImpl</scope><name>clone</name></member>
      <member refid="classtorch_1_1nn_1_1_module_1af0be79d2e17a200b5f69023ba6f02598" prot="public" virt="virtual"><scope>torch::nn::BatchNormImpl</scope><name>eval</name></member>
      <member refid="classtorch_1_1nn_1_1_batch_norm_impl_1ac3cc4a57c66f425f6429c79fd1b61dc7" prot="public" virt="non-virtual"><scope>torch::nn::BatchNormImpl</scope><name>forward</name></member>
      <member refid="classtorch_1_1nn_1_1_module_1a0489238ce8594bf93c210e36e971d314" prot="public" virt="virtual"><scope>torch::nn::BatchNormImpl</scope><name>is_training</name></member>
      <member refid="classtorch_1_1nn_1_1_module_1a1f7e60a680a0f2781204bc086b554a24" prot="public" virt="non-virtual"><scope>torch::nn::BatchNormImpl</scope><name>load</name></member>
      <member refid="classtorch_1_1nn_1_1_cloneable_1a33ac482c601ffecdaabe46a0f364cc51" prot="public" virt="non-virtual"><scope>torch::nn::BatchNormImpl</scope><name>Module</name></member>
      <member refid="classtorch_1_1nn_1_1_cloneable_1a6d7baa75e5b84bb97e2867b6ef93c82c" prot="public" virt="non-virtual"><scope>torch::nn::BatchNormImpl</scope><name>Module</name></member>
      <member refid="classtorch_1_1nn_1_1_module_1a33ac482c601ffecdaabe46a0f364cc51" prot="public" virt="non-virtual" ambiguityscope="torch::nn::Module::"><scope>torch::nn::BatchNormImpl</scope><name>Module</name></member>
      <member refid="classtorch_1_1nn_1_1_module_1a6d7baa75e5b84bb97e2867b6ef93c82c" prot="public" virt="non-virtual" ambiguityscope="torch::nn::Module::"><scope>torch::nn::BatchNormImpl</scope><name>Module</name></member>
      <member refid="classtorch_1_1nn_1_1_module_1a892a2b7bc212018316dfa5f26a5b8efc" prot="public" virt="non-virtual"><scope>torch::nn::BatchNormImpl</scope><name>modules</name></member>
      <member refid="classtorch_1_1nn_1_1_module_1ac92d5366afb1cca7578c569fdbdbc405" prot="public" virt="non-virtual"><scope>torch::nn::BatchNormImpl</scope><name>modules</name></member>
      <member refid="classtorch_1_1nn_1_1_module_1ab503bb4fdf163c00ac1e9fc695f55403" prot="public" virt="non-virtual"><scope>torch::nn::BatchNormImpl</scope><name>name</name></member>
      <member refid="classtorch_1_1nn_1_1_batch_norm_impl_1a5119efd68d978fbe635389b8ecb4e14a" prot="public" virt="non-virtual"><scope>torch::nn::BatchNormImpl</scope><name>options</name></member>
      <member refid="classtorch_1_1nn_1_1_module_1a8a41bcec40fafbb56a972b4b6ea2b217" prot="public" virt="non-virtual"><scope>torch::nn::BatchNormImpl</scope><name>parameters</name></member>
      <member refid="classtorch_1_1nn_1_1_module_1aa5c48c9bf4715d4c48f1f00228a9761f" prot="public" virt="non-virtual"><scope>torch::nn::BatchNormImpl</scope><name>parameters</name></member>
      <member refid="classtorch_1_1nn_1_1_batch_norm_impl_1a9c170707d24ce7d31df9397c5a206b4a" prot="public" virt="non-virtual"><scope>torch::nn::BatchNormImpl</scope><name>pure_forward</name></member>
      <member refid="classtorch_1_1nn_1_1_module_1a036e8a4cad8eb1d1253f3de7f355a650" prot="protected" virt="non-virtual"><scope>torch::nn::BatchNormImpl</scope><name>register_buffer</name></member>
      <member refid="classtorch_1_1nn_1_1_module_1a505feb18878e17ed60038c4ed87406f5" prot="protected" virt="non-virtual"><scope>torch::nn::BatchNormImpl</scope><name>register_module</name></member>
      <member refid="classtorch_1_1nn_1_1_module_1ae21020d776f84f91ebc8679da84c3fc7" prot="protected" virt="non-virtual"><scope>torch::nn::BatchNormImpl</scope><name>register_module</name></member>
      <member refid="classtorch_1_1nn_1_1_module_1aab880a8567a7aaff03677207e00bae93" prot="protected" virt="non-virtual"><scope>torch::nn::BatchNormImpl</scope><name>register_parameter</name></member>
      <member refid="classtorch_1_1nn_1_1_batch_norm_impl_1a466e62abc12ac7a055f535a32f8fa86c" prot="public" virt="virtual"><scope>torch::nn::BatchNormImpl</scope><name>reset</name></member>
      <member refid="classtorch_1_1nn_1_1_batch_norm_impl_1a55a5260e2cde59dcb71c291136559951" prot="public" virt="non-virtual"><scope>torch::nn::BatchNormImpl</scope><name>running_mean</name></member>
      <member refid="classtorch_1_1nn_1_1_batch_norm_impl_1a96af3e5b1835ff8a445487465568786c" prot="public" virt="non-virtual"><scope>torch::nn::BatchNormImpl</scope><name>running_variance</name></member>
      <member refid="classtorch_1_1nn_1_1_module_1a14804242333be316fb15f5dc7becb3f1" prot="public" virt="non-virtual"><scope>torch::nn::BatchNormImpl</scope><name>save</name></member>
      <member refid="classtorch_1_1nn_1_1_module_1a9335a64808dda0178374d0818403f88f" prot="public" virt="virtual"><scope>torch::nn::BatchNormImpl</scope><name>to</name></member>
      <member refid="classtorch_1_1nn_1_1_module_1a06916399bc5c0270d3db18153b4a0ad8" prot="public" virt="virtual"><scope>torch::nn::BatchNormImpl</scope><name>to</name></member>
      <member refid="classtorch_1_1nn_1_1_module_1abd24812c2304761b85420f4d5edfa828" prot="public" virt="virtual"><scope>torch::nn::BatchNormImpl</scope><name>to</name></member>
      <member refid="classtorch_1_1nn_1_1_module_1af1874eca189786412714e807c38bdcf1" prot="public" virt="virtual"><scope>torch::nn::BatchNormImpl</scope><name>train</name></member>
      <member refid="classtorch_1_1nn_1_1_batch_norm_impl_1a985fa7752c97ecc5413ecc0aeb904e67" prot="public" virt="non-virtual"><scope>torch::nn::BatchNormImpl</scope><name>weight</name></member>
      <member refid="classtorch_1_1nn_1_1_module_1a0ae8830982a7a15bfa6df1dcc7d5e7f3" prot="public" virt="virtual"><scope>torch::nn::BatchNormImpl</scope><name>zero_grad</name></member>
      <member refid="classtorch_1_1nn_1_1_module_1afbc08b9bf696297df27ab4e86fcec9f4" prot="public" virt="virtual"><scope>torch::nn::BatchNormImpl</scope><name>~Module</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
