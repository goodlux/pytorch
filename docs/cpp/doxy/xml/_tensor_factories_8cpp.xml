<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="_tensor_factories_8cpp" kind="file" language="C++">
    <compoundname>TensorFactories.cpp</compoundname>
    <includes refid="_a_ten_8h" local="yes">ATen/ATen.h</includes>
    <includes local="yes">ATen/CPUGenerator.h</includes>
    <includes refid="_check_generator_8h" local="yes">ATen/CheckGenerator.h</includes>
    <includes refid="_dispatch_8h" local="yes">ATen/Dispatch.h</includes>
    <includes refid="_error_8h" local="yes">ATen/Error.h</includes>
    <includes local="yes">ATen/NativeFunctions.h</includes>
    <includes refid="_scalar_type_8h" local="yes">ATen/ScalarType.h</includes>
    <includes refid="_deprecated_8h" local="yes">ATen/Deprecated.h</includes>
    <includes refid="_tensor_options_8h" local="yes">ATen/TensorOptions.h</includes>
    <includes local="yes">TH/THRandom.h</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">cmath</includes>
    <includes local="no">cstddef</includes>
    <incdepgraph>
      <node id="7943">
        <label>ATen/optional.h</label>
        <link refid="optional_8h_source"/>
        <childnode refid="7944" relation="include">
        </childnode>
        <childnode refid="7945" relation="include">
        </childnode>
        <childnode refid="7946" relation="include">
        </childnode>
        <childnode refid="7947" relation="include">
        </childnode>
        <childnode refid="7948" relation="include">
        </childnode>
        <childnode refid="7949" relation="include">
        </childnode>
        <childnode refid="7950" relation="include">
        </childnode>
      </node>
      <node id="7989">
        <label>ATen/detail/CUDAHooksInterface.h</label>
        <link refid="_c_u_d_a_hooks_interface_8h_source"/>
        <childnode refid="7939" relation="include">
        </childnode>
        <childnode refid="7942" relation="include">
        </childnode>
        <childnode refid="7987" relation="include">
        </childnode>
        <childnode refid="7990" relation="include">
        </childnode>
        <childnode refid="7951" relation="include">
        </childnode>
        <childnode refid="7948" relation="include">
        </childnode>
        <childnode refid="7940" relation="include">
        </childnode>
      </node>
      <node id="7957">
        <label>ATen/Device.h</label>
        <link refid="_device_8h_source"/>
        <childnode refid="7942" relation="include">
        </childnode>
        <childnode refid="7958" relation="include">
        </childnode>
        <childnode refid="7951" relation="include">
        </childnode>
        <childnode refid="7973" relation="include">
        </childnode>
        <childnode refid="7949" relation="include">
        </childnode>
        <childnode refid="7948" relation="include">
        </childnode>
      </node>
      <node id="7956">
        <label>atomic</label>
      </node>
      <node id="7948">
        <label>functional</label>
      </node>
      <node id="7994">
        <label>ATen/Backtrace.h</label>
        <link refid="_backtrace_8h_source"/>
        <childnode refid="7951" relation="include">
        </childnode>
        <childnode refid="7949" relation="include">
        </childnode>
        <childnode refid="7984" relation="include">
        </childnode>
        <childnode refid="7937" relation="include">
        </childnode>
      </node>
      <node id="7958">
        <label>ATen/ScalarType.h</label>
        <link refid="_scalar_type_8h_source"/>
        <childnode refid="7959" relation="include">
        </childnode>
        <childnode refid="7937" relation="include">
        </childnode>
        <childnode refid="7969" relation="include">
        </childnode>
        <childnode refid="7971" relation="include">
        </childnode>
        <childnode refid="7975" relation="include">
        </childnode>
      </node>
      <node id="7970">
        <label>limits</label>
      </node>
      <node id="7978">
        <label>assert.h</label>
      </node>
      <node id="7983">
        <label>ATen/Utils.h</label>
        <link refid="aten_2src_2_a_ten_2utils_8h_source"/>
        <childnode refid="7937" relation="include">
        </childnode>
        <childnode refid="7959" relation="include">
        </childnode>
        <childnode refid="7942" relation="include">
        </childnode>
        <childnode refid="7982" relation="include">
        </childnode>
        <childnode refid="7962" relation="include">
        </childnode>
        <childnode refid="7954" relation="include">
        </childnode>
        <childnode refid="7984" relation="include">
        </childnode>
        <childnode refid="7985" relation="include">
        </childnode>
      </node>
      <node id="7965">
        <label>iterator</label>
      </node>
      <node id="7977">
        <label>ATen/Scalar.h</label>
        <link refid="_scalar_8h_source"/>
        <childnode refid="7978" relation="include">
        </childnode>
        <childnode refid="7979" relation="include">
        </childnode>
        <childnode refid="7950" relation="include">
        </childnode>
        <childnode refid="7949" relation="include">
        </childnode>
        <childnode refid="7944" relation="include">
        </childnode>
        <childnode refid="7937" relation="include">
        </childnode>
        <childnode refid="7969" relation="include">
        </childnode>
        <childnode refid="7958" relation="include">
        </childnode>
        <childnode refid="7980" relation="include">
        </childnode>
        <childnode refid="7983" relation="include">
        </childnode>
      </node>
      <node id="7997">
        <label>TH/THStorageFunctions.hpp</label>
      </node>
      <node id="7971">
        <label>cstdint</label>
      </node>
      <node id="8005">
        <label>ATen/Deprecated.h</label>
        <link refid="_deprecated_8h_source"/>
      </node>
      <node id="7979">
        <label>stdint.h</label>
      </node>
      <node id="8016">
        <label>ATen/CUDAGuard.h</label>
        <link refid="_c_u_d_a_guard_8h_source"/>
      </node>
      <node id="7972">
        <label>cmath</label>
      </node>
      <node id="7947">
        <label>cassert</label>
      </node>
      <node id="7988">
        <label>ATen/Context.h</label>
        <link refid="_context_8h_source"/>
        <childnode refid="7937" relation="include">
        </childnode>
        <childnode refid="7938" relation="include">
        </childnode>
        <childnode refid="7987" relation="include">
        </childnode>
        <childnode refid="7986" relation="include">
        </childnode>
        <childnode refid="7983" relation="include">
        </childnode>
        <childnode refid="7942" relation="include">
        </childnode>
        <childnode refid="7989" relation="include">
        </childnode>
        <childnode refid="7995" relation="include">
        </childnode>
        <childnode refid="7940" relation="include">
        </childnode>
        <childnode refid="7992" relation="include">
        </childnode>
        <childnode refid="7971" relation="include">
        </childnode>
      </node>
      <node id="7974">
        <label>Half-inl.h</label>
        <link refid="_half-inl_8h_source"/>
        <childnode refid="7937" relation="include">
        </childnode>
        <childnode refid="7964" relation="include">
        </childnode>
        <childnode refid="7970" relation="include">
        </childnode>
      </node>
      <node id="7950">
        <label>stdexcept</label>
      </node>
      <node id="8011">
        <label>ATen/TensorOperators.h</label>
        <link refid="_tensor_operators_8h_source"/>
        <childnode refid="7977" relation="include">
        </childnode>
        <childnode refid="7998" relation="include">
        </childnode>
        <childnode refid="7986" relation="include">
        </childnode>
        <childnode refid="7949" relation="include">
        </childnode>
        <childnode refid="7950" relation="include">
        </childnode>
      </node>
      <node id="7985">
        <label>numeric</label>
      </node>
      <node id="7981">
        <label>ATen/TensorImpl.h</label>
        <link refid="_tensor_impl_8h_source"/>
        <childnode refid="7956" relation="include">
        </childnode>
        <childnode refid="7940" relation="include">
        </childnode>
        <childnode refid="7955" relation="include">
        </childnode>
        <childnode refid="7958" relation="include">
        </childnode>
        <childnode refid="7943" relation="include">
        </childnode>
      </node>
      <node id="7969">
        <label>ATen/Half.h</label>
        <link refid="_half_8h_source"/>
        <childnode refid="7937" relation="include">
        </childnode>
        <childnode refid="7970" relation="include">
        </childnode>
        <childnode refid="7949" relation="include">
        </childnode>
        <childnode refid="7971" relation="include">
        </childnode>
        <childnode refid="7950" relation="include">
        </childnode>
        <childnode refid="7944" relation="include">
        </childnode>
        <childnode refid="7972" relation="include">
        </childnode>
        <childnode refid="7973" relation="include">
        </childnode>
        <childnode refid="7974" relation="include">
        </childnode>
      </node>
      <node id="7955">
        <label>ATen/Retainable.h</label>
        <link refid="_retainable_8h_source"/>
        <childnode refid="7956" relation="include">
        </childnode>
      </node>
      <node id="7980">
        <label>ATen/TensorBase.h</label>
        <link refid="_tensor_base_8h_source"/>
        <childnode refid="7981" relation="include">
        </childnode>
        <childnode refid="7982" relation="include">
        </childnode>
      </node>
      <node id="7949">
        <label>string</label>
      </node>
      <node id="8014">
        <label>ATen/DimVector.h</label>
        <link refid="_dim_vector_8h_source"/>
        <childnode refid="7960" relation="include">
        </childnode>
        <childnode refid="7979" relation="include">
        </childnode>
      </node>
      <node id="8015">
        <label>ATen/OptionsGuard.h</label>
        <link refid="_options_guard_8h_source"/>
        <childnode refid="7957" relation="include">
        </childnode>
        <childnode refid="8001" relation="include">
        </childnode>
        <childnode refid="7958" relation="include">
        </childnode>
        <childnode refid="8008" relation="include">
        </childnode>
        <childnode refid="7943" relation="include">
        </childnode>
      </node>
      <node id="8019">
        <label>TH/THRandom.h</label>
      </node>
      <node id="7939">
        <label>ATen/Allocator.h</label>
        <link refid="_allocator_8h_source"/>
        <childnode refid="7940" relation="include">
        </childnode>
        <childnode refid="7941" relation="include">
        </childnode>
        <childnode refid="7942" relation="include">
        </childnode>
        <childnode refid="7955" relation="include">
        </childnode>
        <childnode refid="7957" relation="include">
        </childnode>
        <childnode refid="7976" relation="include">
        </childnode>
      </node>
      <node id="7995">
        <label>ATen/CUDAStream.h</label>
        <link refid="_c_u_d_a_stream_8h_source"/>
      </node>
      <node id="8007">
        <label>ATen/DeviceGuard.h</label>
        <link refid="_device_guard_8h_source"/>
        <childnode refid="7957" relation="include">
        </childnode>
        <childnode refid="7942" relation="include">
        </childnode>
        <childnode refid="7958" relation="include">
        </childnode>
        <childnode refid="7998" relation="include">
        </childnode>
        <childnode refid="7989" relation="include">
        </childnode>
        <childnode refid="7951" relation="include">
        </childnode>
      </node>
      <node id="7952">
        <label>exception</label>
      </node>
      <node id="7941">
        <label>stddef.h</label>
      </node>
      <node id="7982">
        <label>ATen/UndefinedTensor.h</label>
        <link refid="_undefined_tensor_8h_source"/>
        <childnode refid="7981" relation="include">
        </childnode>
      </node>
      <node id="8013">
        <label>ATen/Dispatch.h</label>
        <link refid="_dispatch_8h_source"/>
        <childnode refid="7942" relation="include">
        </childnode>
        <childnode refid="7969" relation="include">
        </childnode>
        <childnode refid="7986" relation="include">
        </childnode>
      </node>
      <node id="7961">
        <label>AlignOf.h</label>
        <link refid="_align_of_8h_source"/>
        <childnode refid="7951" relation="include">
        </childnode>
      </node>
      <node id="7996">
        <label>ATen/Storage.h</label>
        <link refid="_storage_8h_source"/>
        <childnode refid="7977" relation="include">
        </childnode>
        <childnode refid="7997" relation="include">
        </childnode>
      </node>
      <node id="7953">
        <label>ostream</label>
      </node>
      <node id="7938">
        <label>ATen/CPUGeneral.h</label>
        <link refid="_c_p_u_general_8h_source"/>
        <childnode refid="7937" relation="include">
        </childnode>
      </node>
      <node id="7986">
        <label>ATen/Type.h</label>
      </node>
      <node id="7959">
        <label>ATen/ArrayRef.h</label>
        <link refid="_array_ref_8h_source"/>
        <childnode refid="7942" relation="include">
        </childnode>
        <childnode refid="7960" relation="include">
        </childnode>
        <childnode refid="7967" relation="include">
        </childnode>
        <childnode refid="7965" relation="include">
        </childnode>
        <childnode refid="7968" relation="include">
        </childnode>
      </node>
      <node id="8002">
        <label>ATen/TensorGeometry.h</label>
        <link refid="_tensor_geometry_8h_source"/>
        <childnode refid="7986" relation="include">
        </childnode>
        <childnode refid="8003" relation="include">
        </childnode>
      </node>
      <node id="7999">
        <label>ATen/SparseTensorRef.h</label>
        <link refid="_sparse_tensor_ref_8h_source"/>
      </node>
      <node id="8018">
        <label>ATen/CheckGenerator.h</label>
        <link refid="_check_generator_8h_source"/>
        <childnode refid="7942" relation="include">
        </childnode>
        <childnode refid="7987" relation="include">
        </childnode>
        <childnode refid="7983" relation="include">
        </childnode>
      </node>
      <node id="7937">
        <label>ATen/ATenGeneral.h</label>
        <link refid="_a_ten_general_8h_source"/>
      </node>
      <node id="8003">
        <label>ATen/WrapDimUtils.h</label>
        <link refid="_wrap_dim_utils_8h_source"/>
        <childnode refid="7981" relation="include">
        </childnode>
        <childnode refid="7954" relation="include">
        </childnode>
      </node>
      <node id="8000">
        <label>ATen/TensorAccessor.h</label>
        <link refid="_tensor_accessor_8h_source"/>
        <childnode refid="7951" relation="include">
        </childnode>
        <childnode refid="7979" relation="include">
        </childnode>
        <childnode refid="7958" relation="include">
        </childnode>
      </node>
      <node id="7984">
        <label>typeinfo</label>
      </node>
      <node id="7991">
        <label>cstdio</label>
      </node>
      <node id="7976">
        <label>ATen/detail/UniqueVoidPtr.h</label>
        <link refid="_unique_void_ptr_8h_source"/>
        <childnode refid="7940" relation="include">
        </childnode>
        <childnode refid="7937" relation="include">
        </childnode>
      </node>
      <node id="7968">
        <label>vector</label>
      </node>
      <node id="8012">
        <label>ATen/TensorMethods.h</label>
      </node>
      <node id="8009">
        <label>THNN/Reduction.h</label>
      </node>
      <node id="7966">
        <label>new</label>
      </node>
      <node id="7944">
        <label>utility</label>
      </node>
      <node id="7935">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/TensorFactories.cpp</label>
        <link refid="_tensor_factories_8cpp"/>
        <childnode refid="7936" relation="include">
        </childnode>
        <childnode refid="8017" relation="include">
        </childnode>
        <childnode refid="8018" relation="include">
        </childnode>
        <childnode refid="8013" relation="include">
        </childnode>
        <childnode refid="7942" relation="include">
        </childnode>
        <childnode refid="8006" relation="include">
        </childnode>
        <childnode refid="7958" relation="include">
        </childnode>
        <childnode refid="8005" relation="include">
        </childnode>
        <childnode refid="8008" relation="include">
        </childnode>
        <childnode refid="8019" relation="include">
        </childnode>
        <childnode refid="7962" relation="include">
        </childnode>
        <childnode refid="7972" relation="include">
        </childnode>
        <childnode refid="7951" relation="include">
        </childnode>
      </node>
      <node id="7967">
        <label>array</label>
      </node>
      <node id="7954">
        <label>sstream</label>
      </node>
      <node id="8004">
        <label>ATen/Functions.h</label>
        <link refid="build_2aten_2src_2_a_ten_2_functions_8h_source"/>
        <childnode refid="7977" relation="include">
        </childnode>
        <childnode refid="7986" relation="include">
        </childnode>
        <childnode refid="7998" relation="include">
        </childnode>
        <childnode refid="7996" relation="include">
        </childnode>
        <childnode refid="7987" relation="include">
        </childnode>
        <childnode refid="8005" relation="include">
        </childnode>
        <childnode refid="8006" relation="include">
        </childnode>
        <childnode refid="8007" relation="include">
        </childnode>
        <childnode refid="8008" relation="include">
        </childnode>
        <childnode refid="8009" relation="include">
        </childnode>
      </node>
      <node id="8006">
        <label>ATen/NativeFunctions.h</label>
      </node>
      <node id="7973">
        <label>iosfwd</label>
      </node>
      <node id="7963">
        <label>cstdlib</label>
      </node>
      <node id="7975">
        <label>iostream</label>
      </node>
      <node id="7951">
        <label>cstddef</label>
      </node>
      <node id="7993">
        <label>unordered_map</label>
      </node>
      <node id="7992">
        <label>mutex</label>
      </node>
      <node id="7936">
        <label>ATen/ATen.h</label>
        <link refid="_a_ten_8h_source"/>
        <childnode refid="7937" relation="include">
        </childnode>
        <childnode refid="7938" relation="include">
        </childnode>
        <childnode refid="7939" relation="include">
        </childnode>
        <childnode refid="7977" relation="include">
        </childnode>
        <childnode refid="7986" relation="include">
        </childnode>
        <childnode refid="7987" relation="include">
        </childnode>
        <childnode refid="7988" relation="include">
        </childnode>
        <childnode refid="7996" relation="include">
        </childnode>
        <childnode refid="7998" relation="include">
        </childnode>
        <childnode refid="7957" relation="include">
        </childnode>
        <childnode refid="8002" relation="include">
        </childnode>
        <childnode refid="8004" relation="include">
        </childnode>
        <childnode refid="8010" relation="include">
        </childnode>
        <childnode refid="8011" relation="include">
        </childnode>
        <childnode refid="8012" relation="include">
        </childnode>
        <childnode refid="8013" relation="include">
        </childnode>
        <childnode refid="8014" relation="include">
        </childnode>
        <childnode refid="8007" relation="include">
        </childnode>
        <childnode refid="8008" relation="include">
        </childnode>
        <childnode refid="8001" relation="include">
        </childnode>
        <childnode refid="8015" relation="include">
        </childnode>
        <childnode refid="8016" relation="include">
        </childnode>
      </node>
      <node id="7990">
        <label>ATen/Registry.h</label>
        <link refid="_registry_8h_source"/>
        <childnode refid="7962" relation="include">
        </childnode>
        <childnode refid="7991" relation="include">
        </childnode>
        <childnode refid="7963" relation="include">
        </childnode>
        <childnode refid="7948" relation="include">
        </childnode>
        <childnode refid="7940" relation="include">
        </childnode>
        <childnode refid="7992" relation="include">
        </childnode>
        <childnode refid="7993" relation="include">
        </childnode>
        <childnode refid="7949" relation="include">
        </childnode>
        <childnode refid="7968" relation="include">
        </childnode>
        <childnode refid="7994" relation="include">
        </childnode>
        <childnode refid="7937" relation="include">
        </childnode>
      </node>
      <node id="7942">
        <label>ATen/Error.h</label>
        <link refid="_error_8h_source"/>
        <childnode refid="7937" relation="include">
        </childnode>
        <childnode refid="7943" relation="include">
        </childnode>
        <childnode refid="7951" relation="include">
        </childnode>
        <childnode refid="7952" relation="include">
        </childnode>
        <childnode refid="7953" relation="include">
        </childnode>
        <childnode refid="7954" relation="include">
        </childnode>
        <childnode refid="7949" relation="include">
        </childnode>
      </node>
      <node id="8008">
        <label>ATen/TensorOptions.h</label>
        <link refid="_tensor_options_8h_source"/>
        <childnode refid="7988" relation="include">
        </childnode>
        <childnode refid="7957" relation="include">
        </childnode>
        <childnode refid="8007" relation="include">
        </childnode>
        <childnode refid="8001" relation="include">
        </childnode>
        <childnode refid="7958" relation="include">
        </childnode>
        <childnode refid="7998" relation="include">
        </childnode>
        <childnode refid="7986" relation="include">
        </childnode>
        <childnode refid="7951" relation="include">
        </childnode>
        <childnode refid="7973" relation="include">
        </childnode>
        <childnode refid="7944" relation="include">
        </childnode>
      </node>
      <node id="7998">
        <label>ATen/Tensor.h</label>
        <link refid="build_2aten_2src_2_a_ten_2tensor_8h_source"/>
        <childnode refid="7987" relation="include">
        </childnode>
        <childnode refid="7977" relation="include">
        </childnode>
        <childnode refid="7958" relation="include">
        </childnode>
        <childnode refid="7999" relation="include">
        </childnode>
        <childnode refid="7996" relation="include">
        </childnode>
        <childnode refid="8000" relation="include">
        </childnode>
        <childnode refid="7980" relation="include">
        </childnode>
        <childnode refid="7981" relation="include">
        </childnode>
        <childnode refid="7983" relation="include">
        </childnode>
        <childnode refid="7957" relation="include">
        </childnode>
        <childnode refid="8001" relation="include">
        </childnode>
        <childnode refid="7943" relation="include">
        </childnode>
      </node>
      <node id="7945">
        <label>type_traits</label>
      </node>
      <node id="8001">
        <label>ATen/Layout.h</label>
        <link refid="_layout_8h_source"/>
        <childnode refid="7958" relation="include">
        </childnode>
        <childnode refid="7942" relation="include">
        </childnode>
        <childnode refid="7975" relation="include">
        </childnode>
      </node>
      <node id="7960">
        <label>ATen/SmallVector.h</label>
        <link refid="_small_vector_8h_source"/>
        <childnode refid="7961" relation="include">
        </childnode>
        <childnode refid="7962" relation="include">
        </childnode>
        <childnode refid="7947" relation="include">
        </childnode>
        <childnode refid="7951" relation="include">
        </childnode>
        <childnode refid="7963" relation="include">
        </childnode>
        <childnode refid="7964" relation="include">
        </childnode>
        <childnode refid="7946" relation="include">
        </childnode>
        <childnode refid="7965" relation="include">
        </childnode>
        <childnode refid="7940" relation="include">
        </childnode>
        <childnode refid="7966" relation="include">
        </childnode>
        <childnode refid="7945" relation="include">
        </childnode>
        <childnode refid="7944" relation="include">
        </childnode>
        <childnode refid="7937" relation="include">
        </childnode>
      </node>
      <node id="7962">
        <label>algorithm</label>
      </node>
      <node id="7987">
        <label>ATen/Generator.h</label>
        <link refid="_generator_8h_source"/>
        <childnode refid="7979" relation="include">
        </childnode>
      </node>
      <node id="7964">
        <label>cstring</label>
      </node>
      <node id="7940">
        <label>memory</label>
      </node>
      <node id="7946">
        <label>initializer_list</label>
      </node>
      <node id="8017">
        <label>ATen/CPUGenerator.h</label>
      </node>
      <node id="8010">
        <label>ATen/Formatting.h</label>
        <link refid="_formatting_8h_source"/>
        <childnode refid="7975" relation="include">
        </childnode>
        <childnode refid="7986" relation="include">
        </childnode>
        <childnode refid="7977" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceat">at</innernamespace>
    <innernamespace refid="namespaceat_1_1native">at::native</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="_tensor_factories_8cpp_1adbaf55b9b86c748b5f9eaa82883c656a" prot="public" static="no">
        <name>DEFINE_CAST_OP</name>
        <param><defname>_1</defname></param>
        <param><defname>n</defname></param>
        <param><defname>_2</defname></param>
        <initializer>Tensor _cast_##n(const Tensor&amp; self, bool non_blocking) {      \
    auto&amp; target_type = self.type().toScalarType(ScalarType::n); \
    if (self.type() == target_type)                              \
      return self;                                               \
    return target_type.copy(self, non_blocking);                 \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/TensorFactories.cpp" line="101" column="9" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/TensorFactories.cpp" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_tensor_factories_8cpp_1ad19a64df90444352b2908493c0475385" prot="public" static="no">
        <name>TENSOR</name>
        <param><defname>T</defname></param>
        <param><defname>_1</defname></param>
        <param><defname>_2</defname></param>
        <initializer>Tensor tensor(ArrayRef&lt;T&gt; values, const TensorOptions&amp; options) { \
    if (options.device().is_cuda()) {                               \
      return tensor_cuda(values, options);                          \
    } else {                                                        \
      return tensor_cpu(values, options);                           \
    }                                                               \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/TensorFactories.cpp" line="625" column="9" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/TensorFactories.cpp" bodystart="625" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>define<sp/>constants<sp/>like<sp/>M_PI<sp/>and<sp/>C<sp/>keywords<sp/>for<sp/>MSVC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_USE_MATH_DEFINES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ATen/ATen.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ATen/CPUGenerator.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ATen/CheckGenerator.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ATen/Dispatch.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ATen/Error.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ATen/NativeFunctions.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ATen/ScalarType.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ATen/Deprecated.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ATen/TensorOptions.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;TH/THRandom.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstddef&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceat" kindref="compound">at</ref><sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">native<sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>window_function_checks(</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>function_name,</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TensorOptions&amp;<sp/>options,</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>window_length)<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>AT_CHECK(</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>options.layout()<sp/>!=<sp/>kSparse,</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>function_name,</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>not<sp/>implemented<sp/>for<sp/>sparse<sp/>types,<sp/>got:<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>options.type().toString());</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>AT_CHECK(</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>at::isFloatingType(options.dtype()),</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>function_name,</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>expects<sp/>floating<sp/>point<sp/>dtypes,<sp/>got:<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>options.type().toString());</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>AT_CHECK(</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>window_length<sp/>&gt;=<sp/>0,</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>function_name,</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>requires<sp/>non-negative<sp/>window_length,<sp/>got<sp/>window_length=&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>window_length);</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">//<sp/>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<sp/>arange<sp/>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal">Tensor<sp/>arange(Scalar<sp/>start,<sp/>Scalar<sp/>end,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TensorOptions&amp;<sp/>options)<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>native::arange(start,<sp/>end,<sp/></highlight><highlight class="comment">/*step=*/</highlight><highlight class="normal">1,<sp/>options);</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal">Tensor<sp/>arange(</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>Scalar<sp/>start,</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>Scalar<sp/>end,</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>Scalar<sp/>step,</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TensorOptions&amp;<sp/>options)<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>options.type()._arange(start,<sp/>end,<sp/>step);</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal">Tensor&amp;<sp/>arange_out(Tensor&amp;<sp/>result,<sp/>Scalar<sp/>start,<sp/>Scalar<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>native::arange_out(result,<sp/>start,<sp/>end,<sp/></highlight><highlight class="comment">/*step=*/</highlight><highlight class="normal">1);</highlight></codeline>
<codeline lineno="63"><highlight class="normal">}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal">Tensor&amp;<sp/>arange_out(Tensor&amp;<sp/>result,<sp/>Scalar<sp/>start,<sp/>Scalar<sp/>end,<sp/>Scalar<sp/>step)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>at::_arange_out(result,<sp/>start,<sp/>end,<sp/>step);</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal">Tensor<sp/>arange(Scalar<sp/>end,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TensorOptions&amp;<sp/>options)<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>options.type()._arange(end);</highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal">Tensor&amp;<sp/>arange_out(Tensor&amp;<sp/>result,<sp/>Scalar<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>at::_arange_out(result,<sp/>end);</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal">Tensor<sp/>_dim_arange(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/>like,<sp/>int64_t<sp/>dim)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>like.type().toScalarType(at::kLong)._arange(like.size(dim));</highlight></codeline>
<codeline lineno="79"><highlight class="normal">}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">//<sp/>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<sp/>empty<sp/>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal">Tensor<sp/>empty(IntList<sp/>size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TensorOptions&amp;<sp/>options)<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>options.type().tensor(size);</highlight></codeline>
<codeline lineno="85"><highlight class="normal">}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal">Tensor&amp;<sp/>empty_out(Tensor&amp;<sp/>result,<sp/>IntList<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result.is_sparse())<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>result.sparse_raw_resize_(size,<sp/>size.size(),<sp/>0);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>result.resize_(size);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="94"><highlight class="normal">}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Temporary<sp/>type<sp/>cast<sp/>operators.<sp/>These<sp/>are<sp/>needed<sp/>to<sp/>trace<sp/>type-casts<sp/>now<sp/>since</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Type&apos;s<sp/>are<sp/>not<sp/>supported<sp/>in<sp/>the<sp/>IR.<sp/>Instead,<sp/>we<sp/>call<sp/>down<sp/>to<sp/>these</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specialized<sp/>operators<sp/>for<sp/>each<sp/>datatype.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO:<sp/>remove<sp/>when<sp/>we<sp/>have<sp/>Type<sp/>support<sp/>in<sp/>the<sp/>IR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEFINE_CAST_OP(_1,<sp/>n,<sp/>_2)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="102"><highlight class="preprocessor"><sp/><sp/>Tensor<sp/>_cast_##n(const<sp/>Tensor&amp;<sp/>self,<sp/>bool<sp/>non_blocking)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="103"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>auto&amp;<sp/>target_type<sp/>=<sp/>self.type().toScalarType(ScalarType::n);<sp/>\</highlight></codeline>
<codeline lineno="104"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(self.type()<sp/>==<sp/>target_type)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="105"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>self;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="106"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>target_type.copy(self,<sp/>non_blocking);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="107"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal">AT_FORALL_SCALAR_TYPES(DEFINE_CAST_OP)</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>DEFINE_CAST_OP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal">Tensor<sp/>empty_like(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>native::empty_like(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.options());</highlight></codeline>
<codeline lineno="115"><highlight class="normal">}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal">Tensor<sp/>empty_like(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TensorOptions&amp;<sp/>options)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(options.layout()<sp/>==<sp/>kSparse<sp/>&amp;&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.type().is_sparse())<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>res<sp/>=<sp/>options.type().tensor({});</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>resize_as_<sp/>requires<sp/>the<sp/>same<sp/>exact<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>res.sparse_raw_resize_(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.sizes(),<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">._sparseDims(),<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">._denseDims());</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>native::empty(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.sizes(),<sp/>options);</highlight></codeline>
<codeline lineno="126"><highlight class="normal">}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="comment">//<sp/>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<sp/>eye<sp/>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal">Tensor<sp/>eye(int64_t<sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TensorOptions&amp;<sp/>options)<sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>native::eye(n,<sp/>-1,<sp/>options);</highlight></codeline>
<codeline lineno="132"><highlight class="normal">}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal">Tensor<sp/>eye(int64_t<sp/>n,<sp/>int64_t<sp/>m,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TensorOptions&amp;<sp/>options)<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tensor<sp/>=<sp/>options.type().tensor({});</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>at::eye_out(tensor,<sp/>n,<sp/>m);</highlight></codeline>
<codeline lineno="137"><highlight class="normal">}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal">Tensor&amp;<sp/>eye_out_cpu(Tensor&amp;<sp/>result,<sp/>int64_t<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>native::eye_out_cpu(result,<sp/>n,<sp/>-1);</highlight></codeline>
<codeline lineno="141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal">Tensor&amp;<sp/>eye_out_cpu(Tensor&amp;<sp/>result,<sp/>int64_t<sp/>n,<sp/>int64_t<sp/>m)<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>USE_TH_SIZE_ZERO_DIM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>AT_CHECK(n<sp/>&gt;<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;n<sp/>must<sp/>be<sp/>greater<sp/>than<sp/>0,<sp/>got<sp/>&quot;</highlight><highlight class="normal">,<sp/>n);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>AT_CHECK(n<sp/>&gt;=<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;n<sp/>must<sp/>be<sp/>greater<sp/>or<sp/>equal<sp/>to<sp/>0,<sp/>got<sp/>&quot;</highlight><highlight class="normal">,<sp/>n);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>USE_TH_SIZE_ZERO_DIM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(m<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>m<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>result.resize_({n,<sp/>m});</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>result.zero_();</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>int64_t<sp/>sz<sp/>=<sp/>std::min&lt;int64_t&gt;(n,<sp/>m);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>AT_DISPATCH_ALL_TYPES(result.type(),<sp/></highlight><highlight class="stringliteral">&quot;eye&quot;</highlight><highlight class="normal">,<sp/>[&amp;]()<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>scalar_t*<sp/>result_data<sp/>=<sp/>result.data&lt;scalar_t&gt;();</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(int64_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>sz;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result_data[i*(result.strides()[0]<sp/>+<sp/>result.strides()[1])]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="170"><highlight class="normal">}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="comment">//<sp/>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<sp/>full<sp/>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal">Tensor<sp/>full(IntList<sp/>size,<sp/>Scalar<sp/>fill_value,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TensorOptions&amp;<sp/>options)<sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(options.layout()<sp/>==<sp/>kSparse)<sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>AT_ERROR(</highlight><highlight class="stringliteral">&quot;full(...)<sp/>is<sp/>not<sp/>implemented<sp/>for<sp/>sparse<sp/>layout&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>options.type().tensor(size);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result.fill_(fill_value);</highlight></codeline>
<codeline lineno="180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal">Tensor&amp;<sp/>full_out(Tensor&amp;<sp/>result,<sp/>IntList<sp/>size,<sp/>Scalar<sp/>fill_value)<sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result.is_sparse())<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>AT_ERROR(</highlight><highlight class="stringliteral">&quot;full(...)<sp/>is<sp/>not<sp/>implemented<sp/>for<sp/>sparse<sp/>layout&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>result.resize_(size);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result.fill_(fill_value);</highlight></codeline>
<codeline lineno="188"><highlight class="normal">}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal">Tensor<sp/>full_like(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>Scalar<sp/>fill_value)<sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>native::full_like(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>fill_value,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.options());</highlight></codeline>
<codeline lineno="192"><highlight class="normal">}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal">Tensor<sp/>full_like(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>Scalar<sp/>fill_value,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TensorOptions&amp;<sp/>options)<sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>native::full(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.sizes(),<sp/>fill_value,<sp/>options);</highlight></codeline>
<codeline lineno="196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="comment">//<sp/>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<sp/>linspace<sp/>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal">Tensor<sp/>linspace(Scalar<sp/>start,<sp/>Scalar<sp/>end,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TensorOptions&amp;<sp/>options)<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>native::linspace(start,<sp/>end,<sp/></highlight><highlight class="comment">/*steps=*/</highlight><highlight class="normal">100,<sp/>options);</highlight></codeline>
<codeline lineno="202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal">Tensor<sp/>linspace(</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>Scalar<sp/>start,</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>Scalar<sp/>end,</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>steps,</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TensorOptions&amp;<sp/>options)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>options.type()._linspace(start,<sp/>end,<sp/>steps);</highlight></codeline>
<codeline lineno="210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal">Tensor&amp;<sp/>linspace_out(Tensor&amp;<sp/>result,<sp/>Scalar<sp/>start,<sp/>Scalar<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>native::linspace_out(result,<sp/>start,<sp/>end,<sp/></highlight><highlight class="comment">/*steps=*/</highlight><highlight class="normal">100);</highlight></codeline>
<codeline lineno="214"><highlight class="normal">}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal">Tensor&amp;<sp/>linspace_out(Tensor&amp;<sp/>result,<sp/>Scalar<sp/>start,<sp/>Scalar<sp/>end,<sp/>int64_t<sp/>steps)<sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>at::_linspace_out(result,<sp/>start,<sp/>end,<sp/>steps);</highlight></codeline>
<codeline lineno="218"><highlight class="normal">}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="comment">//<sp/>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<sp/>logspace<sp/>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal">Tensor<sp/>logspace(Scalar<sp/>start,<sp/>Scalar<sp/>end,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TensorOptions&amp;<sp/>options)<sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>native::logspace(start,<sp/>end,<sp/></highlight><highlight class="comment">/*steps=*/</highlight><highlight class="normal">100,<sp/>options);</highlight></codeline>
<codeline lineno="224"><highlight class="normal">}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal">Tensor<sp/>logspace(</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>Scalar<sp/>start,</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>Scalar<sp/>end,</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>steps,</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TensorOptions&amp;<sp/>options)<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>options.type()._logspace(start,<sp/>end,<sp/>steps);</highlight></codeline>
<codeline lineno="232"><highlight class="normal">}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal">Tensor&amp;<sp/>logspace_out(Tensor&amp;<sp/>result,<sp/>Scalar<sp/>start,<sp/>Scalar<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>native::logspace_out(result,<sp/>start,<sp/>end,<sp/></highlight><highlight class="comment">/*steps=*/</highlight><highlight class="normal">100);</highlight></codeline>
<codeline lineno="236"><highlight class="normal">}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal">Tensor&amp;<sp/>logspace_out(Tensor&amp;<sp/>result,<sp/>Scalar<sp/>start,<sp/>Scalar<sp/>end,<sp/>int64_t<sp/>steps)<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>at::_logspace_out(result,<sp/>start,<sp/>end,<sp/>steps);</highlight></codeline>
<codeline lineno="240"><highlight class="normal">}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="comment">//<sp/>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<sp/>ones<sp/>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal">Tensor<sp/>ones(IntList<sp/>size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TensorOptions&amp;<sp/>options)<sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>native::full(size,<sp/></highlight><highlight class="comment">/*fill_value=*/</highlight><highlight class="normal">1,<sp/>options);</highlight></codeline>
<codeline lineno="246"><highlight class="normal">}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal">Tensor&amp;<sp/>ones_out(Tensor&amp;<sp/>result,<sp/>IntList<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>native::full_out(result,<sp/>size,<sp/></highlight><highlight class="comment">/*fill_value=*/</highlight><highlight class="normal">1);</highlight></codeline>
<codeline lineno="250"><highlight class="normal">}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal">Tensor<sp/>ones_like(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>native::ones(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.sizes(),<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.options());</highlight></codeline>
<codeline lineno="254"><highlight class="normal">}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal">Tensor<sp/>ones_like(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TensorOptions&amp;<sp/>options)<sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>native::ones(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.sizes(),<sp/>options);</highlight></codeline>
<codeline lineno="258"><highlight class="normal">}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="comment">//<sp/>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<sp/>rand<sp/>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal">Tensor<sp/>rand(IntList<sp/>size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TensorOptions&amp;<sp/>options)<sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>native::rand(size,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>options);</highlight></codeline>
<codeline lineno="264"><highlight class="normal">}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal">Tensor<sp/>rand(IntList<sp/>size,<sp/>Generator*<sp/>generator,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TensorOptions&amp;<sp/>options)<sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>options.type().tensor(size);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result.uniform_(0,<sp/>1,<sp/>generator);</highlight></codeline>
<codeline lineno="269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal">Tensor&amp;<sp/>rand_out(Tensor&amp;<sp/>result,<sp/>IntList<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>native::rand_out(result,<sp/>size,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="273"><highlight class="normal">}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal">Tensor&amp;<sp/>rand_out(Tensor&amp;<sp/>result,<sp/>IntList<sp/>size,<sp/>Generator*<sp/>generator)<sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>result.resize_(size);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result.uniform_(0,<sp/>1,<sp/>generator);</highlight></codeline>
<codeline lineno="278"><highlight class="normal">}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal">Tensor<sp/>rand_like(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>native::rand_like(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.options());</highlight></codeline>
<codeline lineno="282"><highlight class="normal">}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal">Tensor<sp/>rand_like(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TensorOptions&amp;<sp/>options)<sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>native::rand(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.sizes(),<sp/>options);</highlight></codeline>
<codeline lineno="286"><highlight class="normal">}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="comment">//<sp/>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<sp/>randint<sp/>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal">Tensor<sp/>randint(int64_t<sp/>high,<sp/>IntList<sp/>size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TensorOptions&amp;<sp/>options)<sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>native::randint(high,<sp/>size,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>options);</highlight></codeline>
<codeline lineno="292"><highlight class="normal">}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal">Tensor<sp/>randint(</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>high,</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>IntList<sp/>size,</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>Generator*<sp/>generator,</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TensorOptions&amp;<sp/>options)<sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>native::randint(0,<sp/>high,<sp/>size,<sp/>generator,<sp/>options);</highlight></codeline>
<codeline lineno="300"><highlight class="normal">}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal">Tensor<sp/>randint(</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>low,</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>high,</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>IntList<sp/>size,</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TensorOptions&amp;<sp/>options)<sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>native::randint(low,<sp/>high,<sp/>size,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>options);</highlight></codeline>
<codeline lineno="308"><highlight class="normal">}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal">Tensor<sp/>randint(</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>low,</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>high,</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>IntList<sp/>size,</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>Generator*<sp/>generator,</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TensorOptions&amp;<sp/>options)<sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>options.type().tensor(size);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result.random_(low,<sp/>high,<sp/>generator);</highlight></codeline>
<codeline lineno="318"><highlight class="normal">}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal">Tensor&amp;<sp/>randint_out(Tensor&amp;<sp/>result,<sp/>int64_t<sp/>high,<sp/>IntList<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>native::randint_out(result,<sp/>high,<sp/>size,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="322"><highlight class="normal">}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal">Tensor&amp;<sp/>randint_out(</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>Tensor&amp;<sp/>result,</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>high,</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>IntList<sp/>size,</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>Generator*<sp/>generator)<sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/>result.resize_(size);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result.random_(0,<sp/>high,<sp/>generator);</highlight></codeline>
<codeline lineno="331"><highlight class="normal">}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal">Tensor&amp;<sp/>randint_out(Tensor&amp;<sp/>result,<sp/>int64_t<sp/>low,<sp/>int64_t<sp/>high,<sp/>IntList<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>native::randint_out(result,<sp/>low,<sp/>high,<sp/>size,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="335"><highlight class="normal">}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal">Tensor&amp;<sp/>randint_out(</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>Tensor&amp;<sp/>result,</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>low,</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>high,</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>IntList<sp/>size,</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>Generator*<sp/>generator)<sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/>result.resize_(size);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result.random_(low,<sp/>high,<sp/>generator);</highlight></codeline>
<codeline lineno="345"><highlight class="normal">}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal">Tensor<sp/>randint_like(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>int64_t<sp/>high)<sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>native::randint_like(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>high,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.options());</highlight></codeline>
<codeline lineno="349"><highlight class="normal">}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal">Tensor<sp/>randint_like(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>int64_t<sp/>low,<sp/>int64_t<sp/>high)<sp/>{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>native::randint_like(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>low,<sp/>high,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.options());</highlight></codeline>
<codeline lineno="353"><highlight class="normal">}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal">Tensor<sp/>randint_like(</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>high,</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TensorOptions&amp;<sp/>options)<sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>native::randint(high,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.sizes(),<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>options);</highlight></codeline>
<codeline lineno="360"><highlight class="normal">}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal">Tensor<sp/>randint_like(</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>low,</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>high,</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TensorOptions&amp;<sp/>options)<sp/>{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>native::randint(low,<sp/>high,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.sizes(),<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>options);</highlight></codeline>
<codeline lineno="368"><highlight class="normal">}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="comment">//<sp/>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<sp/>randn<sp/>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal">Tensor<sp/>randn(IntList<sp/>size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TensorOptions&amp;<sp/>options)<sp/>{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>native::randn(size,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>options);</highlight></codeline>
<codeline lineno="374"><highlight class="normal">}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal">Tensor<sp/>randn(IntList<sp/>size,<sp/>Generator*<sp/>generator,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TensorOptions&amp;<sp/>options)<sp/>{</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>options.type().tensor(size);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result.normal_(0,<sp/>1,<sp/>generator);</highlight></codeline>
<codeline lineno="379"><highlight class="normal">}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal">Tensor&amp;<sp/>randn_out(Tensor&amp;<sp/>result,<sp/>IntList<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>native::randn_out(result,<sp/>size,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="383"><highlight class="normal">}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal">Tensor&amp;<sp/>randn_out(Tensor&amp;<sp/>result,<sp/>IntList<sp/>size,<sp/>Generator*<sp/>generator)<sp/>{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/>result.resize_(size);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result.normal_(0,<sp/>1,<sp/>generator);</highlight></codeline>
<codeline lineno="388"><highlight class="normal">}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal">Tensor<sp/>randn_like(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>native::randn_like(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.options());</highlight></codeline>
<codeline lineno="392"><highlight class="normal">}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal">Tensor<sp/>randn_like(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TensorOptions&amp;<sp/>options)<sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>native::randn(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.sizes(),<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>options);</highlight></codeline>
<codeline lineno="396"><highlight class="normal">}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="comment">//<sp/>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<sp/>randperm<sp/>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>scalar_t&gt;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>randperm_cpu(Tensor&amp;<sp/>result,<sp/>int64_t<sp/>n,<sp/>THGenerator*<sp/>generator)<sp/>{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/>scalar_t<sp/>*r__data<sp/>=<sp/>result.data&lt;scalar_t&gt;();</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/>result.resize_({n});</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>int64_t<sp/>r__stride_0<sp/>=<sp/>result.stride(0);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(int64_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>r__data[i*r__stride_0]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">scalar_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(i);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(int64_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n<sp/>-<sp/>1;<sp/>i++)</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>z<sp/>=<sp/>THRandom_random(generator)<sp/>%<sp/>(n-i);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>scalar_t<sp/>sav<sp/>=<sp/>r__data[i*r__stride_0];</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>r__data[i*r__stride_0]<sp/>=<sp/>r__data[(z+i)*r__stride_0];</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>r__data[(z+i)*r__stride_0]<sp/>=<sp/>sav;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="419"><highlight class="normal">}</highlight></codeline>
<codeline lineno="420"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal">THGenerator*<sp/>get_generator(<ref refid="structat_1_1_generator" kindref="compound">at::Generator</ref>*<sp/><ref refid="namespacegen" kindref="compound">gen</ref>)<sp/>{</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>default_gen<sp/>=<sp/>&amp;at::globalContext().defaultGenerator(at::Backend::CPU);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>gen_<sp/>=<sp/>at::check_generator&lt;at::CPUGenerator&gt;(<ref refid="namespacegen" kindref="compound">gen</ref>,<sp/>default_gen);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gen_-&gt;generator;</highlight></codeline>
<codeline lineno="427"><highlight class="normal">}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal">Tensor<sp/>randperm(int64_t<sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TensorOptions&amp;<sp/>options)<sp/>{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>native::randperm(n,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>options);</highlight></codeline>
<codeline lineno="431"><highlight class="normal">}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal">Tensor<sp/>randperm(int64_t<sp/>n,<sp/>Generator*<sp/>generator,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TensorOptions&amp;<sp/>options)<sp/>{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tensor<sp/>=<sp/>options.type().tensor(n);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>at::randperm_out(tensor,<sp/>n,<sp/>generator);</highlight></codeline>
<codeline lineno="436"><highlight class="normal">}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal">Tensor&amp;<sp/>randperm_out(Tensor&amp;<sp/>result,<sp/>int64_t<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>at::randperm_out(result,<sp/>n,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="440"><highlight class="normal">}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal">Tensor&amp;<sp/>randperm_out_cpu(Tensor&amp;<sp/>result,<sp/>int64_t<sp/>n,<sp/>Generator*<sp/>generator)<sp/>{</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/>AT_CHECK(n<sp/>&gt;=<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;n<sp/>must<sp/>be<sp/>non-negative,<sp/>got&quot;</highlight><highlight class="normal">,<sp/>n);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/>result.resize_({n});</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacegen" kindref="compound">gen</ref><sp/>=<sp/>get_generator(generator);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/>AT_DISPATCH_ALL_TYPES(result.type(),<sp/></highlight><highlight class="stringliteral">&quot;randperm&quot;</highlight><highlight class="normal">,<sp/>[&amp;]()<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>randperm_cpu&lt;scalar_t&gt;(result,<sp/>n,<sp/><ref refid="namespacegen" kindref="compound">gen</ref>);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="451"><highlight class="normal">}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="comment">//<sp/>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<sp/>range<sp/>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal">Tensor<sp/>range(Scalar<sp/>start,<sp/>Scalar<sp/>end,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TensorOptions&amp;<sp/>options)<sp/>{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>native::range(start,<sp/>end,<sp/></highlight><highlight class="comment">/*step=*/</highlight><highlight class="normal">1,<sp/>options);</highlight></codeline>
<codeline lineno="457"><highlight class="normal">}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal">Tensor<sp/>range(</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>Scalar<sp/>start,</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>Scalar<sp/>end,</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>Scalar<sp/>step,</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TensorOptions&amp;<sp/>options)<sp/>{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>options.type()._range(start,<sp/>end,<sp/>step);</highlight></codeline>
<codeline lineno="465"><highlight class="normal">}</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal">Tensor&amp;<sp/>range_out(Tensor&amp;<sp/>result,<sp/>Scalar<sp/>start,<sp/>Scalar<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>native::range_out(result,<sp/>start,<sp/>end,<sp/>1);</highlight></codeline>
<codeline lineno="469"><highlight class="normal">}</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal">Tensor&amp;<sp/>range_out(Tensor&amp;<sp/>result,<sp/>Scalar<sp/>start,<sp/>Scalar<sp/>end,<sp/>Scalar<sp/>step)<sp/>{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>at::_range_out(result,<sp/>start,<sp/>end,<sp/>step);</highlight></codeline>
<codeline lineno="473"><highlight class="normal">}</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight><highlight class="comment">//<sp/>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<sp/>zeros<sp/>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal">Tensor<sp/>zeros(IntList<sp/>size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TensorOptions&amp;<sp/>options)<sp/>{</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>options.type().tensor(size);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result.zero_();</highlight></codeline>
<codeline lineno="480"><highlight class="normal">}</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal">Tensor&amp;<sp/>zeros_out(Tensor&amp;<sp/>result,<sp/>IntList<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result.is_sparse())<sp/>{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>result.sparse_raw_resize_(size,<sp/>size.size(),<sp/>0);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>result.resize_(size);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result.zero_();</highlight></codeline>
<codeline lineno="489"><highlight class="normal">}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal">Tensor<sp/>zeros_like(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>native::zeros_like(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.options());</highlight></codeline>
<codeline lineno="493"><highlight class="normal">}</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal">Tensor<sp/>zeros_like(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TensorOptions&amp;<sp/>options)<sp/>{</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(options.layout()<sp/>==<sp/>kSparse<sp/>&amp;&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.type().is_sparse())<sp/>{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>res<sp/>=<sp/>options.type().tensor({});</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>resize_as_<sp/>requires<sp/>the<sp/>same<sp/>exact<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>res.sparse_raw_resize_(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.sizes(),<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">._sparseDims(),<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">._denseDims());</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>native::zeros(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.sizes(),<sp/>options);</highlight></codeline>
<codeline lineno="503"><highlight class="normal">}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight><highlight class="comment">//<sp/>~~~~~~~~~~~~~~~~~~~~~~~~~~~<sp/>bartlett_window<sp/>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal">Tensor<sp/>bartlett_window(int64_t<sp/>window_length,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TensorOptions&amp;<sp/>options)<sp/>{</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>native::bartlett_window(window_length,<sp/></highlight><highlight class="comment">/*periodic=*/</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>options);</highlight></codeline>
<codeline lineno="509"><highlight class="normal">}</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal">Tensor<sp/>bartlett_window(</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>window_length,</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>periodic,</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TensorOptions&amp;<sp/>options)<sp/>{</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/>window_function_checks(</highlight><highlight class="stringliteral">&quot;bartlett_window&quot;</highlight><highlight class="normal">,<sp/>options,<sp/>window_length);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(window_length<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>native::ones({1},<sp/>options);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(periodic)<sp/>{</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>window_length<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>window<sp/>=<sp/>native::arange(window_length,<sp/>options).mul_(2.<sp/>/<sp/>static_cast&lt;double&gt;(window_length<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int64_t<sp/>first_half_size<sp/>=<sp/>((window_length<sp/>-<sp/>1)<sp/>&gt;&gt;<sp/>1)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/>window.narrow(0,<sp/>first_half_size,<sp/>window_length<sp/>-<sp/>first_half_size).mul_(-1).add_(2);</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>periodic<sp/>?<sp/>window.narrow(0,<sp/>0,<sp/>window_length<sp/>-<sp/>1)<sp/>:<sp/>window;</highlight></codeline>
<codeline lineno="526"><highlight class="normal">}</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight><highlight class="comment">//<sp/>~~~~~~~~~~~~~~~~~~~~~~~~~~~<sp/>blackman_window<sp/>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal">Tensor<sp/>blackman_window(int64_t<sp/>window_length,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TensorOptions&amp;<sp/>options)<sp/>{</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>native::blackman_window(window_length,<sp/></highlight><highlight class="comment">/*periodic=*/</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>options);</highlight></codeline>
<codeline lineno="532"><highlight class="normal">}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal">Tensor<sp/>blackman_window(</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>window_length,</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>periodic,</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TensorOptions&amp;<sp/>options)<sp/>{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/>window_function_checks(</highlight><highlight class="stringliteral">&quot;blackman_window&quot;</highlight><highlight class="normal">,<sp/>options,<sp/>window_length);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(window_length<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>native::ones({1},<sp/>options);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(periodic)<sp/>{</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>window_length<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>from<sp/>https://en.wikipedia.org/wiki/Window_function#Blackman_window</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>window<sp/>=<sp/>native::arange(window_length,<sp/>options).mul_(M_PI<sp/>/<sp/>static_cast&lt;double&gt;(window_length<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/>window<sp/>=<sp/>window.mul(4).cos_().mul_(0.08)<sp/>-<sp/>window.mul(2).cos_().mul_(0.5)<sp/>+<sp/>0.42;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>periodic<sp/>?<sp/>window.narrow(0,<sp/>0,<sp/>window_length<sp/>-<sp/>1)<sp/>:<sp/>window;</highlight></codeline>
<codeline lineno="549"><highlight class="normal">}</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight><highlight class="comment">//<sp/>~~~~~~~~~~~~~~~~~~~~~~~~~~~~<sp/>hamming_window<sp/>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal">Tensor<sp/>hamming_window(int64_t<sp/>window_length,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TensorOptions&amp;<sp/>options)<sp/>{</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>native::hamming_window(window_length,<sp/></highlight><highlight class="comment">/*periodic=*/</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>options);</highlight></codeline>
<codeline lineno="555"><highlight class="normal">}</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal">Tensor<sp/>hamming_window(</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>window_length,</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>periodic,</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TensorOptions&amp;<sp/>options)<sp/>{</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>native::hamming_window(</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>window_length,<sp/>periodic,<sp/></highlight><highlight class="comment">/*alpha=*/</highlight><highlight class="normal">0.54,<sp/>options);</highlight></codeline>
<codeline lineno="563"><highlight class="normal">}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal">Tensor<sp/>hamming_window(</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>window_length,</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>periodic,</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>alpha,</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TensorOptions&amp;<sp/>options)<sp/>{</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>native::hamming_window(</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>window_length,<sp/>periodic,<sp/>alpha,<sp/></highlight><highlight class="comment">/*beta=*/</highlight><highlight class="normal">0.46,<sp/>options);</highlight></codeline>
<codeline lineno="572"><highlight class="normal">}</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal">Tensor<sp/>hamming_window(</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>window_length,</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>periodic,</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>alpha,</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>beta,</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TensorOptions&amp;<sp/>options)<sp/>{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/>window_function_checks(</highlight><highlight class="stringliteral">&quot;hamming_window&quot;</highlight><highlight class="normal">,<sp/>options,<sp/>window_length);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(window_length<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>native::ones({1},<sp/>options);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(periodic)<sp/>{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>window_length<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>window<sp/>=<sp/>native::arange(window_length,<sp/>options);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/>window.mul_(M_PI<sp/>*<sp/>2.<sp/>/<sp/>static_cast&lt;double&gt;(window_length<sp/>-<sp/>1)).cos_().mul_(-beta).add_(alpha);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>periodic<sp/>?<sp/>window.narrow(0,<sp/>0,<sp/>window_length<sp/>-<sp/>1)<sp/>:<sp/>window;</highlight></codeline>
<codeline lineno="590"><highlight class="normal">}</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight><highlight class="comment">//<sp/>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<sp/>hann_window<sp/>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal">Tensor<sp/>hann_window(int64_t<sp/>window_length,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TensorOptions&amp;<sp/>options)<sp/>{</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>native::hann_window(window_length,<sp/></highlight><highlight class="comment">/*periodic=*/</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>options);</highlight></codeline>
<codeline lineno="596"><highlight class="normal">}</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal">Tensor<sp/>hann_window(</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>window_length,</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>periodic,</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TensorOptions&amp;<sp/>options)<sp/>{</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/>window_function_checks(</highlight><highlight class="stringliteral">&quot;hann_window&quot;</highlight><highlight class="normal">,<sp/>options,<sp/>window_length);</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>native::hamming_window(</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>window_length,<sp/>periodic,<sp/></highlight><highlight class="comment">/*alpha=*/</highlight><highlight class="normal">0.5,<sp/></highlight><highlight class="comment">/*beta=*/</highlight><highlight class="normal">0.5,<sp/>options);</highlight></codeline>
<codeline lineno="605"><highlight class="normal">}</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight><highlight class="comment">//<sp/>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<sp/>tensor<sp/>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="610"><highlight class="normal">Tensor<sp/>tensor_cpu(ArrayRef&lt;T&gt;<sp/>values,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TensorOptions&amp;<sp/>options)<sp/>{</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>at::empty(values.size(),<sp/>options);</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/>AT_ASSERT(result.is_contiguous());</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/>AT_DISPATCH_ALL_TYPES(result.type(),<sp/></highlight><highlight class="stringliteral">&quot;tensor_cpu&quot;</highlight><highlight class="normal">,<sp/>[&amp;]<sp/>{</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/>std::copy(values.begin(),<sp/>values.end(),<sp/>result.template<sp/>data&lt;scalar_t&gt;());</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="617"><highlight class="normal">}</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="620"><highlight class="normal">Tensor<sp/>tensor_cuda(ArrayRef&lt;T&gt;<sp/>values,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TensorOptions&amp;<sp/>options)<sp/>{</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cpu_tensor<sp/>=<sp/>tensor_cpu(values,<sp/>TensorOptions(options).<ref refid="namespaceat_1a7b0b366b175733b3ff709ceed5058911" kindref="member">device</ref>(at::kCPU));</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cpu_tensor.to(options.device());</highlight></codeline>
<codeline lineno="623"><highlight class="normal">}</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TENSOR(T,<sp/>_1,<sp/>_2)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="626"><highlight class="preprocessor"><sp/><sp/>Tensor<sp/>tensor(ArrayRef&lt;T&gt;<sp/>values,<sp/>const<sp/>TensorOptions&amp;<sp/>options)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="627"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(options.device().is_cuda())<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="628"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>tensor_cuda(values,<sp/>options);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="629"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="630"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>tensor_cpu(values,<sp/>options);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="631"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="632"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal">AT_FORALL_SCALAR_TYPES_EXCEPT_HALF(TENSOR)</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>TENSOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>native</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>at</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/TensorFactories.cpp"/>
  </compounddef>
</doxygen>
