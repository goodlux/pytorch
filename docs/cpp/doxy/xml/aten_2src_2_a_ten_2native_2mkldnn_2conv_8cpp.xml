<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="aten_2src_2_a_ten_2native_2mkldnn_2conv_8cpp" kind="file" language="C++">
    <compoundname>Conv.cpp</compoundname>
    <includes refid="_a_ten_8h" local="no">ATen/ATen.h</includes>
    <includes local="no">ATen/NativeFunctions.h</includes>
    <includes refid="_config_8h" local="no">ATen/Config.h</includes>
    <incdepgraph>
      <node id="18272">
        <label>ATen/optional.h</label>
        <link refid="optional_8h_source"/>
        <childnode refid="18273" relation="include">
        </childnode>
        <childnode refid="18274" relation="include">
        </childnode>
        <childnode refid="18275" relation="include">
        </childnode>
        <childnode refid="18276" relation="include">
        </childnode>
        <childnode refid="18277" relation="include">
        </childnode>
        <childnode refid="18278" relation="include">
        </childnode>
        <childnode refid="18279" relation="include">
        </childnode>
      </node>
      <node id="18318">
        <label>ATen/detail/CUDAHooksInterface.h</label>
        <link refid="_c_u_d_a_hooks_interface_8h_source"/>
        <childnode refid="18268" relation="include">
        </childnode>
        <childnode refid="18271" relation="include">
        </childnode>
        <childnode refid="18316" relation="include">
        </childnode>
        <childnode refid="18319" relation="include">
        </childnode>
        <childnode refid="18280" relation="include">
        </childnode>
        <childnode refid="18277" relation="include">
        </childnode>
        <childnode refid="18269" relation="include">
        </childnode>
      </node>
      <node id="18286">
        <label>ATen/Device.h</label>
        <link refid="_device_8h_source"/>
        <childnode refid="18271" relation="include">
        </childnode>
        <childnode refid="18287" relation="include">
        </childnode>
        <childnode refid="18280" relation="include">
        </childnode>
        <childnode refid="18302" relation="include">
        </childnode>
        <childnode refid="18278" relation="include">
        </childnode>
        <childnode refid="18277" relation="include">
        </childnode>
      </node>
      <node id="18285">
        <label>atomic</label>
      </node>
      <node id="18277">
        <label>functional</label>
      </node>
      <node id="18323">
        <label>ATen/Backtrace.h</label>
        <link refid="_backtrace_8h_source"/>
        <childnode refid="18280" relation="include">
        </childnode>
        <childnode refid="18278" relation="include">
        </childnode>
        <childnode refid="18313" relation="include">
        </childnode>
        <childnode refid="18266" relation="include">
        </childnode>
      </node>
      <node id="18287">
        <label>ATen/ScalarType.h</label>
        <link refid="_scalar_type_8h_source"/>
        <childnode refid="18288" relation="include">
        </childnode>
        <childnode refid="18266" relation="include">
        </childnode>
        <childnode refid="18298" relation="include">
        </childnode>
        <childnode refid="18300" relation="include">
        </childnode>
        <childnode refid="18304" relation="include">
        </childnode>
      </node>
      <node id="18299">
        <label>limits</label>
      </node>
      <node id="18264">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/mkldnn/Conv.cpp</label>
        <link refid="aten_2src_2_a_ten_2native_2mkldnn_2conv_8cpp"/>
        <childnode refid="18265" relation="include">
        </childnode>
        <childnode refid="18335" relation="include">
        </childnode>
        <childnode refid="18346" relation="include">
        </childnode>
      </node>
      <node id="18307">
        <label>assert.h</label>
      </node>
      <node id="18312">
        <label>ATen/Utils.h</label>
        <link refid="aten_2src_2_a_ten_2utils_8h_source"/>
        <childnode refid="18266" relation="include">
        </childnode>
        <childnode refid="18288" relation="include">
        </childnode>
        <childnode refid="18271" relation="include">
        </childnode>
        <childnode refid="18311" relation="include">
        </childnode>
        <childnode refid="18291" relation="include">
        </childnode>
        <childnode refid="18283" relation="include">
        </childnode>
        <childnode refid="18313" relation="include">
        </childnode>
        <childnode refid="18314" relation="include">
        </childnode>
      </node>
      <node id="18294">
        <label>iterator</label>
      </node>
      <node id="18306">
        <label>ATen/Scalar.h</label>
        <link refid="_scalar_8h_source"/>
        <childnode refid="18307" relation="include">
        </childnode>
        <childnode refid="18308" relation="include">
        </childnode>
        <childnode refid="18279" relation="include">
        </childnode>
        <childnode refid="18278" relation="include">
        </childnode>
        <childnode refid="18273" relation="include">
        </childnode>
        <childnode refid="18266" relation="include">
        </childnode>
        <childnode refid="18298" relation="include">
        </childnode>
        <childnode refid="18287" relation="include">
        </childnode>
        <childnode refid="18309" relation="include">
        </childnode>
        <childnode refid="18312" relation="include">
        </childnode>
      </node>
      <node id="18326">
        <label>TH/THStorageFunctions.hpp</label>
      </node>
      <node id="18300">
        <label>cstdint</label>
      </node>
      <node id="18334">
        <label>ATen/Deprecated.h</label>
        <link refid="_deprecated_8h_source"/>
      </node>
      <node id="18308">
        <label>stdint.h</label>
      </node>
      <node id="18345">
        <label>ATen/CUDAGuard.h</label>
        <link refid="_c_u_d_a_guard_8h_source"/>
      </node>
      <node id="18301">
        <label>cmath</label>
      </node>
      <node id="18276">
        <label>cassert</label>
      </node>
      <node id="18317">
        <label>ATen/Context.h</label>
        <link refid="_context_8h_source"/>
        <childnode refid="18266" relation="include">
        </childnode>
        <childnode refid="18267" relation="include">
        </childnode>
        <childnode refid="18316" relation="include">
        </childnode>
        <childnode refid="18315" relation="include">
        </childnode>
        <childnode refid="18312" relation="include">
        </childnode>
        <childnode refid="18271" relation="include">
        </childnode>
        <childnode refid="18318" relation="include">
        </childnode>
        <childnode refid="18324" relation="include">
        </childnode>
        <childnode refid="18269" relation="include">
        </childnode>
        <childnode refid="18321" relation="include">
        </childnode>
        <childnode refid="18300" relation="include">
        </childnode>
      </node>
      <node id="18303">
        <label>Half-inl.h</label>
        <link refid="_half-inl_8h_source"/>
        <childnode refid="18266" relation="include">
        </childnode>
        <childnode refid="18293" relation="include">
        </childnode>
        <childnode refid="18299" relation="include">
        </childnode>
      </node>
      <node id="18279">
        <label>stdexcept</label>
      </node>
      <node id="18340">
        <label>ATen/TensorOperators.h</label>
        <link refid="_tensor_operators_8h_source"/>
        <childnode refid="18306" relation="include">
        </childnode>
        <childnode refid="18327" relation="include">
        </childnode>
        <childnode refid="18315" relation="include">
        </childnode>
        <childnode refid="18278" relation="include">
        </childnode>
        <childnode refid="18279" relation="include">
        </childnode>
      </node>
      <node id="18314">
        <label>numeric</label>
      </node>
      <node id="18310">
        <label>ATen/TensorImpl.h</label>
        <link refid="_tensor_impl_8h_source"/>
        <childnode refid="18285" relation="include">
        </childnode>
        <childnode refid="18269" relation="include">
        </childnode>
        <childnode refid="18284" relation="include">
        </childnode>
        <childnode refid="18287" relation="include">
        </childnode>
        <childnode refid="18272" relation="include">
        </childnode>
      </node>
      <node id="18298">
        <label>ATen/Half.h</label>
        <link refid="_half_8h_source"/>
        <childnode refid="18266" relation="include">
        </childnode>
        <childnode refid="18299" relation="include">
        </childnode>
        <childnode refid="18278" relation="include">
        </childnode>
        <childnode refid="18300" relation="include">
        </childnode>
        <childnode refid="18279" relation="include">
        </childnode>
        <childnode refid="18273" relation="include">
        </childnode>
        <childnode refid="18301" relation="include">
        </childnode>
        <childnode refid="18302" relation="include">
        </childnode>
        <childnode refid="18303" relation="include">
        </childnode>
      </node>
      <node id="18284">
        <label>ATen/Retainable.h</label>
        <link refid="_retainable_8h_source"/>
        <childnode refid="18285" relation="include">
        </childnode>
      </node>
      <node id="18309">
        <label>ATen/TensorBase.h</label>
        <link refid="_tensor_base_8h_source"/>
        <childnode refid="18310" relation="include">
        </childnode>
        <childnode refid="18311" relation="include">
        </childnode>
      </node>
      <node id="18278">
        <label>string</label>
      </node>
      <node id="18343">
        <label>ATen/DimVector.h</label>
        <link refid="_dim_vector_8h_source"/>
        <childnode refid="18289" relation="include">
        </childnode>
        <childnode refid="18308" relation="include">
        </childnode>
      </node>
      <node id="18344">
        <label>ATen/OptionsGuard.h</label>
        <link refid="_options_guard_8h_source"/>
        <childnode refid="18286" relation="include">
        </childnode>
        <childnode refid="18330" relation="include">
        </childnode>
        <childnode refid="18287" relation="include">
        </childnode>
        <childnode refid="18337" relation="include">
        </childnode>
        <childnode refid="18272" relation="include">
        </childnode>
      </node>
      <node id="18346">
        <label>ATen/Config.h</label>
        <link refid="_config_8h_source"/>
      </node>
      <node id="18268">
        <label>ATen/Allocator.h</label>
        <link refid="_allocator_8h_source"/>
        <childnode refid="18269" relation="include">
        </childnode>
        <childnode refid="18270" relation="include">
        </childnode>
        <childnode refid="18271" relation="include">
        </childnode>
        <childnode refid="18284" relation="include">
        </childnode>
        <childnode refid="18286" relation="include">
        </childnode>
        <childnode refid="18305" relation="include">
        </childnode>
      </node>
      <node id="18324">
        <label>ATen/CUDAStream.h</label>
        <link refid="_c_u_d_a_stream_8h_source"/>
      </node>
      <node id="18336">
        <label>ATen/DeviceGuard.h</label>
        <link refid="_device_guard_8h_source"/>
        <childnode refid="18286" relation="include">
        </childnode>
        <childnode refid="18271" relation="include">
        </childnode>
        <childnode refid="18287" relation="include">
        </childnode>
        <childnode refid="18327" relation="include">
        </childnode>
        <childnode refid="18318" relation="include">
        </childnode>
        <childnode refid="18280" relation="include">
        </childnode>
      </node>
      <node id="18281">
        <label>exception</label>
      </node>
      <node id="18270">
        <label>stddef.h</label>
      </node>
      <node id="18311">
        <label>ATen/UndefinedTensor.h</label>
        <link refid="_undefined_tensor_8h_source"/>
        <childnode refid="18310" relation="include">
        </childnode>
      </node>
      <node id="18342">
        <label>ATen/Dispatch.h</label>
        <link refid="_dispatch_8h_source"/>
        <childnode refid="18271" relation="include">
        </childnode>
        <childnode refid="18298" relation="include">
        </childnode>
        <childnode refid="18315" relation="include">
        </childnode>
      </node>
      <node id="18290">
        <label>AlignOf.h</label>
        <link refid="_align_of_8h_source"/>
        <childnode refid="18280" relation="include">
        </childnode>
      </node>
      <node id="18325">
        <label>ATen/Storage.h</label>
        <link refid="_storage_8h_source"/>
        <childnode refid="18306" relation="include">
        </childnode>
        <childnode refid="18326" relation="include">
        </childnode>
      </node>
      <node id="18282">
        <label>ostream</label>
      </node>
      <node id="18267">
        <label>ATen/CPUGeneral.h</label>
        <link refid="_c_p_u_general_8h_source"/>
        <childnode refid="18266" relation="include">
        </childnode>
      </node>
      <node id="18315">
        <label>ATen/Type.h</label>
      </node>
      <node id="18288">
        <label>ATen/ArrayRef.h</label>
        <link refid="_array_ref_8h_source"/>
        <childnode refid="18271" relation="include">
        </childnode>
        <childnode refid="18289" relation="include">
        </childnode>
        <childnode refid="18296" relation="include">
        </childnode>
        <childnode refid="18294" relation="include">
        </childnode>
        <childnode refid="18297" relation="include">
        </childnode>
      </node>
      <node id="18331">
        <label>ATen/TensorGeometry.h</label>
        <link refid="_tensor_geometry_8h_source"/>
        <childnode refid="18315" relation="include">
        </childnode>
        <childnode refid="18332" relation="include">
        </childnode>
      </node>
      <node id="18328">
        <label>ATen/SparseTensorRef.h</label>
        <link refid="_sparse_tensor_ref_8h_source"/>
      </node>
      <node id="18266">
        <label>ATen/ATenGeneral.h</label>
        <link refid="_a_ten_general_8h_source"/>
      </node>
      <node id="18332">
        <label>ATen/WrapDimUtils.h</label>
        <link refid="_wrap_dim_utils_8h_source"/>
        <childnode refid="18310" relation="include">
        </childnode>
        <childnode refid="18283" relation="include">
        </childnode>
      </node>
      <node id="18329">
        <label>ATen/TensorAccessor.h</label>
        <link refid="_tensor_accessor_8h_source"/>
        <childnode refid="18280" relation="include">
        </childnode>
        <childnode refid="18308" relation="include">
        </childnode>
        <childnode refid="18287" relation="include">
        </childnode>
      </node>
      <node id="18313">
        <label>typeinfo</label>
      </node>
      <node id="18320">
        <label>cstdio</label>
      </node>
      <node id="18305">
        <label>ATen/detail/UniqueVoidPtr.h</label>
        <link refid="_unique_void_ptr_8h_source"/>
        <childnode refid="18269" relation="include">
        </childnode>
        <childnode refid="18266" relation="include">
        </childnode>
      </node>
      <node id="18297">
        <label>vector</label>
      </node>
      <node id="18341">
        <label>ATen/TensorMethods.h</label>
      </node>
      <node id="18338">
        <label>THNN/Reduction.h</label>
      </node>
      <node id="18295">
        <label>new</label>
      </node>
      <node id="18273">
        <label>utility</label>
      </node>
      <node id="18296">
        <label>array</label>
      </node>
      <node id="18283">
        <label>sstream</label>
      </node>
      <node id="18333">
        <label>ATen/Functions.h</label>
        <link refid="build_2aten_2src_2_a_ten_2_functions_8h_source"/>
        <childnode refid="18306" relation="include">
        </childnode>
        <childnode refid="18315" relation="include">
        </childnode>
        <childnode refid="18327" relation="include">
        </childnode>
        <childnode refid="18325" relation="include">
        </childnode>
        <childnode refid="18316" relation="include">
        </childnode>
        <childnode refid="18334" relation="include">
        </childnode>
        <childnode refid="18335" relation="include">
        </childnode>
        <childnode refid="18336" relation="include">
        </childnode>
        <childnode refid="18337" relation="include">
        </childnode>
        <childnode refid="18338" relation="include">
        </childnode>
      </node>
      <node id="18335">
        <label>ATen/NativeFunctions.h</label>
      </node>
      <node id="18302">
        <label>iosfwd</label>
      </node>
      <node id="18292">
        <label>cstdlib</label>
      </node>
      <node id="18304">
        <label>iostream</label>
      </node>
      <node id="18280">
        <label>cstddef</label>
      </node>
      <node id="18322">
        <label>unordered_map</label>
      </node>
      <node id="18321">
        <label>mutex</label>
      </node>
      <node id="18265">
        <label>ATen/ATen.h</label>
        <link refid="_a_ten_8h_source"/>
        <childnode refid="18266" relation="include">
        </childnode>
        <childnode refid="18267" relation="include">
        </childnode>
        <childnode refid="18268" relation="include">
        </childnode>
        <childnode refid="18306" relation="include">
        </childnode>
        <childnode refid="18315" relation="include">
        </childnode>
        <childnode refid="18316" relation="include">
        </childnode>
        <childnode refid="18317" relation="include">
        </childnode>
        <childnode refid="18325" relation="include">
        </childnode>
        <childnode refid="18327" relation="include">
        </childnode>
        <childnode refid="18286" relation="include">
        </childnode>
        <childnode refid="18331" relation="include">
        </childnode>
        <childnode refid="18333" relation="include">
        </childnode>
        <childnode refid="18339" relation="include">
        </childnode>
        <childnode refid="18340" relation="include">
        </childnode>
        <childnode refid="18341" relation="include">
        </childnode>
        <childnode refid="18342" relation="include">
        </childnode>
        <childnode refid="18343" relation="include">
        </childnode>
        <childnode refid="18336" relation="include">
        </childnode>
        <childnode refid="18337" relation="include">
        </childnode>
        <childnode refid="18330" relation="include">
        </childnode>
        <childnode refid="18344" relation="include">
        </childnode>
        <childnode refid="18345" relation="include">
        </childnode>
      </node>
      <node id="18319">
        <label>ATen/Registry.h</label>
        <link refid="_registry_8h_source"/>
        <childnode refid="18291" relation="include">
        </childnode>
        <childnode refid="18320" relation="include">
        </childnode>
        <childnode refid="18292" relation="include">
        </childnode>
        <childnode refid="18277" relation="include">
        </childnode>
        <childnode refid="18269" relation="include">
        </childnode>
        <childnode refid="18321" relation="include">
        </childnode>
        <childnode refid="18322" relation="include">
        </childnode>
        <childnode refid="18278" relation="include">
        </childnode>
        <childnode refid="18297" relation="include">
        </childnode>
        <childnode refid="18323" relation="include">
        </childnode>
        <childnode refid="18266" relation="include">
        </childnode>
      </node>
      <node id="18271">
        <label>ATen/Error.h</label>
        <link refid="_error_8h_source"/>
        <childnode refid="18266" relation="include">
        </childnode>
        <childnode refid="18272" relation="include">
        </childnode>
        <childnode refid="18280" relation="include">
        </childnode>
        <childnode refid="18281" relation="include">
        </childnode>
        <childnode refid="18282" relation="include">
        </childnode>
        <childnode refid="18283" relation="include">
        </childnode>
        <childnode refid="18278" relation="include">
        </childnode>
      </node>
      <node id="18337">
        <label>ATen/TensorOptions.h</label>
        <link refid="_tensor_options_8h_source"/>
        <childnode refid="18317" relation="include">
        </childnode>
        <childnode refid="18286" relation="include">
        </childnode>
        <childnode refid="18336" relation="include">
        </childnode>
        <childnode refid="18330" relation="include">
        </childnode>
        <childnode refid="18287" relation="include">
        </childnode>
        <childnode refid="18327" relation="include">
        </childnode>
        <childnode refid="18315" relation="include">
        </childnode>
        <childnode refid="18280" relation="include">
        </childnode>
        <childnode refid="18302" relation="include">
        </childnode>
        <childnode refid="18273" relation="include">
        </childnode>
      </node>
      <node id="18327">
        <label>ATen/Tensor.h</label>
        <link refid="build_2aten_2src_2_a_ten_2tensor_8h_source"/>
        <childnode refid="18316" relation="include">
        </childnode>
        <childnode refid="18306" relation="include">
        </childnode>
        <childnode refid="18287" relation="include">
        </childnode>
        <childnode refid="18328" relation="include">
        </childnode>
        <childnode refid="18325" relation="include">
        </childnode>
        <childnode refid="18329" relation="include">
        </childnode>
        <childnode refid="18309" relation="include">
        </childnode>
        <childnode refid="18310" relation="include">
        </childnode>
        <childnode refid="18312" relation="include">
        </childnode>
        <childnode refid="18286" relation="include">
        </childnode>
        <childnode refid="18330" relation="include">
        </childnode>
        <childnode refid="18272" relation="include">
        </childnode>
      </node>
      <node id="18274">
        <label>type_traits</label>
      </node>
      <node id="18330">
        <label>ATen/Layout.h</label>
        <link refid="_layout_8h_source"/>
        <childnode refid="18287" relation="include">
        </childnode>
        <childnode refid="18271" relation="include">
        </childnode>
        <childnode refid="18304" relation="include">
        </childnode>
      </node>
      <node id="18289">
        <label>ATen/SmallVector.h</label>
        <link refid="_small_vector_8h_source"/>
        <childnode refid="18290" relation="include">
        </childnode>
        <childnode refid="18291" relation="include">
        </childnode>
        <childnode refid="18276" relation="include">
        </childnode>
        <childnode refid="18280" relation="include">
        </childnode>
        <childnode refid="18292" relation="include">
        </childnode>
        <childnode refid="18293" relation="include">
        </childnode>
        <childnode refid="18275" relation="include">
        </childnode>
        <childnode refid="18294" relation="include">
        </childnode>
        <childnode refid="18269" relation="include">
        </childnode>
        <childnode refid="18295" relation="include">
        </childnode>
        <childnode refid="18274" relation="include">
        </childnode>
        <childnode refid="18273" relation="include">
        </childnode>
        <childnode refid="18266" relation="include">
        </childnode>
      </node>
      <node id="18291">
        <label>algorithm</label>
      </node>
      <node id="18316">
        <label>ATen/Generator.h</label>
        <link refid="_generator_8h_source"/>
        <childnode refid="18308" relation="include">
        </childnode>
      </node>
      <node id="18293">
        <label>cstring</label>
      </node>
      <node id="18269">
        <label>memory</label>
      </node>
      <node id="18275">
        <label>initializer_list</label>
      </node>
      <node id="18339">
        <label>ATen/Formatting.h</label>
        <link refid="_formatting_8h_source"/>
        <childnode refid="18304" relation="include">
        </childnode>
        <childnode refid="18315" relation="include">
        </childnode>
        <childnode refid="18306" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceat">at</innernamespace>
    <innernamespace refid="namespaceat_1_1native">at::native</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;ATen/ATen.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ATen/NativeFunctions.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ATen/Config.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!AT_MKLDNN_ENABLED()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceat" kindref="compound">at</ref><sp/>{<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">native<sp/>{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"><ref refid="structat_1_1_tensor" kindref="compound">at::Tensor</ref><sp/>mkldnn_convolution(</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structat_1_1_tensor" kindref="compound">at::Tensor</ref>&amp;<sp/>input,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structat_1_1_tensor" kindref="compound">at::Tensor</ref>&amp;<sp/>weight,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structat_1_1_tensor" kindref="compound">at::Tensor</ref>&amp;<sp/>bias,</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>IntList<sp/>padding,<sp/>IntList<sp/>stride,<sp/>IntList<sp/>dilation,<sp/>int64_t<sp/>groups)<sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;mkldnn_convolution_forward:<sp/>ATen<sp/>not<sp/>compiled<sp/>with<sp/>MKLDNN<sp/>support&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="13"><highlight class="normal">}</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><ref refid="structat_1_1_tensor" kindref="compound">at::Tensor</ref><sp/>mkldnn_convolution_backward_input(</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>IntList<sp/>input_size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structat_1_1_tensor" kindref="compound">at::Tensor</ref>&amp;<sp/>grad_output,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structat_1_1_tensor" kindref="compound">at::Tensor</ref>&amp;<sp/>weight,</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>IntList<sp/>padding,<sp/>IntList<sp/>stride,<sp/>IntList<sp/>dilation,<sp/>int64_t<sp/>groups,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bias_defined)<sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;mkldnn_convolution_backward_input:<sp/>ATen<sp/>not<sp/>compiled<sp/>with<sp/>MKLDNN<sp/>support&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="19"><highlight class="normal">}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal">std::tuple&lt;at::Tensor,at::Tensor&gt;<sp/>mkldnn_convolution_backward_weights(</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>IntList<sp/>weight_size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structat_1_1_tensor" kindref="compound">at::Tensor</ref>&amp;<sp/>grad_output,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structat_1_1_tensor" kindref="compound">at::Tensor</ref>&amp;<sp/>input,</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>IntList<sp/>padding,<sp/>IntList<sp/>stride,<sp/>IntList<sp/>dilation,<sp/>int64_t<sp/>groups,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bias_defined)<sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;mkldnn_convolution_backward_weights:<sp/>ATen<sp/>not<sp/>compiled<sp/>with<sp/>MKLDNN<sp/>support&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="25"><highlight class="normal">}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal">std::tuple&lt;at::Tensor,at::Tensor,at::Tensor&gt;<sp/>mkldnn_convolution_backward(</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structat_1_1_tensor" kindref="compound">at::Tensor</ref>&amp;<sp/>input,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structat_1_1_tensor" kindref="compound">at::Tensor</ref>&amp;<sp/>grad_output_t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structat_1_1_tensor" kindref="compound">at::Tensor</ref>&amp;<sp/>weight,</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>IntList<sp/>padding,<sp/>IntList<sp/>stride,<sp/>IntList<sp/>dilation,<sp/>int64_t<sp/>groups,<sp/>std::array&lt;bool,3&gt;<sp/>output_mask)<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;mkldnn_convolution_backward:<sp/>ATen<sp/>not<sp/>compiled<sp/>with<sp/>MKLDNN<sp/>support&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="31"><highlight class="normal">}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal">}}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/>//<sp/>AT_MKLDNN_EBABLED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ATen/mkldnn/Runtime.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacemkldnn" kindref="compound">mkldnn</ref>;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceat" kindref="compound">at</ref><sp/>{<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">native<sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal">constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>input_batch_size_dim<sp/>=<sp/>0;<sp/><sp/></highlight><highlight class="comment">//<sp/>also<sp/>grad_input</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal">constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>input_channels_dim<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="45"><highlight class="normal">constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>output_batch_size_dim<sp/>=<sp/>0;<sp/><sp/></highlight><highlight class="comment">//<sp/>also<sp/>grad_output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal">constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>output_channels_dim<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="47"><highlight class="normal">constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>weight_output_channels_dim<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="48"><highlight class="normal">constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>weight_input_channels_dim<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Often<sp/>written<sp/>as<sp/>2<sp/>+<sp/>max_dim<sp/>(extra<sp/>dims<sp/>for<sp/>batch<sp/>size<sp/>and<sp/>channels)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal">constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_dim<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal">std::vector&lt;int64_t&gt;<sp/>conv_output_size(</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>IntList<sp/>input_size,<sp/>IntList<sp/>weight_size,</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>IntList<sp/>padding,<sp/>IntList<sp/>stride,<sp/>IntList<sp/>dilation,<sp/>int64_t<sp/>groups)</highlight></codeline>
<codeline lineno="56"><highlight class="normal">{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dim<sp/>=<sp/>input_size.size();</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>std::vector&lt;int64_t&gt;<sp/>output_size(dim);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>output_size[0]<sp/>=<sp/>input_size[input_batch_size_dim];</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>output_size[1]<sp/>=<sp/>weight_size[weight_output_channels_dim];</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>d<sp/>=<sp/>2;<sp/>d<sp/>&lt;<sp/>dim;<sp/>++d)<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>kernel<sp/>=<sp/>dilation[d<sp/>-<sp/>2]<sp/>*<sp/>(weight_size[d]<sp/>-<sp/>1)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>output_size[d]<sp/>=<sp/>(input_size[d]<sp/>+<sp/>(2<sp/>*<sp/>padding[d<sp/>-<sp/>2])</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>kernel)<sp/>/<sp/>stride[d<sp/>-<sp/>2]<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>output_size;</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><ref refid="structat_1_1_tensor" kindref="compound">at::Tensor</ref><sp/>mkldnn_convolution(</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structat_1_1_tensor" kindref="compound">at::Tensor</ref>&amp;<sp/>input,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structat_1_1_tensor" kindref="compound">at::Tensor</ref>&amp;<sp/>weight,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structat_1_1_tensor" kindref="compound">at::Tensor</ref>&amp;<sp/>bias,</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>IntList<sp/>padding,<sp/>IntList<sp/>stride,<sp/>IntList<sp/>dilation,<sp/>int64_t<sp/>groups)</highlight></codeline>
<codeline lineno="72"><highlight class="normal">{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>output<sp/>=<sp/>input.type().tensor(conv_output_size(</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>input.sizes(),<sp/>weight.sizes(),<sp/>padding,<sp/>stride,<sp/>dilation,<sp/>groups));</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cpu_engine<sp/>=<sp/>CpuEngine::Instance().get_engine();</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>int32_t<sp/>g<sp/>=<sp/>groups;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>int32_t<sp/>n<sp/>=<sp/>input.size(0);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>int32_t<sp/>ic<sp/>=<sp/>input.size(1);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>int32_t<sp/>ih<sp/>=<sp/>input.size(2);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>int32_t<sp/>iw<sp/>=<sp/>input.size(3);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>int32_t<sp/>oc<sp/>=<sp/>output.size(1);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>int32_t<sp/>oh<sp/>=<sp/>output.size(2);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>int32_t<sp/>ow<sp/>=<sp/>output.size(3);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>int32_t<sp/>kh<sp/>=<sp/>weight.size(2);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>int32_t<sp/>kw<sp/>=<sp/>weight.size(3);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>int32_t<sp/>sh<sp/>=<sp/>stride[0];</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>int32_t<sp/>sw<sp/>=<sp/>stride[1];</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>int32_t<sp/>ph<sp/>=<sp/>padding[0];</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>int32_t<sp/>pw<sp/>=<sp/>padding[1];</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>data_t<sp/>=<sp/>memory::data_type::f32;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>format_any<sp/>=<sp/>memory::format::any;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>format_nchw<sp/>=<sp/>memory::format::nchw;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>format_weight<sp/>=<sp/>(g!=<sp/>1)<sp/>?<sp/>memory::format::goihw<sp/>:<sp/>memory::format::oihw;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>format_x<sp/>=<sp/>memory::format::x;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>memory::dims<sp/>input_tz<sp/>=<sp/>{n,<sp/>ic,<sp/>ih,<sp/>iw};</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>memory::dims<sp/>weight_tz<sp/>=<sp/>(g!=<sp/>1)<sp/>?<sp/>memory::dims{g,<sp/>oc/g,<sp/>ic/g,<sp/>kh,<sp/>kw}<sp/>:<sp/>memory::dims{oc,<sp/>ic,<sp/>kh,<sp/>kw};</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>memory::dims<sp/>bias_tz<sp/>=<sp/>{oc};</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>memory::dims<sp/>output_tz<sp/>=<sp/>{n,<sp/>oc,<sp/>oh,<sp/>ow};</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>memory::dims<sp/>_stride<sp/>=<sp/>{sh,<sp/>sw};</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>memory::dims<sp/>_padding<sp/>=<sp/>{ph,<sp/>pw};</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>input_md<sp/>=<sp/>memory::desc({input_tz},<sp/>data_t,<sp/>format_any);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>weight_md<sp/>=<sp/>memory::desc({weight_tz},<sp/>data_t,<sp/>format_any);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bias_md<sp/>=<sp/>memory::desc({bias_tz},<sp/>data_t,<sp/>format_any);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>output_md<sp/>=<sp/>memory::desc({output_tz},<sp/>data_t,<sp/>format_any);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;convolution_forward::desc&gt;<sp/>conv_forward_desc;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bias.defined())<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>conv_forward_desc.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>convolution_forward::desc(prop_kind::forward,</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>convolution_direct,<sp/>input_md,<sp/>weight_md,<sp/>bias_md,<sp/>output_md,</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_stride,<sp/>_padding,<sp/>_padding,<sp/>padding_kind::zero));</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>conv_forward_desc.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>convolution_forward::desc(prop_kind::forward,</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>convolution_direct,<sp/>input_md,<sp/>weight_md,<sp/>output_md,</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_stride,<sp/>_padding,<sp/>_padding,<sp/>padding_kind::zero));</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;convolution_forward::primitive_desc&gt;<sp/>conv_forward_pd;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>conv_forward_pd.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>convolution_forward::primitive_desc(</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>*conv_forward_desc,<sp/>cpu_engine));</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>input_usr_memory<sp/>=<sp/>memory({{{input_tz},<sp/>data_t,<sp/>format_nchw},<sp/>cpu_engine},</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>input.data_ptr());</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>weight_usr_memory<sp/>=<sp/>memory({{{weight_tz},<sp/>data_t,<sp/><sp/>format_weight},<sp/>cpu_engine},</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>weight.data_ptr());</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>output_usr_memory<sp/>=<sp/>memory({{{output_tz},<sp/>data_t,<sp/>format_nchw},<sp/>cpu_engine},</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>output.data_ptr());</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>std::vector&lt;primitive&gt;<sp/>net;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>input_pd<sp/>=<sp/>conv_forward_pd-&gt;src_primitive_desc();</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>input_memory<sp/>=<sp/>input_usr_memory;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(input_usr_memory.get_primitive_desc()<sp/>!=<sp/>memory::primitive_desc(input_pd))<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>input_memory<sp/>=<sp/>memory(input_pd);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>net.push_back(reorder(input_usr_memory,<sp/>input_memory));</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>weight_pd<sp/>=<sp/>conv_forward_pd-&gt;weights_primitive_desc();</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>weight_memory<sp/>=<sp/>weight_usr_memory;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(weight_usr_memory.get_primitive_desc()<sp/>!=<sp/>memory::primitive_desc(weight_pd))<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>weight_memory<sp/>=<sp/>memory(weight_pd);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>net.push_back(reorder(weight_usr_memory,<sp/>weight_memory));</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>output_pd<sp/>=<sp/>conv_forward_pd-&gt;dst_primitive_desc();</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>output_memory<sp/>=<sp/>output_usr_memory;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(output_usr_memory.get_primitive_desc()<sp/>!=<sp/>memory::primitive_desc(output_pd))<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>output_memory<sp/>=<sp/>memory(output_pd);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;convolution_forward&gt;<sp/>conv_forward;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;memory&gt;<sp/>bias_usr_memory;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bias.defined())<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>bias_usr_memory.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>memory({{{bias_tz},<sp/>data_t,<sp/>format_x},<sp/>cpu_engine},</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bias.data_ptr()));</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>conv_forward.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>convolution_forward(*conv_forward_pd,<sp/>input_memory,</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>weight_memory,<sp/>*bias_usr_memory,<sp/>output_memory));</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>conv_forward.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>convolution_forward(*conv_forward_pd,<sp/>input_memory,</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>weight_memory,<sp/>output_memory));</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>net.push_back(*conv_forward);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(output_memory<sp/>!=<sp/>output_usr_memory)<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>net.push_back(reorder(output_memory,<sp/>output_usr_memory));</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>Stream::Instance().get_stream().submit(net);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>output;</highlight></codeline>
<codeline lineno="179"><highlight class="normal">}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal">Tensor<sp/>mkldnn_convolution_backward_input(</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>IntList<sp/>input_size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structat_1_1_tensor" kindref="compound">at::Tensor</ref>&amp;<sp/>grad_output,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structat_1_1_tensor" kindref="compound">at::Tensor</ref>&amp;<sp/>weight,</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>IntList<sp/>padding,<sp/>IntList<sp/>stride,<sp/>IntList<sp/>dilation,<sp/>int64_t<sp/>groups,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bias_defined)</highlight></codeline>
<codeline lineno="184"><highlight class="normal">{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>grad_input<sp/>=<sp/>grad_output.type().tensor(input_size);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cpu_engine<sp/>=<sp/>CpuEngine::Instance().get_engine();</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>int32_t<sp/>g<sp/>=<sp/>groups;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>int32_t<sp/>n<sp/>=<sp/>grad_input.size(0);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>int32_t<sp/>ic<sp/>=<sp/>grad_input.size(1);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>int32_t<sp/>ih<sp/>=<sp/>grad_input.size(2);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>int32_t<sp/>iw<sp/>=<sp/>grad_input.size(3);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>int32_t<sp/>oc<sp/>=<sp/>grad_output.size(1);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>int32_t<sp/>oh<sp/>=<sp/>grad_output.size(2);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>int32_t<sp/>ow<sp/>=<sp/>grad_output.size(3);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>int32_t<sp/>kh<sp/>=<sp/>weight.size(2);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>int32_t<sp/>kw<sp/>=<sp/>weight.size(3);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>int32_t<sp/>sh<sp/>=<sp/>stride[0];</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>int32_t<sp/>sw<sp/>=<sp/>stride[1];</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>int32_t<sp/>ph<sp/>=<sp/>padding[0];</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>int32_t<sp/>pw<sp/>=<sp/>padding[1];</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>data_t<sp/>=<sp/>memory::data_type::f32;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>format_any<sp/>=<sp/>memory::format::any;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>format_nchw<sp/>=<sp/>memory::format::nchw;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>format_weight<sp/>=<sp/>(g!=<sp/>1)<sp/>?<sp/>memory::format::goihw<sp/>:<sp/>memory::format::oihw;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>memory::dims<sp/>input_tz<sp/>=<sp/>{n,<sp/>ic,<sp/>ih,<sp/>iw};</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>memory::dims<sp/>weight_tz<sp/>=<sp/>(g!=<sp/>1)<sp/>?<sp/>memory::dims{g,<sp/>oc/g,<sp/>ic/g,<sp/>kh,<sp/>kw}<sp/>:<sp/>memory::dims{oc,<sp/>ic,<sp/>kh,<sp/>kw};</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>memory::dims<sp/>bias_tz<sp/>=<sp/>{oc};</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>memory::dims<sp/>output_tz<sp/>=<sp/>{n,<sp/>oc,<sp/>oh,<sp/>ow};</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>memory::dims<sp/>_stride<sp/>=<sp/>{sh,<sp/>sw};</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>memory::dims<sp/>_padding<sp/>=<sp/>{ph,<sp/>pw};</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>input_md<sp/>=<sp/>memory::desc({input_tz},<sp/>data_t,<sp/>format_any);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>weight_md<sp/>=<sp/>memory::desc({weight_tz},<sp/>data_t,<sp/>format_any);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bias_md<sp/>=<sp/>memory::desc({bias_tz},<sp/>data_t,<sp/>format_any);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>output_md<sp/>=<sp/>memory::desc({output_tz},<sp/>data_t,<sp/>format_any);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>need<sp/>to<sp/>re-create<sp/>conv_forward_pd<sp/>to<sp/>feed<sp/>conv_backward_data_pd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;convolution_forward::desc&gt;<sp/>conv_forward_desc;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bias_defined)<sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>conv_forward_desc.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>convolution_forward::desc(prop_kind::forward,</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>convolution_direct,<sp/>input_md,<sp/>weight_md,<sp/>bias_md,<sp/>output_md,</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_stride,<sp/>_padding,<sp/>_padding,<sp/>padding_kind::zero));</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>conv_forward_desc.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>convolution_forward::desc(prop_kind::forward,</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>convolution_direct,<sp/>input_md,<sp/>weight_md,<sp/>output_md,</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_stride,<sp/>_padding,<sp/>_padding,<sp/>padding_kind::zero));</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;convolution_forward::primitive_desc&gt;<sp/>conv_forward_pd;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>conv_forward_pd.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>convolution_forward::primitive_desc(</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>*conv_forward_desc,<sp/>cpu_engine));</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;convolution_backward_data::desc&gt;<sp/>conv_backward_data_desc;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>conv_backward_data_desc.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>convolution_backward_data::desc(</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>convolution_direct,<sp/>input_md,<sp/>weight_md,<sp/>output_md,</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>_stride,<sp/>_padding,<sp/>_padding,<sp/>padding_kind::zero));</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;convolution_backward_data::primitive_desc&gt;<sp/>conv_backward_data_pd;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>conv_backward_data_pd.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>convolution_backward_data::primitive_desc(</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>*conv_backward_data_desc,<sp/>cpu_engine,<sp/>*conv_forward_pd));</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>grad_output_usr_memory<sp/>=<sp/>memory({{{output_tz},<sp/>data_t,<sp/>format_nchw},<sp/>cpu_engine},</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>grad_output.data_ptr());</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>weight_usr_memory<sp/>=<sp/>memory({{{weight_tz},<sp/>data_t,<sp/>format_weight},<sp/>cpu_engine},</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>weight.data_ptr());</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>grad_input_usr_memory<sp/>=<sp/>memory({{{input_tz},<sp/>data_t,<sp/>format_nchw},<sp/>cpu_engine},</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>grad_input.data_ptr());</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>std::vector&lt;primitive&gt;<sp/>net;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>grad_output_pd<sp/>=<sp/>conv_backward_data_pd-&gt;diff_dst_primitive_desc();</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>grad_output_memory<sp/>=<sp/>grad_output_usr_memory;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(grad_output_usr_memory.get_primitive_desc()<sp/>!=<sp/>memory::primitive_desc(grad_output_pd))<sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>grad_output_memory<sp/>=<sp/>memory(grad_output_pd);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>net.push_back(reorder(grad_output_usr_memory,<sp/>grad_output_memory));</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>weight_pd<sp/>=<sp/>conv_backward_data_pd-&gt;weights_primitive_desc();</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>weight_memory<sp/>=<sp/>weight_usr_memory;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(weight_usr_memory.get_primitive_desc()<sp/>!=<sp/>memory::primitive_desc(weight_pd))<sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>weight_memory<sp/>=<sp/>memory(weight_pd);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>net.push_back(reorder(weight_usr_memory,<sp/>weight_memory));</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>grad_input_pd<sp/>=<sp/>conv_backward_data_pd-&gt;diff_src_primitive_desc();</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>grad_input_memory<sp/>=<sp/>grad_input_usr_memory;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(grad_input_memory.get_primitive_desc()<sp/>!=<sp/>memory::primitive_desc(grad_input_pd))<sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>grad_input_memory<sp/>=<sp/>memory(grad_input_pd);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;convolution_backward_data&gt;<sp/>conv_backward_data;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>conv_backward_data.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>convolution_backward_data(*conv_backward_data_pd,</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>grad_output_memory,<sp/>weight_memory,<sp/>grad_input_memory));</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>net.push_back(*conv_backward_data);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(grad_input_memory<sp/>!=<sp/>grad_input_usr_memory)<sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>net.push_back(reorder(grad_input_memory,<sp/>grad_input_usr_memory));</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/>Stream::Instance().get_stream().submit(net);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>grad_input;</highlight></codeline>
<codeline lineno="291"><highlight class="normal">}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal">std::tuple&lt;at::Tensor,<sp/>at::Tensor&gt;<sp/>mkldnn_convolution_backward_weights(</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>IntList<sp/>weight_size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structat_1_1_tensor" kindref="compound">at::Tensor</ref>&amp;<sp/>grad_output,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structat_1_1_tensor" kindref="compound">at::Tensor</ref>&amp;<sp/>input,</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>IntList<sp/>padding,<sp/>IntList<sp/>stride,<sp/>IntList<sp/>dilation,<sp/>int64_t<sp/>groups,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bias_defined)</highlight></codeline>
<codeline lineno="296"><highlight class="normal">{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>grad_weight<sp/>=<sp/>grad_output.type().tensor(weight_size);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>Tensor<sp/>grad_bias;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bias_defined)<sp/>{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>grad_bias<sp/>=<sp/>grad_output.type().tensor({grad_output.size(1)});</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cpu_engine<sp/>=<sp/>CpuEngine::Instance().get_engine();</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>int32_t<sp/>g<sp/>=<sp/>groups;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>int32_t<sp/>n<sp/>=<sp/>input.size(0);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/>int32_t<sp/>ic<sp/>=<sp/>input.size(1);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/>int32_t<sp/>ih<sp/>=<sp/>input.size(2);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>int32_t<sp/>iw<sp/>=<sp/>input.size(3);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>int32_t<sp/>oc<sp/>=<sp/>grad_output.size(1);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/>int32_t<sp/>oh<sp/>=<sp/>grad_output.size(2);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>int32_t<sp/>ow<sp/>=<sp/>grad_output.size(3);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>int32_t<sp/>kh<sp/>=<sp/>grad_weight.size(2);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/>int32_t<sp/>kw<sp/>=<sp/>grad_weight.size(3);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/>int32_t<sp/>sh<sp/>=<sp/>stride[0];</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>int32_t<sp/>sw<sp/>=<sp/>stride[1];</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/>int32_t<sp/>ph<sp/>=<sp/>padding[0];</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/>int32_t<sp/>pw<sp/>=<sp/>padding[1];</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>data_t<sp/>=<sp/>memory::data_type::f32;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>format_any<sp/>=<sp/>memory::format::any;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>format_nchw<sp/>=<sp/>memory::format::nchw;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>format_weight<sp/>=<sp/>(g!=<sp/>1)<sp/>?<sp/>memory::format::goihw<sp/>:<sp/>memory::format::oihw;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>format_x<sp/>=<sp/>memory::format::x;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>memory::dims<sp/>input_tz<sp/>=<sp/>{n,<sp/>ic,<sp/>ih,<sp/>iw};</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/>memory::dims<sp/>weight_tz<sp/>=<sp/>(g!=<sp/>1)<sp/>?<sp/>memory::dims{g,<sp/>oc/g,<sp/>ic/g,<sp/>kh,<sp/>kw}<sp/>:<sp/>memory::dims{oc,<sp/>ic,<sp/>kh,<sp/>kw};</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/>memory::dims<sp/>bias_tz<sp/>=<sp/>{oc};</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/>memory::dims<sp/>output_tz<sp/>=<sp/>{n,<sp/>oc,<sp/>oh,<sp/>ow};</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/>memory::dims<sp/>_stride<sp/>=<sp/>{sh,<sp/>sw};</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/>memory::dims<sp/>_padding<sp/>=<sp/>{ph,<sp/>pw};</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/>memory::desc<sp/>input_md({input_tz},<sp/>data_t,<sp/>format_any);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/>memory::desc<sp/>weight_md({weight_tz},<sp/>data_t,<sp/>format_any);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/>memory::desc<sp/>bias_md({bias_tz},<sp/>data_t,<sp/>format_any);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>memory::desc<sp/>output_md({output_tz},<sp/>data_t,<sp/>format_any);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>need<sp/>to<sp/>re-create<sp/>conv_forward_pd<sp/>to<sp/>feed<sp/>conv_backward_weight_pd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;convolution_forward::desc&gt;<sp/>conv_forward_desc;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bias_defined)<sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>conv_forward_desc.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>convolution_forward::desc(prop_kind::forward,</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>convolution_direct,<sp/>input_md,<sp/>weight_md,<sp/>bias_md,<sp/>output_md,</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_stride,<sp/>_padding,<sp/>_padding,<sp/>padding_kind::zero));</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>conv_forward_desc.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>convolution_forward::desc(prop_kind::forward,</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>convolution_direct,<sp/>input_md,<sp/>weight_md,<sp/>output_md,</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_stride,<sp/>_padding,<sp/>_padding,<sp/>padding_kind::zero));</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;convolution_forward::primitive_desc&gt;<sp/>conv_forward_pd;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/>conv_forward_pd.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>convolution_forward::primitive_desc(</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>*conv_forward_desc,<sp/>cpu_engine));</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;convolution_backward_weights::desc&gt;<sp/>conv_backward_weight_desc;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bias_defined)<sp/>{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>conv_backward_weight_desc.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>convolution_backward_weights::desc(</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>convolution_direct,<sp/>input_md,<sp/>weight_md,<sp/>bias_md,<sp/>output_md,</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_stride,<sp/>_padding,<sp/>_padding,<sp/>padding_kind::zero));</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>conv_backward_weight_desc.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>convolution_backward_weights::desc(</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>convolution_direct,<sp/>input_md,<sp/>weight_md,<sp/>output_md,</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_stride,<sp/>_padding,<sp/>_padding,<sp/>padding_kind::zero));</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;convolution_backward_weights::primitive_desc&gt;<sp/>conv_backward_weight_pd;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>conv_backward_weight_pd.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>convolution_backward_weights::primitive_desc(</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>*conv_backward_weight_desc,<sp/>cpu_engine,<sp/>*conv_forward_pd));</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>input_usr_memory<sp/>=<sp/>memory({{{input_tz},<sp/>data_t,<sp/>format_nchw},<sp/>cpu_engine},</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>input.data_ptr());</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>grad_output_usr_memory<sp/>=<sp/>memory({{{output_tz},<sp/>data_t,<sp/>format_nchw},<sp/>cpu_engine},</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>grad_output.data_ptr());</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>grad_weight_usr_memory<sp/>=<sp/>memory({{{weight_tz},<sp/>data_t,<sp/>format_weight},<sp/>cpu_engine},</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>grad_weight.data_ptr());</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;memory&gt;<sp/>grad_bias_memory;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>std::vector&lt;primitive&gt;<sp/>net;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>input_pd<sp/>=<sp/>conv_backward_weight_pd-&gt;src_primitive_desc();</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>input_memory<sp/>=<sp/>input_usr_memory;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(input_usr_memory.get_primitive_desc()<sp/>!=<sp/>memory::primitive_desc(input_pd))<sp/>{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>input_memory<sp/>=<sp/>memory(input_pd);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>net.push_back(reorder(input_usr_memory,<sp/>input_memory));</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>grad_output_pd<sp/>=<sp/>conv_backward_weight_pd-&gt;diff_dst_primitive_desc();</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>grad_output_memory<sp/>=<sp/>grad_output_usr_memory;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(grad_output_usr_memory.get_primitive_desc()<sp/>!=<sp/>memory::primitive_desc(grad_output_pd))<sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>grad_output_memory<sp/>=<sp/>memory(grad_output_pd);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>net.push_back(reorder(grad_output_usr_memory,<sp/>grad_output_memory));</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>grad_weight_pd<sp/>=<sp/>conv_backward_weight_pd-&gt;diff_weights_primitive_desc();</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>grad_weight_memory<sp/>=<sp/>grad_weight_usr_memory;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(grad_weight_usr_memory.get_primitive_desc()<sp/>!=<sp/>memory::primitive_desc(grad_weight_pd))<sp/>{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>grad_weight_memory<sp/>=<sp/>memory(grad_weight_pd);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;convolution_backward_weights&gt;<sp/>conv_backward_weight;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bias_defined)<sp/>{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>grad_bias_memory.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>memory({{{bias_tz},<sp/>data_t,<sp/>format_x},<sp/>cpu_engine},</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>grad_bias.data_ptr()));</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>conv_backward_weight.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>convolution_backward_weights(*conv_backward_weight_pd,</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>input_memory,<sp/>grad_output_memory,<sp/>grad_weight_memory,<sp/>*grad_bias_memory));</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>conv_backward_weight.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>convolution_backward_weights(*conv_backward_weight_pd,</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>input_memory,<sp/>grad_output_memory,<sp/>grad_weight_memory));</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/>net.push_back(*conv_backward_weight);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(grad_weight_memory<sp/>!=<sp/>grad_weight_usr_memory)<sp/>{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>net.push_back(reorder(grad_weight_memory,<sp/>grad_weight_usr_memory));</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/>Stream::Instance().get_stream().submit(net);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::tuple&lt;at::Tensor,<sp/>at::Tensor&gt;{grad_weight,<sp/>grad_bias};</highlight></codeline>
<codeline lineno="424"><highlight class="normal">}</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal">std::tuple&lt;at::Tensor,at::Tensor,at::Tensor&gt;<sp/>mkldnn_convolution_backward(</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structat_1_1_tensor" kindref="compound">at::Tensor</ref>&amp;<sp/>input,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structat_1_1_tensor" kindref="compound">at::Tensor</ref>&amp;<sp/>grad_output_t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structat_1_1_tensor" kindref="compound">at::Tensor</ref>&amp;<sp/>weight,</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>IntList<sp/>padding,<sp/>IntList<sp/>stride,<sp/>IntList<sp/>dilation,<sp/>int64_t<sp/>groups,<sp/>std::array&lt;bool,3&gt;<sp/>output_mask)</highlight></codeline>
<codeline lineno="429"><highlight class="normal">{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/>Tensor<sp/>grad_output<sp/>=<sp/>grad_output_t.contiguous();</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/>Tensor<sp/>grad_input,<sp/>grad_weight,<sp/>grad_bias;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(output_mask[0])<sp/>{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>grad_input<sp/>=<sp/>at::mkldnn_convolution_backward_input(</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>input.sizes(),<sp/>grad_output,<sp/>weight,<sp/>padding,<sp/>stride,<sp/>dilation,<sp/>groups,<sp/>output_mask[2]);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(output_mask[1]<sp/>||<sp/>output_mask[2])<sp/>{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>std::tie(grad_weight,<sp/>grad_bias)<sp/>=<sp/>at::mkldnn_convolution_backward_weights(</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>weight.sizes(),<sp/>grad_output,<sp/>input,<sp/>padding,<sp/>stride,<sp/>dilation,<sp/>groups,<sp/>output_mask[2]);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::tuple&lt;Tensor,<sp/>Tensor,<sp/>Tensor&gt;{grad_input,<sp/>grad_weight,<sp/>grad_bias};</highlight></codeline>
<codeline lineno="443"><highlight class="normal">}</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal">}}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>at::native</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/mkldnn/Conv.cpp"/>
  </compounddef>
</doxygen>
