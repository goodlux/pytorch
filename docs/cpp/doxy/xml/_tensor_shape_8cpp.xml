<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="_tensor_shape_8cpp" kind="file" language="C++">
    <compoundname>TensorShape.cpp</compoundname>
    <includes refid="_a_ten_8h" local="yes">ATen/ATen.h</includes>
    <includes refid="_error_8h" local="yes">ATen/Error.h</includes>
    <includes refid="_expand_utils_8h" local="yes">ATen/ExpandUtils.h</includes>
    <includes local="yes">ATen/NativeFunctions.h</includes>
    <includes refid="_wrap_dim_utils_8h" local="yes">ATen/WrapDimUtils.h</includes>
    <includes refid="optional_8h" local="yes">ATen/optional.h</includes>
    <includes local="no">TH/THTensor.hpp</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">vector</includes>
    <incdepgraph>
      <node id="8113">
        <label>ATen/optional.h</label>
        <link refid="optional_8h_source"/>
        <childnode refid="8114" relation="include">
        </childnode>
        <childnode refid="8115" relation="include">
        </childnode>
        <childnode refid="8116" relation="include">
        </childnode>
        <childnode refid="8117" relation="include">
        </childnode>
        <childnode refid="8118" relation="include">
        </childnode>
        <childnode refid="8119" relation="include">
        </childnode>
        <childnode refid="8120" relation="include">
        </childnode>
      </node>
      <node id="8159">
        <label>ATen/detail/CUDAHooksInterface.h</label>
        <link refid="_c_u_d_a_hooks_interface_8h_source"/>
        <childnode refid="8109" relation="include">
        </childnode>
        <childnode refid="8112" relation="include">
        </childnode>
        <childnode refid="8157" relation="include">
        </childnode>
        <childnode refid="8160" relation="include">
        </childnode>
        <childnode refid="8121" relation="include">
        </childnode>
        <childnode refid="8118" relation="include">
        </childnode>
        <childnode refid="8110" relation="include">
        </childnode>
      </node>
      <node id="8127">
        <label>ATen/Device.h</label>
        <link refid="_device_8h_source"/>
        <childnode refid="8112" relation="include">
        </childnode>
        <childnode refid="8128" relation="include">
        </childnode>
        <childnode refid="8121" relation="include">
        </childnode>
        <childnode refid="8143" relation="include">
        </childnode>
        <childnode refid="8119" relation="include">
        </childnode>
        <childnode refid="8118" relation="include">
        </childnode>
      </node>
      <node id="8126">
        <label>atomic</label>
      </node>
      <node id="8118">
        <label>functional</label>
      </node>
      <node id="8164">
        <label>ATen/Backtrace.h</label>
        <link refid="_backtrace_8h_source"/>
        <childnode refid="8121" relation="include">
        </childnode>
        <childnode refid="8119" relation="include">
        </childnode>
        <childnode refid="8154" relation="include">
        </childnode>
        <childnode refid="8107" relation="include">
        </childnode>
      </node>
      <node id="8128">
        <label>ATen/ScalarType.h</label>
        <link refid="_scalar_type_8h_source"/>
        <childnode refid="8129" relation="include">
        </childnode>
        <childnode refid="8107" relation="include">
        </childnode>
        <childnode refid="8139" relation="include">
        </childnode>
        <childnode refid="8141" relation="include">
        </childnode>
        <childnode refid="8145" relation="include">
        </childnode>
      </node>
      <node id="8140">
        <label>limits</label>
      </node>
      <node id="8148">
        <label>assert.h</label>
      </node>
      <node id="8153">
        <label>ATen/Utils.h</label>
        <link refid="aten_2src_2_a_ten_2utils_8h_source"/>
        <childnode refid="8107" relation="include">
        </childnode>
        <childnode refid="8129" relation="include">
        </childnode>
        <childnode refid="8112" relation="include">
        </childnode>
        <childnode refid="8152" relation="include">
        </childnode>
        <childnode refid="8132" relation="include">
        </childnode>
        <childnode refid="8124" relation="include">
        </childnode>
        <childnode refid="8154" relation="include">
        </childnode>
        <childnode refid="8155" relation="include">
        </childnode>
      </node>
      <node id="8135">
        <label>iterator</label>
      </node>
      <node id="8147">
        <label>ATen/Scalar.h</label>
        <link refid="_scalar_8h_source"/>
        <childnode refid="8148" relation="include">
        </childnode>
        <childnode refid="8149" relation="include">
        </childnode>
        <childnode refid="8120" relation="include">
        </childnode>
        <childnode refid="8119" relation="include">
        </childnode>
        <childnode refid="8114" relation="include">
        </childnode>
        <childnode refid="8107" relation="include">
        </childnode>
        <childnode refid="8139" relation="include">
        </childnode>
        <childnode refid="8128" relation="include">
        </childnode>
        <childnode refid="8150" relation="include">
        </childnode>
        <childnode refid="8153" relation="include">
        </childnode>
      </node>
      <node id="8167">
        <label>TH/THStorageFunctions.hpp</label>
      </node>
      <node id="8141">
        <label>cstdint</label>
      </node>
      <node id="8175">
        <label>ATen/Deprecated.h</label>
        <link refid="_deprecated_8h_source"/>
      </node>
      <node id="8149">
        <label>stdint.h</label>
      </node>
      <node id="8189">
        <label>TH/THTensor.hpp</label>
      </node>
      <node id="8186">
        <label>ATen/CUDAGuard.h</label>
        <link refid="_c_u_d_a_guard_8h_source"/>
      </node>
      <node id="8142">
        <label>cmath</label>
      </node>
      <node id="8117">
        <label>cassert</label>
      </node>
      <node id="8158">
        <label>ATen/Context.h</label>
        <link refid="_context_8h_source"/>
        <childnode refid="8107" relation="include">
        </childnode>
        <childnode refid="8108" relation="include">
        </childnode>
        <childnode refid="8157" relation="include">
        </childnode>
        <childnode refid="8156" relation="include">
        </childnode>
        <childnode refid="8153" relation="include">
        </childnode>
        <childnode refid="8112" relation="include">
        </childnode>
        <childnode refid="8159" relation="include">
        </childnode>
        <childnode refid="8165" relation="include">
        </childnode>
        <childnode refid="8110" relation="include">
        </childnode>
        <childnode refid="8162" relation="include">
        </childnode>
        <childnode refid="8141" relation="include">
        </childnode>
      </node>
      <node id="8144">
        <label>Half-inl.h</label>
        <link refid="_half-inl_8h_source"/>
        <childnode refid="8107" relation="include">
        </childnode>
        <childnode refid="8134" relation="include">
        </childnode>
        <childnode refid="8140" relation="include">
        </childnode>
      </node>
      <node id="8120">
        <label>stdexcept</label>
      </node>
      <node id="8181">
        <label>ATen/TensorOperators.h</label>
        <link refid="_tensor_operators_8h_source"/>
        <childnode refid="8147" relation="include">
        </childnode>
        <childnode refid="8168" relation="include">
        </childnode>
        <childnode refid="8156" relation="include">
        </childnode>
        <childnode refid="8119" relation="include">
        </childnode>
        <childnode refid="8120" relation="include">
        </childnode>
      </node>
      <node id="8155">
        <label>numeric</label>
      </node>
      <node id="8151">
        <label>ATen/TensorImpl.h</label>
        <link refid="_tensor_impl_8h_source"/>
        <childnode refid="8126" relation="include">
        </childnode>
        <childnode refid="8110" relation="include">
        </childnode>
        <childnode refid="8125" relation="include">
        </childnode>
        <childnode refid="8128" relation="include">
        </childnode>
        <childnode refid="8113" relation="include">
        </childnode>
      </node>
      <node id="8139">
        <label>ATen/Half.h</label>
        <link refid="_half_8h_source"/>
        <childnode refid="8107" relation="include">
        </childnode>
        <childnode refid="8140" relation="include">
        </childnode>
        <childnode refid="8119" relation="include">
        </childnode>
        <childnode refid="8141" relation="include">
        </childnode>
        <childnode refid="8120" relation="include">
        </childnode>
        <childnode refid="8114" relation="include">
        </childnode>
        <childnode refid="8142" relation="include">
        </childnode>
        <childnode refid="8143" relation="include">
        </childnode>
        <childnode refid="8144" relation="include">
        </childnode>
      </node>
      <node id="8125">
        <label>ATen/Retainable.h</label>
        <link refid="_retainable_8h_source"/>
        <childnode refid="8126" relation="include">
        </childnode>
      </node>
      <node id="8105">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/TensorShape.cpp</label>
        <link refid="_tensor_shape_8cpp"/>
        <childnode refid="8106" relation="include">
        </childnode>
        <childnode refid="8112" relation="include">
        </childnode>
        <childnode refid="8187" relation="include">
        </childnode>
        <childnode refid="8176" relation="include">
        </childnode>
        <childnode refid="8173" relation="include">
        </childnode>
        <childnode refid="8113" relation="include">
        </childnode>
        <childnode refid="8189" relation="include">
        </childnode>
        <childnode refid="8132" relation="include">
        </childnode>
        <childnode refid="8138" relation="include">
        </childnode>
      </node>
      <node id="8150">
        <label>ATen/TensorBase.h</label>
        <link refid="_tensor_base_8h_source"/>
        <childnode refid="8151" relation="include">
        </childnode>
        <childnode refid="8152" relation="include">
        </childnode>
      </node>
      <node id="8119">
        <label>string</label>
      </node>
      <node id="8184">
        <label>ATen/DimVector.h</label>
        <link refid="_dim_vector_8h_source"/>
        <childnode refid="8130" relation="include">
        </childnode>
        <childnode refid="8149" relation="include">
        </childnode>
      </node>
      <node id="8185">
        <label>ATen/OptionsGuard.h</label>
        <link refid="_options_guard_8h_source"/>
        <childnode refid="8127" relation="include">
        </childnode>
        <childnode refid="8171" relation="include">
        </childnode>
        <childnode refid="8128" relation="include">
        </childnode>
        <childnode refid="8178" relation="include">
        </childnode>
        <childnode refid="8113" relation="include">
        </childnode>
      </node>
      <node id="8187">
        <label>ATen/ExpandUtils.h</label>
        <link refid="_expand_utils_8h_source"/>
        <childnode refid="8168" relation="include">
        </childnode>
        <childnode refid="8112" relation="include">
        </childnode>
        <childnode refid="8118" relation="include">
        </childnode>
        <childnode refid="8124" relation="include">
        </childnode>
        <childnode refid="8188" relation="include">
        </childnode>
      </node>
      <node id="8109">
        <label>ATen/Allocator.h</label>
        <link refid="_allocator_8h_source"/>
        <childnode refid="8110" relation="include">
        </childnode>
        <childnode refid="8111" relation="include">
        </childnode>
        <childnode refid="8112" relation="include">
        </childnode>
        <childnode refid="8125" relation="include">
        </childnode>
        <childnode refid="8127" relation="include">
        </childnode>
        <childnode refid="8146" relation="include">
        </childnode>
      </node>
      <node id="8165">
        <label>ATen/CUDAStream.h</label>
        <link refid="_c_u_d_a_stream_8h_source"/>
      </node>
      <node id="8177">
        <label>ATen/DeviceGuard.h</label>
        <link refid="_device_guard_8h_source"/>
        <childnode refid="8127" relation="include">
        </childnode>
        <childnode refid="8112" relation="include">
        </childnode>
        <childnode refid="8128" relation="include">
        </childnode>
        <childnode refid="8168" relation="include">
        </childnode>
        <childnode refid="8159" relation="include">
        </childnode>
        <childnode refid="8121" relation="include">
        </childnode>
      </node>
      <node id="8122">
        <label>exception</label>
      </node>
      <node id="8111">
        <label>stddef.h</label>
      </node>
      <node id="8152">
        <label>ATen/UndefinedTensor.h</label>
        <link refid="_undefined_tensor_8h_source"/>
        <childnode refid="8151" relation="include">
        </childnode>
      </node>
      <node id="8183">
        <label>ATen/Dispatch.h</label>
        <link refid="_dispatch_8h_source"/>
        <childnode refid="8112" relation="include">
        </childnode>
        <childnode refid="8139" relation="include">
        </childnode>
        <childnode refid="8156" relation="include">
        </childnode>
      </node>
      <node id="8131">
        <label>AlignOf.h</label>
        <link refid="_align_of_8h_source"/>
        <childnode refid="8121" relation="include">
        </childnode>
      </node>
      <node id="8166">
        <label>ATen/Storage.h</label>
        <link refid="_storage_8h_source"/>
        <childnode refid="8147" relation="include">
        </childnode>
        <childnode refid="8167" relation="include">
        </childnode>
      </node>
      <node id="8123">
        <label>ostream</label>
      </node>
      <node id="8108">
        <label>ATen/CPUGeneral.h</label>
        <link refid="_c_p_u_general_8h_source"/>
        <childnode refid="8107" relation="include">
        </childnode>
      </node>
      <node id="8156">
        <label>ATen/Type.h</label>
      </node>
      <node id="8129">
        <label>ATen/ArrayRef.h</label>
        <link refid="_array_ref_8h_source"/>
        <childnode refid="8112" relation="include">
        </childnode>
        <childnode refid="8130" relation="include">
        </childnode>
        <childnode refid="8137" relation="include">
        </childnode>
        <childnode refid="8135" relation="include">
        </childnode>
        <childnode refid="8138" relation="include">
        </childnode>
      </node>
      <node id="8172">
        <label>ATen/TensorGeometry.h</label>
        <link refid="_tensor_geometry_8h_source"/>
        <childnode refid="8156" relation="include">
        </childnode>
        <childnode refid="8173" relation="include">
        </childnode>
      </node>
      <node id="8169">
        <label>ATen/SparseTensorRef.h</label>
        <link refid="_sparse_tensor_ref_8h_source"/>
      </node>
      <node id="8107">
        <label>ATen/ATenGeneral.h</label>
        <link refid="_a_ten_general_8h_source"/>
      </node>
      <node id="8173">
        <label>ATen/WrapDimUtils.h</label>
        <link refid="_wrap_dim_utils_8h_source"/>
        <childnode refid="8151" relation="include">
        </childnode>
        <childnode refid="8124" relation="include">
        </childnode>
      </node>
      <node id="8170">
        <label>ATen/TensorAccessor.h</label>
        <link refid="_tensor_accessor_8h_source"/>
        <childnode refid="8121" relation="include">
        </childnode>
        <childnode refid="8149" relation="include">
        </childnode>
        <childnode refid="8128" relation="include">
        </childnode>
      </node>
      <node id="8154">
        <label>typeinfo</label>
      </node>
      <node id="8161">
        <label>cstdio</label>
      </node>
      <node id="8188">
        <label>tuple</label>
      </node>
      <node id="8146">
        <label>ATen/detail/UniqueVoidPtr.h</label>
        <link refid="_unique_void_ptr_8h_source"/>
        <childnode refid="8110" relation="include">
        </childnode>
        <childnode refid="8107" relation="include">
        </childnode>
      </node>
      <node id="8138">
        <label>vector</label>
      </node>
      <node id="8182">
        <label>ATen/TensorMethods.h</label>
      </node>
      <node id="8179">
        <label>THNN/Reduction.h</label>
      </node>
      <node id="8136">
        <label>new</label>
      </node>
      <node id="8114">
        <label>utility</label>
      </node>
      <node id="8137">
        <label>array</label>
      </node>
      <node id="8124">
        <label>sstream</label>
      </node>
      <node id="8174">
        <label>ATen/Functions.h</label>
        <link refid="build_2aten_2src_2_a_ten_2_functions_8h_source"/>
        <childnode refid="8147" relation="include">
        </childnode>
        <childnode refid="8156" relation="include">
        </childnode>
        <childnode refid="8168" relation="include">
        </childnode>
        <childnode refid="8166" relation="include">
        </childnode>
        <childnode refid="8157" relation="include">
        </childnode>
        <childnode refid="8175" relation="include">
        </childnode>
        <childnode refid="8176" relation="include">
        </childnode>
        <childnode refid="8177" relation="include">
        </childnode>
        <childnode refid="8178" relation="include">
        </childnode>
        <childnode refid="8179" relation="include">
        </childnode>
      </node>
      <node id="8176">
        <label>ATen/NativeFunctions.h</label>
      </node>
      <node id="8143">
        <label>iosfwd</label>
      </node>
      <node id="8133">
        <label>cstdlib</label>
      </node>
      <node id="8145">
        <label>iostream</label>
      </node>
      <node id="8121">
        <label>cstddef</label>
      </node>
      <node id="8163">
        <label>unordered_map</label>
      </node>
      <node id="8162">
        <label>mutex</label>
      </node>
      <node id="8106">
        <label>ATen/ATen.h</label>
        <link refid="_a_ten_8h_source"/>
        <childnode refid="8107" relation="include">
        </childnode>
        <childnode refid="8108" relation="include">
        </childnode>
        <childnode refid="8109" relation="include">
        </childnode>
        <childnode refid="8147" relation="include">
        </childnode>
        <childnode refid="8156" relation="include">
        </childnode>
        <childnode refid="8157" relation="include">
        </childnode>
        <childnode refid="8158" relation="include">
        </childnode>
        <childnode refid="8166" relation="include">
        </childnode>
        <childnode refid="8168" relation="include">
        </childnode>
        <childnode refid="8127" relation="include">
        </childnode>
        <childnode refid="8172" relation="include">
        </childnode>
        <childnode refid="8174" relation="include">
        </childnode>
        <childnode refid="8180" relation="include">
        </childnode>
        <childnode refid="8181" relation="include">
        </childnode>
        <childnode refid="8182" relation="include">
        </childnode>
        <childnode refid="8183" relation="include">
        </childnode>
        <childnode refid="8184" relation="include">
        </childnode>
        <childnode refid="8177" relation="include">
        </childnode>
        <childnode refid="8178" relation="include">
        </childnode>
        <childnode refid="8171" relation="include">
        </childnode>
        <childnode refid="8185" relation="include">
        </childnode>
        <childnode refid="8186" relation="include">
        </childnode>
      </node>
      <node id="8160">
        <label>ATen/Registry.h</label>
        <link refid="_registry_8h_source"/>
        <childnode refid="8132" relation="include">
        </childnode>
        <childnode refid="8161" relation="include">
        </childnode>
        <childnode refid="8133" relation="include">
        </childnode>
        <childnode refid="8118" relation="include">
        </childnode>
        <childnode refid="8110" relation="include">
        </childnode>
        <childnode refid="8162" relation="include">
        </childnode>
        <childnode refid="8163" relation="include">
        </childnode>
        <childnode refid="8119" relation="include">
        </childnode>
        <childnode refid="8138" relation="include">
        </childnode>
        <childnode refid="8164" relation="include">
        </childnode>
        <childnode refid="8107" relation="include">
        </childnode>
      </node>
      <node id="8112">
        <label>ATen/Error.h</label>
        <link refid="_error_8h_source"/>
        <childnode refid="8107" relation="include">
        </childnode>
        <childnode refid="8113" relation="include">
        </childnode>
        <childnode refid="8121" relation="include">
        </childnode>
        <childnode refid="8122" relation="include">
        </childnode>
        <childnode refid="8123" relation="include">
        </childnode>
        <childnode refid="8124" relation="include">
        </childnode>
        <childnode refid="8119" relation="include">
        </childnode>
      </node>
      <node id="8178">
        <label>ATen/TensorOptions.h</label>
        <link refid="_tensor_options_8h_source"/>
        <childnode refid="8158" relation="include">
        </childnode>
        <childnode refid="8127" relation="include">
        </childnode>
        <childnode refid="8177" relation="include">
        </childnode>
        <childnode refid="8171" relation="include">
        </childnode>
        <childnode refid="8128" relation="include">
        </childnode>
        <childnode refid="8168" relation="include">
        </childnode>
        <childnode refid="8156" relation="include">
        </childnode>
        <childnode refid="8121" relation="include">
        </childnode>
        <childnode refid="8143" relation="include">
        </childnode>
        <childnode refid="8114" relation="include">
        </childnode>
      </node>
      <node id="8168">
        <label>ATen/Tensor.h</label>
        <link refid="build_2aten_2src_2_a_ten_2tensor_8h_source"/>
        <childnode refid="8157" relation="include">
        </childnode>
        <childnode refid="8147" relation="include">
        </childnode>
        <childnode refid="8128" relation="include">
        </childnode>
        <childnode refid="8169" relation="include">
        </childnode>
        <childnode refid="8166" relation="include">
        </childnode>
        <childnode refid="8170" relation="include">
        </childnode>
        <childnode refid="8150" relation="include">
        </childnode>
        <childnode refid="8151" relation="include">
        </childnode>
        <childnode refid="8153" relation="include">
        </childnode>
        <childnode refid="8127" relation="include">
        </childnode>
        <childnode refid="8171" relation="include">
        </childnode>
        <childnode refid="8113" relation="include">
        </childnode>
      </node>
      <node id="8115">
        <label>type_traits</label>
      </node>
      <node id="8171">
        <label>ATen/Layout.h</label>
        <link refid="_layout_8h_source"/>
        <childnode refid="8128" relation="include">
        </childnode>
        <childnode refid="8112" relation="include">
        </childnode>
        <childnode refid="8145" relation="include">
        </childnode>
      </node>
      <node id="8130">
        <label>ATen/SmallVector.h</label>
        <link refid="_small_vector_8h_source"/>
        <childnode refid="8131" relation="include">
        </childnode>
        <childnode refid="8132" relation="include">
        </childnode>
        <childnode refid="8117" relation="include">
        </childnode>
        <childnode refid="8121" relation="include">
        </childnode>
        <childnode refid="8133" relation="include">
        </childnode>
        <childnode refid="8134" relation="include">
        </childnode>
        <childnode refid="8116" relation="include">
        </childnode>
        <childnode refid="8135" relation="include">
        </childnode>
        <childnode refid="8110" relation="include">
        </childnode>
        <childnode refid="8136" relation="include">
        </childnode>
        <childnode refid="8115" relation="include">
        </childnode>
        <childnode refid="8114" relation="include">
        </childnode>
        <childnode refid="8107" relation="include">
        </childnode>
      </node>
      <node id="8132">
        <label>algorithm</label>
      </node>
      <node id="8157">
        <label>ATen/Generator.h</label>
        <link refid="_generator_8h_source"/>
        <childnode refid="8149" relation="include">
        </childnode>
      </node>
      <node id="8134">
        <label>cstring</label>
      </node>
      <node id="8110">
        <label>memory</label>
      </node>
      <node id="8116">
        <label>initializer_list</label>
      </node>
      <node id="8180">
        <label>ATen/Formatting.h</label>
        <link refid="_formatting_8h_source"/>
        <childnode refid="8145" relation="include">
        </childnode>
        <childnode refid="8156" relation="include">
        </childnode>
        <childnode refid="8147" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceat">at</innernamespace>
    <innernamespace refid="namespaceat_1_1native">at::native</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;ATen/ATen.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ATen/Error.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ATen/ExpandUtils.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ATen/NativeFunctions.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ATen/WrapDimUtils.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ATen/optional.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TH/THTensor.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceat" kindref="compound">at</ref><sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">native<sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>check_cat_no_zero_dim(TensorList<sp/>tensors)<sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>tensors.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>t<sp/>=<sp/>tensors[i];</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t.dim()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>AT_ERROR(</highlight><highlight class="stringliteral">&quot;zero-dimensional<sp/>tensor<sp/>(at<sp/>position<sp/>&quot;</highlight><highlight class="normal">,<sp/>i,<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>cannot<sp/>be<sp/>concatenated&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="22"><highlight class="normal">}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal">Tensor<sp/>&amp;<sp/>cat_out(Tensor<sp/>&amp;<sp/>result,<sp/>TensorList<sp/>tensors,<sp/>int64_t<sp/>dim)<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>check_cat_no_zero_dim(tensors);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>dim<sp/>=<sp/>legacy_cat_wrap_dim(dim,<sp/>tensors);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>at::_cat_out(result,<sp/>tensors,<sp/>dim);</highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal">Tensor<sp/>cat(TensorList<sp/>tensors,<sp/>int64_t<sp/>dim)<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>check_cat_no_zero_dim(tensors);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>dim<sp/>=<sp/>legacy_cat_wrap_dim(dim,<sp/>tensors);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>at::_cat(tensors,<sp/>dim);</highlight></codeline>
<codeline lineno="34"><highlight class="normal">}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal">std::vector&lt;Tensor&gt;<sp/>chunk(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>int64_t<sp/>chunks,<sp/>int64_t<sp/>dim)<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.dim()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>AT_ERROR(</highlight><highlight class="stringliteral">&quot;chunk<sp/>expects<sp/>at<sp/>least<sp/>a<sp/>1-dimensional<sp/>tensor&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(chunks<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>AT_ERROR(</highlight><highlight class="stringliteral">&quot;chunk<sp/>expects<sp/>`chunks`<sp/>to<sp/>be<sp/>greater<sp/>than<sp/>0,<sp/>got:<sp/>&quot;</highlight><highlight class="normal">,<sp/>chunks);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>int64_t<sp/>split_size<sp/>=<sp/>(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.size(dim)<sp/>+<sp/>chunks<sp/>-<sp/>1)<sp/>/<sp/>chunks;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>need<sp/>to<sp/>call<sp/>split_with_sizes<sp/>in<sp/>the<sp/>case<sp/>where<sp/>split_size<sp/>and<sp/>dimension<sp/>size<sp/>are<sp/>0,<sp/>because</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>call<sp/>to<sp/>split<sp/>would<sp/>discard<sp/>the<sp/>number<sp/>of<sp/>chunks<sp/>(because<sp/>we<sp/>can<sp/>have<sp/>an<sp/>arbitrary<sp/>number<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>0-sized<sp/>chunks<sp/>adding<sp/>up<sp/>to<sp/>0).<sp/><sp/>So,<sp/>call<sp/>split_with_sizes<sp/>with<sp/>the<sp/>correct<sp/>number<sp/>of<sp/>chunks,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>eventually<sp/>we<sp/>will<sp/>do<sp/>this<sp/>for<sp/>all<sp/>cases.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(split_size<sp/>==<sp/>0<sp/>&amp;&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.size(dim)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int64_t&gt;<sp/>split_sizes(chunks,<sp/>split_size);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>split_sizes[chunks<sp/>-<sp/>1]<sp/>=<sp/>split_size<sp/>-<sp/>(split_size<sp/>*<sp/>chunks<sp/>-<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.size(dim));</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.split_with_sizes(split_sizes,<sp/>dim);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.split(split_size,<sp/>dim);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal">Tensor<sp/>diagflat(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>int64_t<sp/>offset)<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.contiguous().view(-1).diag(offset);</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal">Tensor<sp/>diagonal(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>int64_t<sp/>offset,<sp/>int64_t<sp/>dim1_,<sp/>int64_t<sp/>dim2_)<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>int64_t<sp/>nDims<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.dim();</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>int64_t<sp/>dim1<sp/>=<sp/>maybe_wrap_dim(dim1_,<sp/>nDims);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>int64_t<sp/>dim2<sp/>=<sp/>maybe_wrap_dim(dim2_,<sp/>nDims);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>AT_CHECK(dim1<sp/>!=<sp/>dim2,<sp/></highlight><highlight class="stringliteral">&quot;diagonal<sp/>dimensions<sp/>cannot<sp/>be<sp/>identical<sp/>&quot;</highlight><highlight class="normal">,<sp/>dim1_,<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">,<sp/>dim2_);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>int64_t<sp/>diag_size;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>int64_t<sp/>storage_offset<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.storage_offset();</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>storage<sp/>offset<sp/>and<sp/>size<sp/>for<sp/>the<sp/>diagonal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>positive<sp/>values<sp/>of<sp/>offset<sp/>(above<sp/>the<sp/>main<sp/>diagonal)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;leftmost<sp/>columns&quot;<sp/>(along<sp/>dim2)<sp/>are<sp/>dropped</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>negative<sp/>values<sp/>of<sp/>offset<sp/>(below<sp/>the<sp/>main<sp/>diagonal)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;topmost<sp/>rows&quot;<sp/>(along<sp/>dim1)<sp/>are<sp/>dropped.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>we<sp/>invert<sp/>+/-<sp/>in<sp/>the<sp/>second<sp/>to<sp/>absorb<sp/>the<sp/>negative</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>sign<sp/>in<sp/>the<sp/>offset.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(offset<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>diag_size<sp/>=<sp/>std::max&lt;int64_t&gt;(std::min(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.size(dim1),<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.size(dim2)-offset),<sp/>0);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>diag_size<sp/>=<sp/>std::max&lt;int64_t&gt;(std::min(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.size(dim1)+offset,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.size(dim2)),<sp/>0);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>USE_TH_SIZE_ZERO_DIM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>AT_CHECK(diag_size<sp/>&gt;<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>diagonal<sp/>offset<sp/>&quot;</highlight><highlight class="normal">,<sp/>offset);<sp/></highlight><highlight class="comment">//<sp/>the<sp/>diagonal<sp/>offset<sp/>was<sp/>too<sp/>large<sp/>in<sp/>magnitude</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NumPy<sp/>allows<sp/>you<sp/>to<sp/>specify<sp/>offsets<sp/>&quot;off<sp/>the<sp/>end&quot;;<sp/>let&apos;s<sp/>just<sp/>be<sp/>careful<sp/>not<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>a<sp/>ridiculous<sp/>storage_offset<sp/>in<sp/>that<sp/>case<sp/>(technically<sp/>it<sp/>shouldn&apos;t<sp/>matter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>because<sp/>there<sp/>are<sp/>no<sp/>elements<sp/>in<sp/>the<sp/>tensor,<sp/>but<sp/>let&apos;s<sp/>be<sp/>kosher).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(diag_size<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>skip</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(offset<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>storage_offset<sp/>+=<sp/>offset<sp/>*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.stride(dim2);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>storage_offset<sp/>-=<sp/>offset<sp/>*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.stride(dim1);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>construct<sp/>new<sp/>size<sp/>and<sp/>stride:<sp/>we<sp/>drop<sp/>dim1<sp/>and<sp/>dim2<sp/>(maximum<sp/>first<sp/>for<sp/>not<sp/>changing<sp/>the<sp/>index<sp/>of<sp/>the<sp/>minumum)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>new<sp/>(&quot;joint&quot;)<sp/>dimension<sp/>is<sp/>appended<sp/>to<sp/>the<sp/>end<sp/>of<sp/>the<sp/>shape<sp/>/<sp/>stride<sp/>to<sp/>match<sp/>numpy<sp/>semantics</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sizes<sp/>=<sp/>std::vector&lt;int64_t&gt;(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.sizes());</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>strides<sp/>=<sp/>std::vector&lt;int64_t&gt;(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.strides());</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>sizes.erase(sizes.begin()<sp/>+<sp/>std::max(dim1,<sp/>dim2));</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>strides.erase(strides.begin()<sp/>+<sp/>std::max(dim1,<sp/>dim2));</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>sizes.erase(sizes.begin()<sp/>+<sp/>std::min(dim1,<sp/>dim2));</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>strides.erase(strides.begin()<sp/>+<sp/>std::min(dim1,<sp/>dim2));</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>sizes.push_back(diag_size);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>strides.push_back(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.stride(dim1)+</highlight><highlight class="keyword">self</highlight><highlight class="normal">.stride(dim2));</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>view<sp/>with<sp/>new<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.as_strided(sizes,<sp/>strides,<sp/>storage_offset);</highlight></codeline>
<codeline lineno="109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal">Tensor<sp/>expand(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>IntList<sp/>size,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>implicit)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[expand<sp/>implicit]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>implicit<sp/>flag<sp/>is<sp/>set<sp/>to<sp/>true<sp/>for<sp/>any<sp/>expand<sp/>calls<sp/>inserted<sp/>by<sp/>broadcast</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>operators<sp/>in<sp/>ExpandUtils.h<sp/>This<sp/>flag<sp/>is<sp/>recorded<sp/>by<sp/>the<sp/>tracer<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>distinguish<sp/>between<sp/>expands<sp/>inserted<sp/>by<sp/>broadcasts<sp/>and<sp/>those<sp/>explicitly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>requested<sp/>by<sp/>the<sp/>user,<sp/>because<sp/>it<sp/>is<sp/>legal<sp/>to<sp/>remove<sp/>implicit<sp/>expands</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>from<sp/>the<sp/>graph,<sp/>but<sp/>not<sp/>legal<sp/>to<sp/>remove<sp/>the<sp/>explicit<sp/>ones.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size.size()<sp/>&lt;<sp/>(size_t)</highlight><highlight class="keyword">self</highlight><highlight class="normal">.dim())<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostringstream<sp/>ss;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;expand(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.type()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;{&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.sizes()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;},<sp/>size=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>size</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;):<sp/>the<sp/>number<sp/>of<sp/>sizes<sp/>provided<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>size.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;must<sp/>be<sp/>greater<sp/>or<sp/>equal<sp/>to<sp/>the<sp/>number<sp/>of<sp/>dimensions<sp/>in<sp/>the<sp/>tensor<sp/>(&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.dim()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(ss.str());</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>std::vector&lt;int64_t&gt;<sp/>expandedSizes;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>std::vector&lt;int64_t&gt;<sp/>expandedStrides;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>std::tie(expandedSizes,<sp/>expandedStrides)<sp/>=<sp/>inferExpandGeometry(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.sizes(),<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.strides(),<sp/>size);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.as_strided(expandedSizes,<sp/>expandedStrides);</highlight></codeline>
<codeline lineno="132"><highlight class="normal">}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal">Tensor<sp/>expand_as(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.expand(other.sizes());</highlight></codeline>
<codeline lineno="136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal">Tensor<sp/>as_strided(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>IntList<sp/>size,<sp/>IntList<sp/>stride,<sp/>int64_t<sp/>storage_offset)<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.type().tensor().set_(*</highlight><highlight class="keyword">self</highlight><highlight class="normal">.storage(),<sp/>storage_offset,<sp/>size,<sp/>stride);</highlight></codeline>
<codeline lineno="140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal">Tensor<sp/>&amp;as_strided_(Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>IntList<sp/>size,<sp/>IntList<sp/>stride,<sp/>int64_t<sp/>storage_offset)<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.set_(*</highlight><highlight class="keyword">self</highlight><highlight class="normal">.storage(),<sp/>storage_offset,<sp/>size,<sp/>stride);</highlight></codeline>
<codeline lineno="144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal">Tensor<sp/>as_strided(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>IntList<sp/>size,<sp/>IntList<sp/>stride)<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>at::as_strided(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>size,<sp/>stride,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.storage_offset());</highlight></codeline>
<codeline lineno="148"><highlight class="normal">}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal">Tensor<sp/>&amp;as_strided_(Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>IntList<sp/>size,<sp/>IntList<sp/>stride)<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>at::as_strided_(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>size,<sp/>stride,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.storage_offset());</highlight></codeline>
<codeline lineno="152"><highlight class="normal">}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal">Tensor<sp/>narrow(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>int64_t<sp/>dim,<sp/>int64_t<sp/>start,<sp/>int64_t<sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>AT_CHECK(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.dim()<sp/>&gt;<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;narrow()<sp/>cannot<sp/>be<sp/>applied<sp/>to<sp/>a<sp/>0-dim<sp/>tensor.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cur_size<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.size(dim);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(start<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>AT_ERROR(</highlight><highlight class="stringliteral">&quot;start<sp/>out<sp/>of<sp/>range&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>USE_TH_SIZE_ZERO_DIM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length<sp/>&lt;=<sp/>0<sp/>||<sp/>start<sp/>&gt;<sp/>cur_size<sp/>-<sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length<sp/>&lt;<sp/>0<sp/>||<sp/>start<sp/>&gt;<sp/>cur_size<sp/>-<sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>AT_ERROR(</highlight><highlight class="stringliteral">&quot;start<sp/>(&quot;</highlight><highlight class="normal">,<sp/>start,<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>+<sp/>length<sp/>(&quot;</highlight><highlight class="normal">,<sp/>length,<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>exceeds<sp/>dimension<sp/>size<sp/>(&quot;</highlight><highlight class="normal">,<sp/>cur_size,<sp/></highlight><highlight class="stringliteral">&quot;).&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>at::slice(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>dim,<sp/>start,<sp/>start<sp/>+<sp/>length,<sp/>1);</highlight></codeline>
<codeline lineno="168"><highlight class="normal">}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal">Tensor<sp/>permute(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>IntList<sp/>dims)<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>nDims<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.dim();</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dims.size()<sp/>!=<sp/>(size_t)nDims)<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>AT_ERROR(</highlight><highlight class="stringliteral">&quot;number<sp/>of<sp/>dims<sp/>don&apos;t<sp/>match<sp/>in<sp/>permute&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>oldSizes<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.sizes();</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>oldStrides<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.strides();</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>std::vector&lt;int64_t&gt;<sp/>newSizes(nDims);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>std::vector&lt;int64_t&gt;<sp/>newStrides(nDims);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>std::vector&lt;bool&gt;<sp/>seen(nDims);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int64_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nDims;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dim<sp/>=<sp/>maybe_wrap_dim(dims[i],<sp/>nDims);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(seen[dim])<sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>AT_ERROR(</highlight><highlight class="stringliteral">&quot;repeated<sp/>dim<sp/>in<sp/>permute&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>seen[dim]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>newSizes[i]<sp/>=<sp/>oldSizes[dim];</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>newStrides[i]<sp/>=<sp/>oldStrides[dim];</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.as_strided(newSizes,<sp/>newStrides);</highlight></codeline>
<codeline lineno="190"><highlight class="normal">}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal">Tensor<sp/>repeat(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>IntList<sp/>repeats)<sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(repeats.size()<sp/>&lt;<sp/>(size_t)</highlight><highlight class="keyword">self</highlight><highlight class="normal">.dim())<sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>AT_ERROR(</highlight><highlight class="stringliteral">&quot;Number<sp/>of<sp/>dimensions<sp/>of<sp/>repeat<sp/>dims<sp/>can<sp/>not<sp/>be<sp/>smaller<sp/>than<sp/>number<sp/>of<sp/>dimensions<sp/>of<sp/>tensor&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>new<sp/>leading<sp/>dimensions<sp/>to<sp/>the<sp/>tensor<sp/>if<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>number<sp/>of<sp/>target<sp/>dimensions<sp/>is<sp/>larger<sp/>than<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>number<sp/>of<sp/>source<sp/>dimensions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>int64_t<sp/>num_new_dimensions<sp/>=<sp/>repeats.size()<sp/>-<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.dim();</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>std::vector&lt;int64_t&gt;<sp/>padded_size(num_new_dimensions,<sp/>1);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>padded_size.insert(padded_size.end(),<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.sizes().begin(),<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.sizes().end());</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>std::vector&lt;int64_t&gt;<sp/>target_size(repeats.size());</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>idx<sp/>=<sp/>0;<sp/>idx<sp/>&lt;<sp/>repeats.size();<sp/>++idx)<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>target_size[idx]<sp/>=<sp/>padded_size[idx]<sp/>*<sp/>repeats[idx];</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>Tensor<sp/>xtensor<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.expand(padded_size);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>Tensor<sp/>result<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.type().tensor(target_size);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>Tensor<sp/>urtensor<sp/>=<sp/>result.type().alias(result);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int64_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>xtensor.dim();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>can&apos;t<sp/>unfold<sp/>with<sp/>step<sp/>0,<sp/>so<sp/>make<sp/>sure<sp/>step<sp/>is<sp/>at<sp/>least<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(it<sp/>doesn&apos;t<sp/>matter<sp/>what<sp/>it<sp/>is<sp/>in<sp/>that<sp/>case,<sp/>because<sp/>the<sp/>size<sp/>is<sp/>0).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>urtensor<sp/>=<sp/>urtensor.unfold(i,<sp/>xtensor.size(i),<sp/>std::max&lt;int64_t&gt;(xtensor.size(i),<sp/>1));</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>urtensor.copy_(xtensor.expand_as(urtensor));</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="221"><highlight class="normal">}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Infers<sp/>the<sp/>size<sp/>of<sp/>a<sp/>dim<sp/>with<sp/>size<sp/>-1,<sp/>if<sp/>it<sp/>exists.<sp/>Also<sp/>checks<sp/>that<sp/>new</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="comment">//<sp/>shape<sp/>is<sp/>compatible<sp/>with<sp/>the<sp/>number<sp/>of<sp/>elements.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::vector&lt;int64_t&gt;<sp/>infer_size(IntList<sp/>shape,<sp/>int64_t<sp/>numel)<sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>res<sp/>=<sp/>shape.vec();</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>int64_t<sp/>newsize<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>infer_dim<sp/>=<sp/><ref refid="classat_1_1optional" kindref="compound">at::optional&lt;int64_t&gt;</ref>();</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int64_t<sp/>dim<sp/>=<sp/>0,<sp/>ndim<sp/>=<sp/>shape.size();<sp/>dim<sp/>!=<sp/>ndim;<sp/>dim++)<sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape[dim]<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(infer_dim)<sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;only<sp/>one<sp/>dimension<sp/>can<sp/>be<sp/>inferred&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>infer_dim<sp/>=<sp/>dim;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape[dim]<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newsize<sp/>*=<sp/>shape[dim];</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>AT_ERROR(</highlight><highlight class="stringliteral">&quot;invalid<sp/>shape<sp/>dimension<sp/>&quot;</highlight><highlight class="normal">,<sp/>shape[dim]);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numel<sp/>==<sp/>newsize<sp/>||<sp/>(infer_dim<sp/>&amp;&amp;<sp/>newsize<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>numel<sp/>%<sp/>newsize<sp/>==<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(infer_dim)<sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>have<sp/>a<sp/>degree<sp/>of<sp/>freedom<sp/>here<sp/>to<sp/>select<sp/>the<sp/>dimension<sp/>size;<sp/>follow<sp/>NumPy<sp/>semantics</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>just<sp/>bail.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>AT_CHECK(newsize<sp/>!=<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;cannot<sp/>reshape<sp/>tensor<sp/>of<sp/>0<sp/>elements<sp/>into<sp/>shape<sp/>&quot;</highlight><highlight class="normal">,<sp/>shape);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res[*infer_dim]<sp/>=<sp/>numel<sp/>/<sp/>newsize;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>USE_TH_SIZE_ZERO_DIM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numel<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Collapse<sp/>zero-element<sp/>shapes<sp/>into<sp/>one<sp/>dimension<sp/>because<sp/>TH<sp/>handles<sp/>zeros</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>sizes<sp/>strangely:<sp/>x.resize_(1,<sp/>0)<sp/>has<sp/>shape<sp/>(1,).<sp/>TODO:<sp/>remove<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>once<sp/>we<sp/>have<sp/>multi-dimensional<sp/>empty<sp/>tensors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{0};</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>std::ostringstream<sp/>ss;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;shape<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>shape<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&apos;<sp/>is<sp/>invalid<sp/>for<sp/>input<sp/>of<sp/>size<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>numel;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(ss.str());</highlight></codeline>
<codeline lineno="263"><highlight class="normal">}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal">Tensor<sp/>reshape(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>IntList<sp/>proposed_shape)<sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.type().is_sparse())<sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>AT_ERROR(</highlight><highlight class="stringliteral">&quot;reshape<sp/>is<sp/>not<sp/>implemented<sp/>for<sp/>sparse<sp/>tensors&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>shape<sp/>=<sp/>infer_size(proposed_shape,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.numel());</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>stride<sp/>=<sp/>THTensor_compute_stride(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.sizes(),<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.strides(),<sp/>shape))<sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.as_strided(shape,<sp/>*stride);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>at::_unsafe_view(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.clone(),<sp/>shape);</highlight></codeline>
<codeline lineno="274"><highlight class="normal">}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal">Tensor<sp/>reshape_as(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.reshape(other.sizes());</highlight></codeline>
<codeline lineno="278"><highlight class="normal">}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal">Tensor<sp/>select(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>int64_t<sp/>dim,<sp/>int64_t<sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>int64_t<sp/>ndim<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.dim();</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>AT_CHECK(ndim<sp/>&gt;<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;select()<sp/>cannot<sp/>be<sp/>applied<sp/>to<sp/>a<sp/>0-dim<sp/>tensor.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>dim<sp/>=<sp/>maybe_wrap_dim(dim,<sp/>ndim);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>size<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.size(dim);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&lt;<sp/>-size<sp/>||<sp/>index<sp/>&gt;=<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;select():<sp/>index<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>index<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>out<sp/>of<sp/>range<sp/>for<sp/>tensor<sp/>of<sp/>size<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.sizes()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>at<sp/>dimension<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>dim;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(ss.str());</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>index<sp/>+=<sp/>size;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sizes<sp/>=<sp/>std::vector&lt;int64_t&gt;(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.sizes());</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>strides<sp/>=<sp/>std::vector&lt;int64_t&gt;(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.strides());</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>storage_offset<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.storage_offset()<sp/>+<sp/>index<sp/>*<sp/>strides[dim];</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/>sizes.erase(sizes.begin()<sp/>+<sp/>dim);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>strides.erase(strides.begin()<sp/>+<sp/>dim);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.as_strided(sizes,<sp/>strides,<sp/>storage_offset);</highlight></codeline>
<codeline lineno="300"><highlight class="normal">}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal">Tensor<sp/>slice(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>int64_t<sp/>dim,<sp/>int64_t<sp/>start,<sp/>int64_t<sp/>end,<sp/>int64_t<sp/>step)<sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>int64_t<sp/>ndim<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.dim();</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/>AT_CHECK(ndim<sp/>&gt;<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;slice()<sp/>cannot<sp/>be<sp/>applied<sp/>to<sp/>a<sp/>0-dim<sp/>tensor.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>dim<sp/>=<sp/>maybe_wrap_dim(dim,<sp/>ndim);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sizes<sp/>=<sp/>std::vector&lt;int64_t&gt;(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.sizes());</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>strides<sp/>=<sp/>std::vector&lt;int64_t&gt;(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.strides());</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(step<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>support<sp/>negative<sp/>strides</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;slice<sp/>step<sp/>must<sp/>be<sp/>positive&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(start<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>start<sp/>+=<sp/>sizes[dim];</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>end<sp/>+=<sp/>sizes[dim];</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(start<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>start<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(start<sp/>&gt;=<sp/>sizes[dim])<sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>start<sp/>=<sp/>sizes[dim];</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end<sp/>&lt;<sp/>start)<sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>end<sp/>=<sp/>start;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end<sp/>&gt;=<sp/>sizes[dim])<sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>end<sp/>=<sp/>sizes[dim];</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>storage_offset<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.storage_offset()<sp/>+<sp/>start<sp/>*<sp/>strides[dim];</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>end<sp/>-<sp/>start;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>USE_TH_SIZE_ZERO_DIM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>currently<sp/>we<sp/>don&apos;t<sp/>have<sp/>support<sp/>for<sp/>0-sized<sp/>dims,<sp/>return<sp/>size<sp/>0<sp/>tensor<sp/>for<sp/>now</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.type().tensor();</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/>sizes[dim]<sp/>=<sp/>(len<sp/>+<sp/>step<sp/>-<sp/>1)<sp/>/<sp/>step;<sp/><sp/></highlight><highlight class="comment">//<sp/>round-up</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/>strides[dim]<sp/>*=<sp/>step;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.as_strided(sizes,<sp/>strides,<sp/>storage_offset);</highlight></codeline>
<codeline lineno="339"><highlight class="normal">}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal">std::vector&lt;Tensor&gt;<sp/>split(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>int64_t<sp/>split_size,<sp/>int64_t<sp/>dim)<sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/>AT_CHECK(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.dim()<sp/>!=<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;split<sp/>expects<sp/>at<sp/>least<sp/>a<sp/>1-dimensional<sp/>tensor&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/>AT_CHECK(split_size<sp/>&gt;=<sp/>0,<sp/><sp/></highlight><highlight class="stringliteral">&quot;split<sp/>expects<sp/>split_size<sp/>be<sp/>non-negative,<sp/>but<sp/>got<sp/>split_size=&quot;</highlight><highlight class="normal">,<sp/>split_size);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>int64_t<sp/>dim_size<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.size(dim);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/>AT_CHECK(split_size<sp/>&gt;<sp/>0<sp/>||<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.size(dim)<sp/>==<sp/>0,</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;split_size<sp/>can<sp/>only<sp/>be<sp/>0<sp/>if<sp/>dimension<sp/>size<sp/>is<sp/>0,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;but<sp/>got<sp/>dimension<sp/>size<sp/>of<sp/>&quot;</highlight><highlight class="normal">,<sp/>dim_size);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>split_size<sp/>is<sp/>0<sp/>and<sp/>dimension<sp/>size<sp/>is<sp/>0,<sp/>there<sp/>is<sp/>1<sp/>split.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/>int64_t<sp/>num_splits<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(split_size<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ensuring<sp/>num_splits<sp/>is<sp/>at<sp/>least<sp/>1<sp/>makes<sp/>consistent<sp/>the<sp/>case<sp/>where<sp/>split_size<sp/>&gt;<sp/>dim_size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(returns<sp/>a<sp/>single<sp/>split).<sp/><sp/>We<sp/>might<sp/>want<sp/>to<sp/>error<sp/>here,<sp/>but<sp/>keep<sp/>it<sp/>for<sp/>BC.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>num_splits<sp/>=<sp/>std::max&lt;int64_t&gt;((dim_size<sp/>+<sp/>split_size<sp/>-<sp/>1)<sp/>/<sp/>split_size,<sp/>1);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>std::vector&lt;Tensor&gt;<sp/>splits(num_splits);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/>int64_t<sp/>last_split_size<sp/>=<sp/>split_size<sp/>-<sp/>(split_size<sp/>*<sp/>num_splits<sp/>-<sp/>dim_size);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int64_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_splits;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>length<sp/>=<sp/>i<sp/>&lt;<sp/>num_splits<sp/>-<sp/>1<sp/>?<sp/>split_size<sp/>:<sp/>last_split_size;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>splits[i]<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.narrow(dim,<sp/>i<sp/>*<sp/>split_size,<sp/>length);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>splits;</highlight></codeline>
<codeline lineno="363"><highlight class="normal">}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal">std::vector&lt;Tensor&gt;<sp/>split_with_sizes(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>IntList<sp/>split_sizes,<sp/>int64_t<sp/>dim)<sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/>AT_CHECK(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.dim()<sp/>!=<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;split<sp/>expects<sp/>at<sp/>least<sp/>a<sp/>1-dimensional<sp/>tensor&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>int64_t<sp/>dim_size<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.size(dim);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/>int64_t<sp/>num_splits<sp/>=<sp/>split_sizes.size();</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/>std::vector&lt;Tensor&gt;<sp/>splits(num_splits);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/>int64_t<sp/>start_idx<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>int64_t<sp/>i;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_splits;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>length<sp/>=<sp/>split_sizes[i];</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::ostringstream<sp/>ss;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;split_with_sizes<sp/>expects<sp/>split_sizes<sp/>have<sp/>only<sp/>non-negative<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;entries,<sp/>but<sp/>got<sp/>split_sizes=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>split_sizes;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(ss.str());</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>splits[i]<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.narrow(dim,<sp/>start_idx,<sp/>length);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>start_idx<sp/>+=<sp/>length;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(start_idx<sp/>!=<sp/>dim_size)<sp/>{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostringstream<sp/>ss;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;split_with_sizes<sp/>expects<sp/>split_sizes<sp/>to<sp/>sum<sp/>exactly<sp/>to<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>dim_size<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>(input<sp/>tensor&apos;s<sp/>size<sp/>at<sp/>dimension<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>dim<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;),<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;but<sp/>got<sp/>split_sizes=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>split_sizes;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(ss.str());</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>splits;</highlight></codeline>
<codeline lineno="392"><highlight class="normal">}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::vector&lt;Tensor&gt;<sp/>get_stack_inputs(TensorList<sp/>tensors,<sp/>int64_t<sp/>dim)<sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/>std::vector&lt;Tensor&gt;<sp/>inputs(tensors.size());</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>tensors.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>inputs[i]<sp/>=<sp/>tensors[i].unsqueeze(dim);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>inputs;</highlight></codeline>
<codeline lineno="400"><highlight class="normal">}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal">Tensor<sp/>stack(TensorList<sp/>tensors,<sp/>int64_t<sp/>dim)<sp/>{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tensors.size()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;stack<sp/>expects<sp/>a<sp/>non-empty<sp/>TensorList&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>dim<sp/>=<sp/>maybe_wrap_dim(dim,<sp/>tensors[0].dim()<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>at::cat(get_stack_inputs(tensors,<sp/>dim),<sp/>dim);</highlight></codeline>
<codeline lineno="408"><highlight class="normal">}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal">Tensor&amp;<sp/>stack_out(Tensor&amp;<sp/>result,<sp/>TensorList<sp/>tensors,<sp/>int64_t<sp/>dim)<sp/>{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tensors.size()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;stack<sp/>expects<sp/>a<sp/>non-empty<sp/>TensorList&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/>dim<sp/>=<sp/>maybe_wrap_dim(dim,<sp/>tensors[0].dim()<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>at::cat_out(result,<sp/>get_stack_inputs(tensors,<sp/>dim),<sp/>dim);</highlight></codeline>
<codeline lineno="416"><highlight class="normal">}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Tensor<sp/>&amp;<sp/>sparse_transpose_(Tensor<sp/>&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>int64_t<sp/>dim0,<sp/>int64_t<sp/>dim1)<sp/>{</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/>int64_t<sp/>nsparseDims<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">._sparseDims();</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dim0<sp/>&gt;=<sp/>nsparseDims<sp/>||<sp/>dim1<sp/>&gt;=<sp/>nsparseDims)<sp/>{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>AT_ERROR(</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;sparse<sp/>transpose:<sp/>transposed<sp/>dimensions<sp/>must<sp/>be<sp/>sparse<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Got<sp/>sparseDims:<sp/>&quot;</highlight><highlight class="normal">,<sp/>nsparseDims,<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>d0:<sp/>&quot;</highlight><highlight class="normal">,<sp/>dim0,<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>d1:<sp/>&quot;</highlight><highlight class="normal">,<sp/>dim1);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">self</highlight><highlight class="normal">._indices().numel()<sp/>==<sp/>0<sp/>&amp;&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">._values().numel()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int64_t&gt;<sp/>sizes(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.sizes());</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>std::swap(sizes[dim0],<sp/>sizes[dim1]);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.sparse_raw_resize_(sizes,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">._sparseDims(),<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">._denseDims());</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>indices<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">._indices();</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>row0<sp/>=<sp/>indices.select(0,<sp/>dim0);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>row1<sp/>=<sp/>indices.select(0,<sp/>dim1);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>swap<sp/>row0<sp/>and<sp/>row1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/>at::zeros_like(row0);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp.copy_(row0);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>row0.copy_(row1);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>row1.copy_(tmp);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int64_t&gt;<sp/>sizes(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.sizes());</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>std::swap(sizes[dim0],<sp/>sizes[dim1]);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.sparse_raw_resize_(sizes,<sp/>-1,<sp/>-1);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="447"><highlight class="normal">}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal">Tensor<sp/>&amp;<sp/>transpose_(Tensor<sp/>&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>int64_t<sp/>dim0,<sp/>int64_t<sp/>dim1)<sp/>{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ndims<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.dim();</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/>dim0<sp/>=<sp/>maybe_wrap_dim(dim0,<sp/>ndims);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/>dim1<sp/>=<sp/>maybe_wrap_dim(dim1,<sp/>ndims);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dim0<sp/>==<sp/>dim1)<sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.is_sparse())<sp/>{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sparse_transpose_(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>dim0,<sp/>dim1);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/>std::vector&lt;int64_t&gt;<sp/>strides(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.strides());</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/>std::vector&lt;int64_t&gt;<sp/>sizes(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.sizes());</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/>std::swap(strides[dim0],<sp/>strides[dim1]);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/>std::swap(sizes[dim0],<sp/>sizes[dim1]);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.as_strided_(sizes,<sp/>strides);</highlight></codeline>
<codeline lineno="466"><highlight class="normal">}</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal">Tensor<sp/>transpose(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor<sp/>&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>int64_t<sp/>dim0,<sp/>int64_t<sp/>dim1)<sp/>{</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ndims<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.dim();</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/>dim0<sp/>=<sp/>maybe_wrap_dim(dim0,<sp/>ndims);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/>dim1<sp/>=<sp/>maybe_wrap_dim(dim1,<sp/>ndims);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dim0<sp/>==<sp/>dim1)<sp/>{</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.is_sparse())<sp/>{</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>Tensor<sp/>self_clone<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.clone();<sp/><sp/></highlight><highlight class="comment">//<sp/>yes,<sp/>this<sp/>is<sp/>what<sp/>THS<sp/>does</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sparse_transpose_(self_clone,<sp/>dim0,<sp/>dim1);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/>std::vector&lt;int64_t&gt;<sp/>strides(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.strides());</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/>std::vector&lt;int64_t&gt;<sp/>sizes(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.sizes());</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/>std::swap(strides[dim0],<sp/>strides[dim1]);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/>std::swap(sizes[dim0],<sp/>sizes[dim1]);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.as_strided(sizes,<sp/>strides);</highlight></codeline>
<codeline lineno="486"><highlight class="normal">}</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>check_t(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fn)<sp/>{</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.is_sparse())<sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>sparseDims<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">._sparseDims();</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>denseDims<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">._denseDims();</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(sparseDims<sp/>==<sp/>2<sp/>&amp;&amp;<sp/>denseDims<sp/>==<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>AT_ERROR(fn,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>expects<sp/>a<sp/>tensor<sp/>with<sp/>2<sp/>sparse<sp/>and<sp/>0<sp/>dense<sp/>dimensions,<sp/>but<sp/>got<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sparseDims,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>sparse<sp/>and<sp/>&quot;</highlight><highlight class="normal">,<sp/>denseDims,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>dense<sp/>dimensions&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.dim()<sp/>!=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>AT_ERROR(fn,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>expects<sp/>a<sp/>2D<sp/>tensor,<sp/>but<sp/>self<sp/>is<sp/>&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.dim(),<sp/></highlight><highlight class="stringliteral">&quot;D&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="499"><highlight class="normal">}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal">Tensor<sp/>t(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor<sp/>&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/>check_t(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;t()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.transpose(0,<sp/>1);</highlight></codeline>
<codeline lineno="504"><highlight class="normal">}</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal">Tensor<sp/>&amp;<sp/>t_(Tensor<sp/>&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/>check_t(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;t_()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.transpose_(0,<sp/>1);</highlight></codeline>
<codeline lineno="509"><highlight class="normal">}</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal">std::tuple&lt;std::vector&lt;int64_t&gt;,<sp/>std::vector&lt;int64_t&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="512"><highlight class="normal">inferSqueezeGeometry(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor<sp/>&amp;tensor)<sp/>{</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/>std::vector&lt;int64_t&gt;<sp/>sizes;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/>std::vector&lt;int64_t&gt;<sp/>strides;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(int64_t<sp/>d<sp/>=<sp/>0;<sp/>d<sp/>&lt;<sp/>tensor.dim();<sp/>d++)<sp/>{</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tensor.sizes()[d]<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sizes.push_back(tensor.sizes()[d]);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>strides.push_back(tensor.strides()[d]);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_tuple(sizes,<sp/>strides);</highlight></codeline>
<codeline lineno="524"><highlight class="normal">}</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal">std::tuple&lt;std::vector&lt;int64_t&gt;,<sp/>std::vector&lt;int64_t&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="527"><highlight class="normal">inferSqueezeGeometry(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/>tensor,<sp/>int64_t<sp/>dim)<sp/>{</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/>std::vector&lt;int64_t&gt;<sp/>sizes;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/>std::vector&lt;int64_t&gt;<sp/>strides;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(int64_t<sp/>d<sp/>=<sp/>0;<sp/>d<sp/>&lt;<sp/>tensor.dim();<sp/>d++)<sp/>{</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(d<sp/>!=<sp/>dim<sp/>||<sp/>tensor.sizes()[dim]<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sizes.push_back(tensor.sizes()[d]);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>strides.push_back(tensor.strides()[d]);</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_tuple(sizes,<sp/>strides);</highlight></codeline>
<codeline lineno="538"><highlight class="normal">}</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal">std::tuple&lt;std::vector&lt;int64_t&gt;,<sp/>std::vector&lt;int64_t&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="541"><highlight class="normal">inferUnsqueezeGeometry(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/>tensor,<sp/>int64_t<sp/>dim)<sp/>{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>USE_TH_SIZE_ZERO_DIM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tensor.numel()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;cannot<sp/>unsqueeze<sp/>empty<sp/>tensor&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/>std::vector&lt;int64_t&gt;<sp/>sizes(tensor.sizes());</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/>std::vector&lt;int64_t&gt;<sp/>strides(tensor.strides());</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/>int64_t<sp/>new_stride<sp/>=<sp/>dim<sp/>&gt;=<sp/>tensor.dim()<sp/>?<sp/>1<sp/>:<sp/>sizes[dim]<sp/>*<sp/>strides[dim];</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/>sizes.insert(sizes.begin()<sp/>+<sp/>dim,<sp/>1);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/>strides.insert(strides.begin()<sp/>+<sp/>dim,<sp/>new_stride);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_tuple(sizes,<sp/>strides);</highlight></codeline>
<codeline lineno="554"><highlight class="normal">}</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal">Tensor<sp/>squeeze(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>g<sp/>=<sp/>inferSqueezeGeometry(</highlight><highlight class="keyword">self</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.as_strided(std::get&lt;0&gt;(g),<sp/>std::get&lt;1&gt;(g));</highlight></codeline>
<codeline lineno="559"><highlight class="normal">}</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal">Tensor<sp/>squeeze(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>int64_t<sp/>dim)<sp/>{</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/>int64_t<sp/>dims<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.dim();</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/>dim<sp/>=<sp/>maybe_wrap_dim(dim,<sp/>dims);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dims<sp/>==<sp/>0<sp/>||<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.sizes()[dim]<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.as_strided(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.sizes().vec(),<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.strides().vec());</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>g<sp/>=<sp/>inferSqueezeGeometry(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>dim);</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.as_strided(std::get&lt;0&gt;(g),<sp/>std::get&lt;1&gt;(g));</highlight></codeline>
<codeline lineno="570"><highlight class="normal">}</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal">Tensor<sp/>&amp;<sp/>squeeze_(Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>g<sp/>=<sp/>inferSqueezeGeometry(</highlight><highlight class="keyword">self</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.as_strided_(std::get&lt;0&gt;(g),<sp/>std::get&lt;1&gt;(g));</highlight></codeline>
<codeline lineno="575"><highlight class="normal">}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal">Tensor<sp/>&amp;<sp/>squeeze_(Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>int64_t<sp/>dim)<sp/>{</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/>int64_t<sp/>dims<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.dim();</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/>dim<sp/>=<sp/>maybe_wrap_dim(dim,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.dim());</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dims<sp/>==<sp/>0<sp/>||<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.sizes()[dim]<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.as_strided_(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.sizes().vec(),<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.strides().vec());</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>g<sp/>=<sp/>inferSqueezeGeometry(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>dim);</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.as_strided_(std::get&lt;0&gt;(g),<sp/>std::get&lt;1&gt;(g));</highlight></codeline>
<codeline lineno="586"><highlight class="normal">}</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight><highlight class="comment">//<sp/>_unsafe_view()<sp/>differs<sp/>from<sp/>view()<sp/>in<sp/>that<sp/>the<sp/>returned<sp/>tensor<sp/>isn&apos;t<sp/>treated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight><highlight class="comment">//<sp/>as<sp/>a<sp/>view<sp/>for<sp/>the<sp/>purposes<sp/>of<sp/>automatic<sp/>differentiation.<sp/>(It&apos;s<sp/>not<sp/>listed<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight><highlight class="comment">//<sp/>VIEW_FUNCTIONS<sp/>in<sp/>gen_autograd.py).<sp/><sp/>It&apos;s<sp/>only<sp/>safe<sp/>to<sp/>use<sp/>if<sp/>the<sp/>`self`<sp/>tensor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>temporary.<sp/>For<sp/>example,<sp/>the<sp/>viewed<sp/>tensor<sp/>here<sp/>(a<sp/>+<sp/>b)<sp/>is<sp/>discarded<sp/>immediately</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight><highlight class="comment">//<sp/>after<sp/>viewing:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>res<sp/>=<sp/>at::_unsafe_view(a<sp/>+<sp/>b,<sp/>size);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>a<sp/>hack<sp/>because<sp/>in-place<sp/>operations<sp/>on<sp/>tensors<sp/>treated<sp/>like<sp/>views</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight><highlight class="comment">//<sp/>can<sp/>be<sp/>much<sp/>more<sp/>expensive<sp/>than<sp/>the<sp/>same<sp/>operations<sp/>on<sp/>non-view<sp/>tensors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal">Tensor<sp/>_unsafe_view(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>IntList<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.view(size);</highlight></codeline>
<codeline lineno="600"><highlight class="normal">}</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal">Tensor<sp/>unsqueeze(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>int64_t<sp/>dim)<sp/>{</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/>dim<sp/>=<sp/>maybe_wrap_dim(dim,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.dim()<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>g<sp/>=<sp/>inferUnsqueezeGeometry(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>dim);</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.as_strided(std::get&lt;0&gt;(g),<sp/>std::get&lt;1&gt;(g));</highlight></codeline>
<codeline lineno="607"><highlight class="normal">}</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal">Tensor<sp/>&amp;<sp/>unsqueeze_(Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>int64_t<sp/>dim)<sp/>{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/>dim<sp/>=<sp/>maybe_wrap_dim(dim,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.dim()<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>g<sp/>=<sp/>inferUnsqueezeGeometry(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>dim);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.as_strided_(std::get&lt;0&gt;(g),<sp/>std::get&lt;1&gt;(g));</highlight></codeline>
<codeline lineno="614"><highlight class="normal">}</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal">Tensor<sp/>flatten(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>int64_t<sp/>start_dim,<sp/>int64_t<sp/>end_dim)<sp/>{</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/>start_dim<sp/>=<sp/>maybe_wrap_dim(start_dim,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.dim());</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/>end_dim<sp/>=<sp/>maybe_wrap_dim(end_dim,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.dim());</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/>AT_CHECK(start_dim<sp/>&lt;=<sp/>end_dim,<sp/></highlight><highlight class="stringliteral">&quot;flatten()<sp/>has<sp/>invalid<sp/>args:<sp/>start_dim<sp/>cannot<sp/>come<sp/>after<sp/>end_dim&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(start_dim<sp/>==<sp/>end_dim)<sp/>{</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>don&apos;t<sp/>want<sp/>to<sp/>infer_size<sp/>on<sp/>the<sp/>entire<sp/>shape,<sp/>because<sp/>that<sp/>can<sp/>give<sp/>us<sp/>an<sp/>extra<sp/>degree</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>freedom<sp/>we<sp/>don&apos;t<sp/>want;<sp/>for<sp/>example,<sp/>consider<sp/>shape<sp/>[0,<sp/>1,<sp/>3,<sp/>0],<sp/>with<sp/>start_dim=1,<sp/>end_dim=2.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>It&apos;s<sp/>clear<sp/>we<sp/>want<sp/>result<sp/>shape<sp/>[0,<sp/>3,<sp/>0]<sp/>but<sp/>passing<sp/>[0,<sp/>-1,<sp/>0]<sp/>to<sp/>infer_size<sp/>means<sp/>the<sp/>-1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>can<sp/>take<sp/>on<sp/>any<sp/>value<sp/>and<sp/>satisfy<sp/>the<sp/>constraints.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>slice_numel<sp/>=<sp/>prod_intlist(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.sizes().slice(start_dim,<sp/>end_dim<sp/>-<sp/>start_dim<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/>std::vector&lt;int64_t&gt;<sp/>shape;</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/>shape.reserve(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.dim()<sp/>-<sp/>end_dim<sp/>+<sp/>start_dim);</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int64_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>start_dim;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/>shape.push_back(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.size(i));</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/>shape.push_back(slice_numel);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int64_t<sp/>i<sp/>=<sp/>end_dim<sp/>+<sp/>1;<sp/>i<sp/>&lt;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.dim();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/>shape.push_back(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.size(i));</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.reshape(shape);</highlight></codeline>
<codeline lineno="641"><highlight class="normal">}</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal">Tensor<sp/>view_as(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.view(other.sizes());</highlight></codeline>
<codeline lineno="645"><highlight class="normal">}</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal">int64_t<sp/>numel(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.pImpl-&gt;numel();</highlight></codeline>
<codeline lineno="649"><highlight class="normal">}</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal">std::vector&lt;Tensor&gt;<sp/>unbind(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor<sp/>&amp;</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>int64_t<sp/>dim)<sp/>{</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/>dim<sp/>=<sp/>maybe_wrap_dim(dim,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.dim());</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/>int64_t<sp/>size<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.size(dim);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/>std::vector&lt;Tensor&gt;<sp/>tensors(size);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/>tensors[i]<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.select(dim,<sp/>i);</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tensors;</highlight></codeline>
<codeline lineno="659"><highlight class="normal">}</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal">std::vector&lt;Tensor&gt;<sp/>meshgrid(TensorList<sp/>tensors)<sp/>{</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/>int64_t<sp/>size<sp/>=<sp/>tensors.size();</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/>AT_CHECK(size<sp/>&gt;<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;meshgrid<sp/>expects<sp/>a<sp/>non-empty<sp/>TensorList&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/>std::vector&lt;int64_t&gt;<sp/>shape(size);</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(int64_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(tensors[i].dim())<sp/>{</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shape[i]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shape[i]<sp/>=<sp/>tensors[i].size(0);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>AT_ERROR(</highlight><highlight class="stringliteral">&quot;Expected<sp/>scalar<sp/>or<sp/>1D<sp/>tensor<sp/>in<sp/>the<sp/>tensor<sp/>list<sp/>but<sp/>got:<sp/>&quot;</highlight><highlight class="normal">,<sp/>tensors[i]);</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/>std::vector&lt;Tensor&gt;<sp/>grids;</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(int64_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int64_t&gt;<sp/>view_shape(size,<sp/>1);</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/>view_shape[i]<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/>grids.push_back(tensors[i].view(view_shape).expand(shape));</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>grids;</highlight></codeline>
<codeline lineno="684"><highlight class="normal">}</highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal">}</highlight></codeline>
<codeline lineno="687"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/TensorShape.cpp"/>
  </compounddef>
</doxygen>
