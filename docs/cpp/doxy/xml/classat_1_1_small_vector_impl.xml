<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="classat_1_1_small_vector_impl" kind="class" language="C++" prot="public">
    <compoundname>at::SmallVectorImpl</compoundname>
    <basecompoundref refid="classat_1_1_small_vector_template_base" prot="public" virt="non-virtual">at::SmallVectorTemplateBase&lt; T, std::is_trivially_copyable&lt; T &gt;::value &gt;</basecompoundref>
    <derivedcompoundref refid="classat_1_1_small_vector" prot="public" virt="non-virtual">at::SmallVector&lt; T, N &gt;</derivedcompoundref>
    <includes refid="_small_vector_8h" local="no">SmallVector.h</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classat_1_1_small_vector_impl_1a28d1fb96e0fd3837365c608da4d77443" prot="private" static="no">
        <type><ref refid="classat_1_1_small_vector_template_base" kindref="compound">SmallVectorTemplateBase</ref>&lt; T, std::is_trivially_copyable&lt; T &gt;::value &gt;</type>
        <definition>using at::SmallVectorImpl&lt; T &gt;::SuperClass =  SmallVectorTemplateBase&lt;T, std::is_trivially_copyable&lt; T &gt;::value&gt;</definition>
        <argsstring></argsstring>
        <name>SuperClass</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.h" line="342" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.h" bodystart="342" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classat_1_1_small_vector_impl_1a7bc797e70f8f3f80a114804f5571f069" prot="public" static="no">
        <type>typename SuperClass::iterator</type>
        <definition>using at::SmallVectorImpl&lt; T &gt;::iterator =  typename SuperClass::iterator</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.h" line="345" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.h" bodystart="345" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classat_1_1_small_vector_impl_1a2ead74026eb47667fcf737ca240f0a9e" prot="public" static="no">
        <type>typename SuperClass::const_iterator</type>
        <definition>using at::SmallVectorImpl&lt; T &gt;::const_iterator =  typename SuperClass::const_iterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.h" line="346" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.h" bodystart="346" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classat_1_1_small_vector_impl_1a61442122f5bebe6f9b4237082e902eb6" prot="public" static="no">
        <type>typename SuperClass::size_type</type>
        <definition>using at::SmallVectorImpl&lt; T &gt;::size_type =  typename SuperClass::size_type</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.h" line="347" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.h" bodystart="347" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classat_1_1_small_vector_impl_1ac2f0fafaf8ff62fd5de7bbeea478cbaa" prot="protected" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>at::SmallVectorImpl&lt; T &gt;::SmallVectorImpl</definition>
        <argsstring>(unsigned N)</argsstring>
        <name>SmallVectorImpl</name>
        <param>
          <type>unsigned</type>
          <declname>N</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.h" line="351" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.h" bodystart="351" bodyend="353"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classat_1_1_small_vector_impl_1aba0675352afdff71b3a2703e01bc4808" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>at::SmallVectorImpl&lt; T &gt;::SmallVectorImpl</definition>
        <argsstring>(const SmallVectorImpl &amp;)=delete</argsstring>
        <name>SmallVectorImpl</name>
        <param>
          <type>const <ref refid="classat_1_1_small_vector_impl" kindref="compound">SmallVectorImpl</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.h" line="356" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classat_1_1_small_vector_impl_1afaebad699159fd3e5989c28e3d4831f8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>at::SmallVectorImpl&lt; T &gt;::~SmallVectorImpl</definition>
        <argsstring>()</argsstring>
        <name>~SmallVectorImpl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.h" line="358" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.h" bodystart="358" bodyend="365"/>
      </memberdef>
      <memberdef kind="function" id="classat_1_1_small_vector_impl_1a35304c297d3a9d286a874aef44c7ddee" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void at::SmallVectorImpl&lt; T &gt;::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.h" line="367" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.h" bodystart="367" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="classat_1_1_small_vector_impl_1ac3caea35cfb3cafa68ac030188a32575" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void at::SmallVectorImpl&lt; T &gt;::resize</definition>
        <argsstring>(size_type N)</argsstring>
        <name>resize</name>
        <param>
          <type>size_type</type>
          <declname>N</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.h" line="372" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.h" bodystart="372" bodyend="384"/>
      </memberdef>
      <memberdef kind="function" id="classat_1_1_small_vector_impl_1a8c471263560b5f7d9691a42a3a8a829e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void at::SmallVectorImpl&lt; T &gt;::resize</definition>
        <argsstring>(size_type N, const T &amp;NV)</argsstring>
        <name>resize</name>
        <param>
          <type>size_type</type>
          <declname>N</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>NV</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.h" line="386" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.h" bodystart="386" bodyend="396"/>
      </memberdef>
      <memberdef kind="function" id="classat_1_1_small_vector_impl_1a9d5e636dde8c44ab5b61c301af81e243" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void at::SmallVectorImpl&lt; T &gt;::reserve</definition>
        <argsstring>(size_type N)</argsstring>
        <name>reserve</name>
        <param>
          <type>size_type</type>
          <declname>N</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.h" line="398" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.h" bodystart="398" bodyend="401"/>
      </memberdef>
      <memberdef kind="function" id="classat_1_1_small_vector_impl_1aef15ae19ca324467e9dcb249aa584767" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T at::SmallVectorImpl&lt; T &gt;::pop_back_val</definition>
        <argsstring>()</argsstring>
        <name>pop_back_val</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.h" line="403" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.h" bodystart="403" bodyend="407"/>
      </memberdef>
      <memberdef kind="function" id="classat_1_1_small_vector_impl_1ae2a4be70fb17f2908e38806a3065a7c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void at::SmallVectorImpl&lt; T &gt;::swap</definition>
        <argsstring>(SmallVectorImpl &amp;RHS)</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="classat_1_1_small_vector_impl" kindref="compound">SmallVectorImpl</ref> &amp;</type>
          <declname>RHS</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.h" line="409" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.h" bodystart="714" bodyend="749"/>
      </memberdef>
      <memberdef kind="function" id="classat_1_1_small_vector_impl_1ac14b6473b0fb86f09e3388a547b5fbc1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename in_iter</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;std::is_convertible&lt;                typename std::iterator_traits&lt;in_iter&gt;::iterator_category,                std::input_iterator_tag&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void at::SmallVectorImpl&lt; T &gt;::append</definition>
        <argsstring>(in_iter in_start, in_iter in_end)</argsstring>
        <name>append</name>
        <param>
          <type>in_iter</type>
          <declname>in_start</declname>
        </param>
        <param>
          <type>in_iter</type>
          <declname>in_end</declname>
        </param>
        <briefdescription>
<para>Add the specified range to the end of the <ref refid="classat_1_1_small_vector" kindref="compound">SmallVector</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.h" line="416" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.h" bodystart="416" bodyend="425"/>
      </memberdef>
      <memberdef kind="function" id="classat_1_1_small_vector_impl_1a0a052f0f97fda125785595bd26b2840a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void at::SmallVectorImpl&lt; T &gt;::append</definition>
        <argsstring>(size_type NumInputs, const T &amp;Elt)</argsstring>
        <name>append</name>
        <param>
          <type>size_type</type>
          <declname>NumInputs</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>Elt</declname>
        </param>
        <briefdescription>
<para>Add the specified range to the end of the <ref refid="classat_1_1_small_vector" kindref="compound">SmallVector</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.h" line="428" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.h" bodystart="428" bodyend="436"/>
      </memberdef>
      <memberdef kind="function" id="classat_1_1_small_vector_impl_1ab957c22e419d0ac752a8c22fc4fe3d63" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void at::SmallVectorImpl&lt; T &gt;::append</definition>
        <argsstring>(std::initializer_list&lt; T &gt; IL)</argsstring>
        <name>append</name>
        <param>
          <type>std::initializer_list&lt; T &gt;</type>
          <declname>IL</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.h" line="438" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.h" bodystart="438" bodyend="440"/>
      </memberdef>
      <memberdef kind="function" id="classat_1_1_small_vector_impl_1ab85b7aba2e1f05c97aa8e3c0771669f9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void at::SmallVectorImpl&lt; T &gt;::assign</definition>
        <argsstring>(size_type NumElts, const T &amp;Elt)</argsstring>
        <name>assign</name>
        <param>
          <type>size_type</type>
          <declname>NumElts</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>Elt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.h" line="445" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.h" bodystart="445" bodyend="451"/>
      </memberdef>
      <memberdef kind="function" id="classat_1_1_small_vector_impl_1a7834664788934ae9fad4fc77a71b79a1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename in_iter</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;std::is_convertible&lt;                typename std::iterator_traits&lt;in_iter&gt;::iterator_category,                std::input_iterator_tag&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void at::SmallVectorImpl&lt; T &gt;::assign</definition>
        <argsstring>(in_iter in_start, in_iter in_end)</argsstring>
        <name>assign</name>
        <param>
          <type>in_iter</type>
          <declname>in_start</declname>
        </param>
        <param>
          <type>in_iter</type>
          <declname>in_end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.h" line="457" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.h" bodystart="457" bodyend="460"/>
      </memberdef>
      <memberdef kind="function" id="classat_1_1_small_vector_impl_1a9ac81ab85af8fbc22f2216ee414b33f2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void at::SmallVectorImpl&lt; T &gt;::assign</definition>
        <argsstring>(std::initializer_list&lt; T &gt; IL)</argsstring>
        <name>assign</name>
        <param>
          <type>std::initializer_list&lt; T &gt;</type>
          <declname>IL</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.h" line="462" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.h" bodystart="462" bodyend="465"/>
      </memberdef>
      <memberdef kind="function" id="classat_1_1_small_vector_impl_1a59a325cf8199b2cc9eef7e5f4b33121d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator at::SmallVectorImpl&lt; T &gt;::erase</definition>
        <argsstring>(const_iterator CI)</argsstring>
        <name>erase</name>
        <param>
          <type>const_iterator</type>
          <declname>CI</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.h" line="467" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.h" bodystart="467" bodyend="480"/>
      </memberdef>
      <memberdef kind="function" id="classat_1_1_small_vector_impl_1af119627fe241f4dc8a48a08119abe42d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator at::SmallVectorImpl&lt; T &gt;::erase</definition>
        <argsstring>(const_iterator CS, const_iterator CE)</argsstring>
        <name>erase</name>
        <param>
          <type>const_iterator</type>
          <declname>CS</declname>
        </param>
        <param>
          <type>const_iterator</type>
          <declname>CE</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.h" line="482" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.h" bodystart="482" bodyend="498"/>
      </memberdef>
      <memberdef kind="function" id="classat_1_1_small_vector_impl_1a8c175c25ee9365479bcb13e98d62fef7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator at::SmallVectorImpl&lt; T &gt;::insert</definition>
        <argsstring>(iterator I, T &amp;&amp;Elt)</argsstring>
        <name>insert</name>
        <param>
          <type>iterator</type>
          <declname>I</declname>
        </param>
        <param>
          <type>T &amp;&amp;</type>
          <declname>Elt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.h" line="500" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.h" bodystart="500" bodyend="528"/>
      </memberdef>
      <memberdef kind="function" id="classat_1_1_small_vector_impl_1a968812e3a05cb712b4df6ffc5e45f713" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator at::SmallVectorImpl&lt; T &gt;::insert</definition>
        <argsstring>(iterator I, const T &amp;Elt)</argsstring>
        <name>insert</name>
        <param>
          <type>iterator</type>
          <declname>I</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>Elt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.h" line="530" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.h" bodystart="530" bodyend="557"/>
      </memberdef>
      <memberdef kind="function" id="classat_1_1_small_vector_impl_1aa3a7b362bebe105bd81ade7b09082417" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator at::SmallVectorImpl&lt; T &gt;::insert</definition>
        <argsstring>(iterator I, size_type NumToInsert, const T &amp;Elt)</argsstring>
        <name>insert</name>
        <param>
          <type>iterator</type>
          <declname>I</declname>
        </param>
        <param>
          <type>size_type</type>
          <declname>NumToInsert</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>Elt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.h" line="559" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.h" bodystart="559" bodyend="608"/>
      </memberdef>
      <memberdef kind="function" id="classat_1_1_small_vector_impl_1abd527ec4eb4466664ecf661c46b5dd90" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ItTy</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;std::is_convertible&lt;                typename std::iterator_traits&lt;ItTy&gt;::iterator_category,                std::input_iterator_tag&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>iterator</type>
        <definition>iterator at::SmallVectorImpl&lt; T &gt;::insert</definition>
        <argsstring>(iterator I, ItTy From, ItTy To)</argsstring>
        <name>insert</name>
        <param>
          <type>iterator</type>
          <declname>I</declname>
        </param>
        <param>
          <type>ItTy</type>
          <declname>From</declname>
        </param>
        <param>
          <type>ItTy</type>
          <declname>To</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.h" line="614" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.h" bodystart="614" bodyend="668"/>
      </memberdef>
      <memberdef kind="function" id="classat_1_1_small_vector_impl_1add3f8e5481c6bb63bb0cae630db97ba0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void at::SmallVectorImpl&lt; T &gt;::insert</definition>
        <argsstring>(iterator I, std::initializer_list&lt; T &gt; IL)</argsstring>
        <name>insert</name>
        <param>
          <type>iterator</type>
          <declname>I</declname>
        </param>
        <param>
          <type>std::initializer_list&lt; T &gt;</type>
          <declname>IL</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.h" line="670" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.h" bodystart="670" bodyend="672"/>
      </memberdef>
      <memberdef kind="function" id="classat_1_1_small_vector_impl_1a9adfe90e602969e1c1409c4fca42f413" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>ArgTypes</declname>
            <defname>ArgTypes</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void at::SmallVectorImpl&lt; T &gt;::emplace_back</definition>
        <argsstring>(ArgTypes &amp;&amp;... Args)</argsstring>
        <name>emplace_back</name>
        <param>
          <type>ArgTypes &amp;&amp;...</type>
          <declname>Args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.h" line="674" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.h" bodystart="674" bodyend="679"/>
      </memberdef>
      <memberdef kind="function" id="classat_1_1_small_vector_impl_1ae46655aae23e9ee1c187f61e41d9278e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classat_1_1_small_vector_impl" kindref="compound">SmallVectorImpl</ref> &amp;</type>
        <definition>SmallVectorImpl&lt; T &gt; &amp; at::SmallVectorImpl&lt; T &gt;::operator=</definition>
        <argsstring>(const SmallVectorImpl &amp;RHS)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classat_1_1_small_vector_impl" kindref="compound">SmallVectorImpl</ref> &amp;</type>
          <declname>RHS</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.h" line="681" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.h" bodystart="753" bodyend="798"/>
      </memberdef>
      <memberdef kind="function" id="classat_1_1_small_vector_impl_1ad9e1d81e62418caf4de470be0df7cd64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classat_1_1_small_vector_impl" kindref="compound">SmallVectorImpl</ref> &amp;</type>
        <definition>SmallVectorImpl&lt; T &gt; &amp; at::SmallVectorImpl&lt; T &gt;::operator=</definition>
        <argsstring>(SmallVectorImpl &amp;&amp;RHS)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classat_1_1_small_vector_impl" kindref="compound">SmallVectorImpl</ref> &amp;&amp;</type>
          <declname>RHS</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.h" line="683" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.h" bodystart="801" bodyend="860"/>
      </memberdef>
      <memberdef kind="function" id="classat_1_1_small_vector_impl_1a18ca296a161e21b2be0a45ec2ca1e0d3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool at::SmallVectorImpl&lt; T &gt;::operator==</definition>
        <argsstring>(const SmallVectorImpl &amp;RHS) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classat_1_1_small_vector_impl" kindref="compound">SmallVectorImpl</ref> &amp;</type>
          <declname>RHS</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.h" line="685" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.h" bodystart="685" bodyend="688"/>
      </memberdef>
      <memberdef kind="function" id="classat_1_1_small_vector_impl_1a2b51f6d7185792a5fc025c2ebafe73de" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool at::SmallVectorImpl&lt; T &gt;::operator!=</definition>
        <argsstring>(const SmallVectorImpl &amp;RHS) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classat_1_1_small_vector_impl" kindref="compound">SmallVectorImpl</ref> &amp;</type>
          <declname>RHS</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.h" line="689" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.h" bodystart="689" bodyend="691"/>
      </memberdef>
      <memberdef kind="function" id="classat_1_1_small_vector_impl_1a4be2199af8fe348be97442f573342943" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool at::SmallVectorImpl&lt; T &gt;::operator&lt;</definition>
        <argsstring>(const SmallVectorImpl &amp;RHS) const</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classat_1_1_small_vector_impl" kindref="compound">SmallVectorImpl</ref> &amp;</type>
          <declname>RHS</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.h" line="693" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.h" bodystart="693" bodyend="696"/>
      </memberdef>
      <memberdef kind="function" id="classat_1_1_small_vector_impl_1a3ff1d2c50693607fd22026466d35d279" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void at::SmallVectorImpl&lt; T &gt;::set_size</definition>
        <argsstring>(size_type N)</argsstring>
        <name>set_size</name>
        <param>
          <type>size_type</type>
          <declname>N</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the array size to <computeroutput>N</computeroutput>, which the current array must have enough capacity for.</para><para>This does not construct or destroy any elements in the vector.</para><para>Clients can use this in conjunction with <ref refid="classat_1_1_small_vector_template_common_1a82a3c61d858b9f58a551016e539f4f63" kindref="member">capacity()</ref> to write past the end of the buffer when they know that more elements are available, and only update the size later. This avoids the cost of value initializing elements which will only be overwritten. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.h" line="707" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.h" bodystart="707" bodyend="710"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This class consists of common code factored out of the <ref refid="classat_1_1_small_vector" kindref="compound">SmallVector</ref> class to reduce code duplication based on the <ref refid="classat_1_1_small_vector" kindref="compound">SmallVector</ref> &apos;N&apos; template parameter. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="608">
        <label>at::SmallVector&lt; T &gt;</label>
        <link refid="classat_1_1_small_vector"/>
        <childnode refid="604" relation="public-inheritance">
        </childnode>
      </node>
      <node id="605">
        <label>at::SmallVectorTemplateBase&lt; T, std::is_trivially_copyable&lt; T &gt;::value &gt;</label>
        <link refid="classat_1_1_small_vector_template_base"/>
        <childnode refid="606" relation="public-inheritance">
        </childnode>
      </node>
      <node id="606">
        <label>at::SmallVectorTemplateCommon&lt; T &gt;</label>
        <link refid="classat_1_1_small_vector_template_common"/>
        <childnode refid="607" relation="public-inheritance">
        </childnode>
      </node>
      <node id="604">
        <label>at::SmallVectorImpl&lt; T &gt;</label>
        <link refid="classat_1_1_small_vector_impl"/>
        <childnode refid="605" relation="public-inheritance">
        </childnode>
      </node>
      <node id="607">
        <label>at::SmallVectorBase</label>
        <link refid="classat_1_1_small_vector_base"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="610">
        <label>at::SmallVectorTemplateBase&lt; T, std::is_trivially_copyable&lt; T &gt;::value &gt;</label>
        <link refid="classat_1_1_small_vector_template_base"/>
        <childnode refid="611" relation="public-inheritance">
        </childnode>
      </node>
      <node id="611">
        <label>at::SmallVectorTemplateCommon&lt; T &gt;</label>
        <link refid="classat_1_1_small_vector_template_common"/>
        <childnode refid="612" relation="public-inheritance">
        </childnode>
      </node>
      <node id="609">
        <label>at::SmallVectorImpl&lt; T &gt;</label>
        <link refid="classat_1_1_small_vector_impl"/>
        <childnode refid="610" relation="public-inheritance">
        </childnode>
      </node>
      <node id="612">
        <label>at::SmallVectorBase</label>
        <link refid="classat_1_1_small_vector_base"/>
      </node>
    </collaborationgraph>
    <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.h" line="341" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.h" bodystart="341" bodyend="711"/>
    <listofallmembers>
      <member refid="classat_1_1_small_vector_impl_1ac14b6473b0fb86f09e3388a547b5fbc1" prot="public" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>append</name></member>
      <member refid="classat_1_1_small_vector_impl_1a0a052f0f97fda125785595bd26b2840a" prot="public" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>append</name></member>
      <member refid="classat_1_1_small_vector_impl_1ab957c22e419d0ac752a8c22fc4fe3d63" prot="public" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>append</name></member>
      <member refid="classat_1_1_small_vector_impl_1ab85b7aba2e1f05c97aa8e3c0771669f9" prot="public" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>assign</name></member>
      <member refid="classat_1_1_small_vector_impl_1a7834664788934ae9fad4fc77a71b79a1" prot="public" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>assign</name></member>
      <member refid="classat_1_1_small_vector_impl_1a9ac81ab85af8fbc22f2216ee414b33f2" prot="public" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>assign</name></member>
      <member refid="classat_1_1_small_vector_template_common_1a6b7793fb26512198a274db7c73d9fcf8" prot="public" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>back</name></member>
      <member refid="classat_1_1_small_vector_template_common_1af2fb93bb302d7cab177a55858f911ea9" prot="public" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>back</name></member>
      <member refid="classat_1_1_small_vector_template_common_1a9d396477971897b3628f368129741dd1" prot="public" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>begin</name></member>
      <member refid="classat_1_1_small_vector_template_common_1ae4c984b3a4ba993eba89f0260e19e0a8" prot="public" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>begin</name></member>
      <member refid="classat_1_1_small_vector_base_1ac7d87982be839c1bd2646b7f631b55f4" prot="protected" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>BeginX</name></member>
      <member refid="classat_1_1_small_vector_template_common_1a82a3c61d858b9f58a551016e539f4f63" prot="public" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>capacity</name></member>
      <member refid="classat_1_1_small_vector_base_1a080727fd01500634693cc7f5fb30904e" prot="public" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>capacity_in_bytes</name></member>
      <member refid="classat_1_1_small_vector_template_common_1a2fafbd6888930d69dbd457d0fe0200a1" prot="protected" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>capacity_ptr</name></member>
      <member refid="classat_1_1_small_vector_template_common_1a25844f1ffb9d2b2857e82ba0fa57f23b" prot="protected" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>capacity_ptr</name></member>
      <member refid="classat_1_1_small_vector_base_1a1f6b7f7b799d18affcd4f103dda6be82" prot="protected" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>CapacityX</name></member>
      <member refid="classat_1_1_small_vector_impl_1a35304c297d3a9d286a874aef44c7ddee" prot="public" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>clear</name></member>
      <member refid="classat_1_1_small_vector_impl_1a2ead74026eb47667fcf737ca240f0a9e" prot="public" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>const_iterator</name></member>
      <member refid="classat_1_1_small_vector_template_common_1aff6e85cbbb30f1d0de96e60d40a66783" prot="public" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>const_pointer</name></member>
      <member refid="classat_1_1_small_vector_template_common_1a1c6cf85fed4a7787dee826a97f2715a7" prot="public" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>const_reference</name></member>
      <member refid="classat_1_1_small_vector_template_common_1a50bbe2a780de571d26a74b7d9242fdf8" prot="public" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>const_reverse_iterator</name></member>
      <member refid="classat_1_1_small_vector_template_common_1a768dfe9aa7c6b564c4e3fb2bc60c62dc" prot="public" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>data</name></member>
      <member refid="classat_1_1_small_vector_template_common_1a8390706f7405a97fb1608afa74d5689c" prot="public" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>data</name></member>
      <member refid="classat_1_1_small_vector_template_base_1a593ccdd64bda1ae9997f91457d436c9c" prot="protected" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>destroy_range</name></member>
      <member refid="classat_1_1_small_vector_template_common_1a4139257e5c28ba8c565fd1cf25393ff9" prot="public" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>difference_type</name></member>
      <member refid="classat_1_1_small_vector_impl_1a9adfe90e602969e1c1409c4fca42f413" prot="public" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>emplace_back</name></member>
      <member refid="classat_1_1_small_vector_base_1a1555255c2500ed31890456bcf0c44630" prot="public" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>empty</name></member>
      <member refid="classat_1_1_small_vector_template_common_1a3e4a27f3b356e422e7b2530c8140df96" prot="public" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>end</name></member>
      <member refid="classat_1_1_small_vector_template_common_1a03abac1f865cd1f6fc90866c6d3c4eee" prot="public" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>end</name></member>
      <member refid="classat_1_1_small_vector_base_1abf015558c9fc9666d61265ea81a515a9" prot="protected" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>EndX</name></member>
      <member refid="classat_1_1_small_vector_impl_1a59a325cf8199b2cc9eef7e5f4b33121d" prot="public" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>erase</name></member>
      <member refid="classat_1_1_small_vector_impl_1af119627fe241f4dc8a48a08119abe42d" prot="public" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>erase</name></member>
      <member refid="classat_1_1_small_vector_template_common_1a64bb38f0dae1cc70ea1a8a6ffe067e03" prot="public" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>front</name></member>
      <member refid="classat_1_1_small_vector_template_common_1a4d3c30146e2179d6b3ccb75a497c1fb4" prot="public" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>front</name></member>
      <member refid="classat_1_1_small_vector_template_base_1adc6c6a92306fa9a284a3567473437ee0" prot="protected" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>grow</name></member>
      <member refid="classat_1_1_small_vector_template_common_1a1144a1aa0e89a56bca38ba7390581ac7" prot="protected" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>grow_pod</name></member>
      <member refid="classat_1_1_small_vector_base_1aad0c28f55592d56898e17b082992dc38" prot="protected" virt="non-virtual" ambiguityscope="at::SmallVectorBase::"><scope>at::SmallVectorImpl</scope><name>grow_pod</name></member>
      <member refid="classat_1_1_small_vector_impl_1a8c175c25ee9365479bcb13e98d62fef7" prot="public" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>insert</name></member>
      <member refid="classat_1_1_small_vector_impl_1a968812e3a05cb712b4df6ffc5e45f713" prot="public" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>insert</name></member>
      <member refid="classat_1_1_small_vector_impl_1aa3a7b362bebe105bd81ade7b09082417" prot="public" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>insert</name></member>
      <member refid="classat_1_1_small_vector_impl_1abd527ec4eb4466664ecf661c46b5dd90" prot="public" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>insert</name></member>
      <member refid="classat_1_1_small_vector_impl_1add3f8e5481c6bb63bb0cae630db97ba0" prot="public" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>insert</name></member>
      <member refid="classat_1_1_small_vector_template_common_1a39649612f37cb64162bad134137046d0" prot="protected" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>isSmall</name></member>
      <member refid="classat_1_1_small_vector_impl_1a7bc797e70f8f3f80a114804f5571f069" prot="public" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>iterator</name></member>
      <member refid="classat_1_1_small_vector_template_common_1a006d15e51a21d717dc9073ac6683d5c0" prot="public" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>max_size</name></member>
      <member refid="classat_1_1_small_vector_impl_1a2b51f6d7185792a5fc025c2ebafe73de" prot="public" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>operator!=</name></member>
      <member refid="classat_1_1_small_vector_impl_1a4be2199af8fe348be97442f573342943" prot="public" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>operator&lt;</name></member>
      <member refid="classat_1_1_small_vector_impl_1ae46655aae23e9ee1c187f61e41d9278e" prot="public" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>operator=</name></member>
      <member refid="classat_1_1_small_vector_impl_1ad9e1d81e62418caf4de470be0df7cd64" prot="public" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>operator=</name></member>
      <member refid="classat_1_1_small_vector_impl_1a18ca296a161e21b2be0a45ec2ca1e0d3" prot="public" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>operator==</name></member>
      <member refid="classat_1_1_small_vector_template_common_1a02cc648a1eca3f87168facf65aab75cd" prot="public" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>operator[]</name></member>
      <member refid="classat_1_1_small_vector_template_common_1abf3ae422ca02675132c52e44617b6011" prot="public" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>operator[]</name></member>
      <member refid="classat_1_1_small_vector_template_common_1a876c0ed74308595095482e8cecbf9c30" prot="public" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>pointer</name></member>
      <member refid="classat_1_1_small_vector_template_base_1aedc69de36cdf52c8a0c9878a6a366444" prot="public" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>pop_back</name></member>
      <member refid="classat_1_1_small_vector_impl_1aef15ae19ca324467e9dcb249aa584767" prot="public" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>pop_back_val</name></member>
      <member refid="classat_1_1_small_vector_template_base_1aaea9df7a5385095ecbf346236452d047" prot="public" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>push_back</name></member>
      <member refid="classat_1_1_small_vector_template_base_1adfc0bfa95124e891c0bbdc2204744f11" prot="public" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>push_back</name></member>
      <member refid="classat_1_1_small_vector_template_common_1a316642c64a2c85938c34ed586ae7abd4" prot="public" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>rbegin</name></member>
      <member refid="classat_1_1_small_vector_template_common_1a8201a6f53f1fa51c13a3c92def3524bc" prot="public" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>rbegin</name></member>
      <member refid="classat_1_1_small_vector_template_common_1a27d5deeb11704c0a8ecc20055f7b9398" prot="public" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>reference</name></member>
      <member refid="classat_1_1_small_vector_template_common_1a9dea15cf7f74eedcccc5022152ea5053" prot="public" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>rend</name></member>
      <member refid="classat_1_1_small_vector_template_common_1a98b9577a560658af687847bd7e5efd2c" prot="public" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>rend</name></member>
      <member refid="classat_1_1_small_vector_impl_1a9d5e636dde8c44ab5b61c301af81e243" prot="public" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>reserve</name></member>
      <member refid="classat_1_1_small_vector_template_common_1a4b7ec9160ac37cb1f9ade21758c43232" prot="protected" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>resetToSmall</name></member>
      <member refid="classat_1_1_small_vector_impl_1ac3caea35cfb3cafa68ac030188a32575" prot="public" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>resize</name></member>
      <member refid="classat_1_1_small_vector_impl_1a8c471263560b5f7d9691a42a3a8a829e" prot="public" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>resize</name></member>
      <member refid="classat_1_1_small_vector_template_common_1a1ba592283c5a885418a91deeeb32a725" prot="public" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>reverse_iterator</name></member>
      <member refid="classat_1_1_small_vector_impl_1a3ff1d2c50693607fd22026466d35d279" prot="public" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>set_size</name></member>
      <member refid="classat_1_1_small_vector_template_common_1a18fe81caaa397653a65dfc574fd4d667" prot="protected" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>setEnd</name></member>
      <member refid="classat_1_1_small_vector_template_common_1a486fa181c8b50dc1c9677afd1038ea88" prot="public" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>size</name></member>
      <member refid="classat_1_1_small_vector_base_1ac467c3e17cfe1931b7701af7efceda5c" prot="public" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>size_in_bytes</name></member>
      <member refid="classat_1_1_small_vector_impl_1a61442122f5bebe6f9b4237082e902eb6" prot="public" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>size_type</name></member>
      <member refid="classat_1_1_small_vector_base_1a6ba6526e921aeab53df52a94a32cd9ec" prot="protected" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>SmallVectorBase</name></member>
      <member refid="classat_1_1_small_vector_impl_1ac2f0fafaf8ff62fd5de7bbeea478cbaa" prot="protected" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>SmallVectorImpl</name></member>
      <member refid="classat_1_1_small_vector_impl_1aba0675352afdff71b3a2703e01bc4808" prot="public" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>SmallVectorImpl</name></member>
      <member refid="classat_1_1_small_vector_template_base_1a11ad817072c07dfa24b452edfcaa7411" prot="protected" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>SmallVectorTemplateBase</name></member>
      <member refid="classat_1_1_small_vector_template_common_1a0ce99d27ab7880012bc901eb83661cbc" prot="protected" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>SmallVectorTemplateCommon</name></member>
      <member refid="classat_1_1_small_vector_impl_1a28d1fb96e0fd3837365c608da4d77443" prot="private" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>SuperClass</name></member>
      <member refid="classat_1_1_small_vector_impl_1ae2a4be70fb17f2908e38806a3065a7c7" prot="public" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>swap</name></member>
      <member refid="classat_1_1_small_vector_template_base_1af189796d60e105676832d54380f1284a" prot="protected" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>uninitialized_copy</name></member>
      <member refid="classat_1_1_small_vector_template_base_1ae5b28a668e51a5206afde69e595d3437" prot="protected" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>uninitialized_move</name></member>
      <member refid="classat_1_1_small_vector_template_common_1a91e5c1ab3a33f708094e8bbd55943c3b" prot="public" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>value_type</name></member>
      <member refid="classat_1_1_small_vector_impl_1afaebad699159fd3e5989c28e3d4831f8" prot="public" virt="non-virtual"><scope>at::SmallVectorImpl</scope><name>~SmallVectorImpl</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
