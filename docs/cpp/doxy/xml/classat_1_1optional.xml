<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="classat_1_1optional" kind="class" language="C++" prot="public">
    <compoundname>at::optional</compoundname>
    <basecompoundref prot="private" virt="non-virtual">OptionalBase&lt; T &gt;</basecompoundref>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classat_1_1optional_1a5f1dcde11f9f8ae6c51166bdc1d814d8" prot="public" static="no">
        <type>T</type>
        <definition>typedef T at::optional&lt; T &gt;::value_type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/optional.h" line="330" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/optional.h" bodystart="330" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classat_1_1optional_1adcc46d09f982a6024586ab1c3cb20b85" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool at::optional&lt; T &gt;::initialized</definition>
        <argsstring>() const noexcept</argsstring>
        <name>initialized</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/optional.h" line="290" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/optional.h" bodystart="290" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="classat_1_1optional_1ab334952c3414713e6fdbacd7c99915de" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::remove_const&lt; T &gt;::type *</type>
        <definition>std::remove_const&lt;T&gt;::type* at::optional&lt; T &gt;::dataptr</definition>
        <argsstring>()</argsstring>
        <name>dataptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/optional.h" line="291" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/optional.h" bodystart="291" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="classat_1_1optional_1ac5f9ca14ac1eb2a452ff572d8ac632e7" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr const T *</type>
        <definition>constexpr const T* at::optional&lt; T &gt;::dataptr</definition>
        <argsstring>() const</argsstring>
        <name>dataptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/optional.h" line="292" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/optional.h" bodystart="292" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="classat_1_1optional_1a292d462791ee02c454ccc724fb2083c5" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr const T &amp;</type>
        <definition>constexpr const T&amp; at::optional&lt; T &gt;::contained_val</definition>
        <argsstring>() const</argsstring>
        <name>contained_val</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/optional.h" line="304" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/optional.h" bodystart="304" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="classat_1_1optional_1abbd89fa3c21a0410dba7cf9c10b0d18f" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T&amp; at::optional&lt; T &gt;::contained_val</definition>
        <argsstring>()</argsstring>
        <name>contained_val</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/optional.h" line="305" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/optional.h" bodystart="305" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="classat_1_1optional_1abc0eb2ca2af4cecb9d82d1ce5915b305" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void at::optional&lt; T &gt;::clear</definition>
        <argsstring>() noexcept</argsstring>
        <name>clear</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/optional.h" line="308" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/optional.h" bodystart="308" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="classat_1_1optional_1a3af17d5b5171d2a8487ddbcec17ccfdf" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void at::optional&lt; T &gt;::initialize</definition>
        <argsstring>(Args &amp;&amp;... args) noexcept(noexcept(T(std::forward&lt; Args &gt;(args)...)))</argsstring>
        <name>initialize</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/optional.h" line="314" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/optional.h" bodystart="314" bodyend="319"/>
      </memberdef>
      <memberdef kind="function" id="classat_1_1optional_1aa82ce3a8bd06c7c9a116658c49444636" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void at::optional&lt; T &gt;::initialize</definition>
        <argsstring>(std::initializer_list&lt; U &gt; il, Args &amp;&amp;... args) noexcept(noexcept(T(il, std::forward&lt; Args &gt;(args)...)))</argsstring>
        <name>initialize</name>
        <param>
          <type>std::initializer_list&lt; U &gt;</type>
          <declname>il</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/optional.h" line="322" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/optional.h" bodystart="322" bodyend="327"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classat_1_1optional_1a55b6338c89c36ca70814c5f58b04add1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr at::optional&lt; T &gt;::optional</definition>
        <argsstring>() noexcept</argsstring>
        <name>optional</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/optional.h" line="333" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/optional.h" bodystart="333" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="classat_1_1optional_1aeb348be0ff00fceeae513823b528f65e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr at::optional&lt; T &gt;::optional</definition>
        <argsstring>(nullopt_t) noexcept</argsstring>
        <name>optional</name>
        <param>
          <type><ref refid="structat_1_1nullopt__t" kindref="compound">nullopt_t</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/optional.h" line="334" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/optional.h" bodystart="334" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="classat_1_1optional_1aac650fa6fb93048eb79618d9c5db002b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>at::optional&lt; T &gt;::optional</definition>
        <argsstring>(const optional &amp;rhs)</argsstring>
        <name>optional</name>
        <param>
          <type>const <ref refid="classat_1_1optional" kindref="compound">optional</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/optional.h" line="336" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/optional.h" bodystart="336" bodyend="343"/>
      </memberdef>
      <memberdef kind="function" id="classat_1_1optional_1a1cc1bc0422cbf9764c5410799a9fce36" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>at::optional&lt; T &gt;::optional</definition>
        <argsstring>(optional &amp;&amp;rhs) noexcept(std::is_nothrow_move_constructible&lt; T &gt;::value)</argsstring>
        <name>optional</name>
        <param>
          <type><ref refid="classat_1_1optional" kindref="compound">optional</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/optional.h" line="345" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/optional.h" bodystart="345" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="classat_1_1optional_1a03a1183d5a93ed9214c1d943ee6a59aa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr at::optional&lt; T &gt;::optional</definition>
        <argsstring>(const T &amp;v)</argsstring>
        <name>optional</name>
        <param>
          <type>const T &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/optional.h" line="354" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/optional.h" bodystart="354" bodyend="354"/>
      </memberdef>
      <memberdef kind="function" id="classat_1_1optional_1a03e02e32b3b09e2b5e826b4db8990ea9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr at::optional&lt; T &gt;::optional</definition>
        <argsstring>(T &amp;&amp;v)</argsstring>
        <name>optional</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/optional.h" line="356" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/optional.h" bodystart="356" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="classat_1_1optional_1af6d837533a38126852eebc24c1c9f87d" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>constexpr</type>
        <definition>constexpr at::optional&lt; T &gt;::optional</definition>
        <argsstring>(in_place_t, Args &amp;&amp;... args)</argsstring>
        <name>optional</name>
        <param>
          <type><ref refid="structat_1_1in__place__t" kindref="compound">in_place_t</ref></type>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/optional.h" line="359" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/optional.h" bodystart="359" bodyend="360"/>
      </memberdef>
      <memberdef kind="function" id="classat_1_1optional_1aeb10d3ac11855f4f6a7686e4908fc565" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_constructible&lt; T, std::initializer_list&lt; U &gt;&gt; ::value, bool &gt;::type</type>
            <defval>false</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>at::optional&lt; T &gt;::optional</definition>
        <argsstring>(in_place_t, std::initializer_list&lt; U &gt; il, Args &amp;&amp;... args)</argsstring>
        <name>optional</name>
        <param>
          <type><ref refid="structat_1_1in__place__t" kindref="compound">in_place_t</ref></type>
        </param>
        <param>
          <type>std::initializer_list&lt; U &gt;</type>
          <declname>il</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/optional.h" line="363" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/optional.h" bodystart="363" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="classat_1_1optional_1a2b7e3fa2f88b6d3d110c6fe2aae6bd3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>at::optional&lt; T &gt;::~optional</definition>
        <argsstring>()=default</argsstring>
        <name>~optional</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/optional.h" line="367" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classat_1_1optional_1a35d368dfbc6474ea6610003078fb2448" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classat_1_1optional" kindref="compound">optional</ref> &amp;</type>
        <definition>optional&amp; at::optional&lt; T &gt;::operator=</definition>
        <argsstring>(nullopt_t) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="structat_1_1nullopt__t" kindref="compound">nullopt_t</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/optional.h" line="370" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/optional.h" bodystart="370" bodyend="374"/>
      </memberdef>
      <memberdef kind="function" id="classat_1_1optional_1a0ba5baa8288b79361f293d16435bcec1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classat_1_1optional" kindref="compound">optional</ref> &amp;</type>
        <definition>optional&amp; at::optional&lt; T &gt;::operator=</definition>
        <argsstring>(const optional &amp;rhs)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classat_1_1optional" kindref="compound">optional</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/optional.h" line="376" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/optional.h" bodystart="376" bodyend="382"/>
      </memberdef>
      <memberdef kind="function" id="classat_1_1optional_1a8a87cc5238944c58f6ea99d5f802cb26" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classat_1_1optional" kindref="compound">optional</ref> &amp;</type>
        <definition>optional&amp; at::optional&lt; T &gt;::operator=</definition>
        <argsstring>(optional &amp;&amp;rhs) noexcept(std::is_nothrow_move_assignable&lt; T &gt;::value &amp;&amp;std::is_nothrow_move_constructible&lt; T &gt;::value)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classat_1_1optional" kindref="compound">optional</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/optional.h" line="384" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/optional.h" bodystart="384" bodyend="391"/>
      </memberdef>
      <memberdef kind="function" id="classat_1_1optional_1a40817c05fc815f838ec7c091f0e6cc06" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto at::optional&lt; T &gt;::operator=</definition>
        <argsstring>(U &amp;&amp;v) -&gt; typename std::enable_if&lt; std::is_same&lt; typename std::decay&lt; U &gt;::type, T &gt;::value, optional &amp;&gt;::type</argsstring>
        <name>operator=</name>
        <param>
          <type>U &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/optional.h" line="394" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/optional.h" bodystart="394" bodyend="404"/>
      </memberdef>
      <memberdef kind="function" id="classat_1_1optional_1a8d27207a18df9d3641d965a1c9f05ac6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void at::optional&lt; T &gt;::emplace</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>emplace</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/optional.h" line="408" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/optional.h" bodystart="408" bodyend="412"/>
      </memberdef>
      <memberdef kind="function" id="classat_1_1optional_1a12db5e1f8fef9f4f8116a57588d1a3aa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void at::optional&lt; T &gt;::emplace</definition>
        <argsstring>(std::initializer_list&lt; U &gt; il, Args &amp;&amp;... args)</argsstring>
        <name>emplace</name>
        <param>
          <type>std::initializer_list&lt; U &gt;</type>
          <declname>il</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/optional.h" line="415" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/optional.h" bodystart="415" bodyend="419"/>
      </memberdef>
      <memberdef kind="function" id="classat_1_1optional_1ac9de6a54a8f91bc8ef33012b8140ede1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void at::optional&lt; T &gt;::swap</definition>
        <argsstring>(optional&lt; T &gt; &amp;rhs) noexcept(std::is_nothrow_move_constructible&lt; T &gt;::value &amp;&amp;noexcept(swap(std::declval&lt; T &amp;&gt;(), std::declval&lt; T &amp;&gt;())))</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="classat_1_1optional" kindref="compound">optional</ref>&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/optional.h" line="422" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/optional.h" bodystart="422" bodyend="427"/>
      </memberdef>
      <memberdef kind="function" id="classat_1_1optional_1a44c89847dac3306b342c6dc7109b3f18" prot="public" static="no" const="yes" explicit="yes" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr at::optional&lt; T &gt;::operator bool</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator bool</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/optional.h" line="431" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/optional.h" bodystart="431" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="classat_1_1optional_1a527bdc8433db623b8e12ed81e20ff9d9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool at::optional&lt; T &gt;::has_value</definition>
        <argsstring>() const noexcept</argsstring>
        <name>has_value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/optional.h" line="432" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/optional.h" bodystart="432" bodyend="432"/>
      </memberdef>
      <memberdef kind="function" id="classat_1_1optional_1aebf746fc1e99afc875cb7e30a5d8f64b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr T const  *</type>
        <definition>constexpr T const* at::optional&lt; T &gt;::operator-&gt;</definition>
        <argsstring>() const</argsstring>
        <name>operator-&gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/optional.h" line="434" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/optional.h" bodystart="434" bodyend="436"/>
      </memberdef>
      <memberdef kind="function" id="classat_1_1optional_1ab3080c7330255105db024d14cfb78fcc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T *</type>
        <definition>T* at::optional&lt; T &gt;::operator-&gt;</definition>
        <argsstring>()</argsstring>
        <name>operator-&gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/optional.h" line="474" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/optional.h" bodystart="474" bodyend="477"/>
      </memberdef>
      <memberdef kind="function" id="classat_1_1optional_1a09161ef8a24792aca8763bd7fd71616c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr T const  &amp;</type>
        <definition>constexpr T const&amp; at::optional&lt; T &gt;::operator*</definition>
        <argsstring>() const</argsstring>
        <name>operator*</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/optional.h" line="479" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/optional.h" bodystart="479" bodyend="481"/>
      </memberdef>
      <memberdef kind="function" id="classat_1_1optional_1a338f4189caa92d3d653cce5ae9b6f0d1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T&amp; at::optional&lt; T &gt;::operator*</definition>
        <argsstring>()</argsstring>
        <name>operator*</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/optional.h" line="483" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/optional.h" bodystart="483" bodyend="486"/>
      </memberdef>
      <memberdef kind="function" id="classat_1_1optional_1a1efd4eb688ab3a6974ca50e29b2ac30d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr T const  &amp;</type>
        <definition>constexpr T const&amp; at::optional&lt; T &gt;::value</definition>
        <argsstring>() const</argsstring>
        <name>value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/optional.h" line="488" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/optional.h" bodystart="488" bodyend="490"/>
      </memberdef>
      <memberdef kind="function" id="classat_1_1optional_1afc51f3983d50f46a4911324c1bfea7cf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T&amp; at::optional&lt; T &gt;::value</definition>
        <argsstring>()</argsstring>
        <name>value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/optional.h" line="492" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/optional.h" bodystart="492" bodyend="494"/>
      </memberdef>
      <memberdef kind="function" id="classat_1_1optional_1ae0cd698eb799e4e074482be94bb00c91" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class V</type>
          </param>
        </templateparamlist>
        <type>constexpr T</type>
        <definition>constexpr T at::optional&lt; T &gt;::value_or</definition>
        <argsstring>(V &amp;&amp;v) const</argsstring>
        <name>value_or</name>
        <param>
          <type>V &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/optional.h" line="527" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/optional.h" bodystart="527" bodyend="530"/>
      </memberdef>
      <memberdef kind="function" id="classat_1_1optional_1a458452f319519213fce7aad5e101d754" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void at::optional&lt; T &gt;::reset</definition>
        <argsstring>() noexcept</argsstring>
        <name>reset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/optional.h" line="535" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/optional.h" bodystart="535" bodyend="535"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="483">
        <label>at::optional&lt; T &gt;</label>
        <link refid="classat_1_1optional"/>
        <childnode refid="484" relation="private-inheritance">
        </childnode>
      </node>
      <node id="484">
        <label>OptionalBase&lt; T &gt;</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="485">
        <label>at::optional&lt; T &gt;</label>
        <link refid="classat_1_1optional"/>
        <childnode refid="486" relation="private-inheritance">
        </childnode>
      </node>
      <node id="486">
        <label>OptionalBase&lt; T &gt;</label>
      </node>
    </collaborationgraph>
    <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/optional.h" line="108" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/optional.h" bodystart="108" bodyend="-1"/>
    <listofallmembers>
      <member refid="classat_1_1optional_1abc0eb2ca2af4cecb9d82d1ce5915b305" prot="private" virt="non-virtual"><scope>at::optional</scope><name>clear</name></member>
      <member refid="classat_1_1optional_1a292d462791ee02c454ccc724fb2083c5" prot="private" virt="non-virtual"><scope>at::optional</scope><name>contained_val</name></member>
      <member refid="classat_1_1optional_1abbd89fa3c21a0410dba7cf9c10b0d18f" prot="private" virt="non-virtual"><scope>at::optional</scope><name>contained_val</name></member>
      <member refid="classat_1_1optional_1ab334952c3414713e6fdbacd7c99915de" prot="private" virt="non-virtual"><scope>at::optional</scope><name>dataptr</name></member>
      <member refid="classat_1_1optional_1ac5f9ca14ac1eb2a452ff572d8ac632e7" prot="private" virt="non-virtual"><scope>at::optional</scope><name>dataptr</name></member>
      <member refid="classat_1_1optional_1a8d27207a18df9d3641d965a1c9f05ac6" prot="public" virt="non-virtual"><scope>at::optional</scope><name>emplace</name></member>
      <member refid="classat_1_1optional_1a12db5e1f8fef9f4f8116a57588d1a3aa" prot="public" virt="non-virtual"><scope>at::optional</scope><name>emplace</name></member>
      <member refid="classat_1_1optional_1a527bdc8433db623b8e12ed81e20ff9d9" prot="public" virt="non-virtual"><scope>at::optional</scope><name>has_value</name></member>
      <member refid="classat_1_1optional_1a3af17d5b5171d2a8487ddbcec17ccfdf" prot="private" virt="non-virtual"><scope>at::optional</scope><name>initialize</name></member>
      <member refid="classat_1_1optional_1aa82ce3a8bd06c7c9a116658c49444636" prot="private" virt="non-virtual"><scope>at::optional</scope><name>initialize</name></member>
      <member refid="classat_1_1optional_1adcc46d09f982a6024586ab1c3cb20b85" prot="private" virt="non-virtual"><scope>at::optional</scope><name>initialized</name></member>
      <member refid="classat_1_1optional_1a44c89847dac3306b342c6dc7109b3f18" prot="public" virt="non-virtual"><scope>at::optional</scope><name>operator bool</name></member>
      <member refid="classat_1_1optional_1a09161ef8a24792aca8763bd7fd71616c" prot="public" virt="non-virtual"><scope>at::optional</scope><name>operator*</name></member>
      <member refid="classat_1_1optional_1a338f4189caa92d3d653cce5ae9b6f0d1" prot="public" virt="non-virtual"><scope>at::optional</scope><name>operator*</name></member>
      <member refid="classat_1_1optional_1aebf746fc1e99afc875cb7e30a5d8f64b" prot="public" virt="non-virtual"><scope>at::optional</scope><name>operator-&gt;</name></member>
      <member refid="classat_1_1optional_1ab3080c7330255105db024d14cfb78fcc" prot="public" virt="non-virtual"><scope>at::optional</scope><name>operator-&gt;</name></member>
      <member refid="classat_1_1optional_1a35d368dfbc6474ea6610003078fb2448" prot="public" virt="non-virtual"><scope>at::optional</scope><name>operator=</name></member>
      <member refid="classat_1_1optional_1a0ba5baa8288b79361f293d16435bcec1" prot="public" virt="non-virtual"><scope>at::optional</scope><name>operator=</name></member>
      <member refid="classat_1_1optional_1a8a87cc5238944c58f6ea99d5f802cb26" prot="public" virt="non-virtual"><scope>at::optional</scope><name>operator=</name></member>
      <member refid="classat_1_1optional_1a40817c05fc815f838ec7c091f0e6cc06" prot="public" virt="non-virtual"><scope>at::optional</scope><name>operator=</name></member>
      <member refid="classat_1_1optional_1a55b6338c89c36ca70814c5f58b04add1" prot="public" virt="non-virtual"><scope>at::optional</scope><name>optional</name></member>
      <member refid="classat_1_1optional_1aeb348be0ff00fceeae513823b528f65e" prot="public" virt="non-virtual"><scope>at::optional</scope><name>optional</name></member>
      <member refid="classat_1_1optional_1aac650fa6fb93048eb79618d9c5db002b" prot="public" virt="non-virtual"><scope>at::optional</scope><name>optional</name></member>
      <member refid="classat_1_1optional_1a1cc1bc0422cbf9764c5410799a9fce36" prot="public" virt="non-virtual"><scope>at::optional</scope><name>optional</name></member>
      <member refid="classat_1_1optional_1a03a1183d5a93ed9214c1d943ee6a59aa" prot="public" virt="non-virtual"><scope>at::optional</scope><name>optional</name></member>
      <member refid="classat_1_1optional_1a03e02e32b3b09e2b5e826b4db8990ea9" prot="public" virt="non-virtual"><scope>at::optional</scope><name>optional</name></member>
      <member refid="classat_1_1optional_1af6d837533a38126852eebc24c1c9f87d" prot="public" virt="non-virtual"><scope>at::optional</scope><name>optional</name></member>
      <member refid="classat_1_1optional_1aeb10d3ac11855f4f6a7686e4908fc565" prot="public" virt="non-virtual"><scope>at::optional</scope><name>optional</name></member>
      <member refid="classat_1_1optional_1a458452f319519213fce7aad5e101d754" prot="public" virt="non-virtual"><scope>at::optional</scope><name>reset</name></member>
      <member refid="classat_1_1optional_1ac9de6a54a8f91bc8ef33012b8140ede1" prot="public" virt="non-virtual"><scope>at::optional</scope><name>swap</name></member>
      <member refid="classat_1_1optional_1a1efd4eb688ab3a6974ca50e29b2ac30d" prot="public" virt="non-virtual"><scope>at::optional</scope><name>value</name></member>
      <member refid="classat_1_1optional_1afc51f3983d50f46a4911324c1bfea7cf" prot="public" virt="non-virtual"><scope>at::optional</scope><name>value</name></member>
      <member refid="classat_1_1optional_1ae0cd698eb799e4e074482be94bb00c91" prot="public" virt="non-virtual"><scope>at::optional</scope><name>value_or</name></member>
      <member refid="classat_1_1optional_1a5f1dcde11f9f8ae6c51166bdc1d814d8" prot="public" virt="non-virtual"><scope>at::optional</scope><name>value_type</name></member>
      <member refid="classat_1_1optional_1a2b7e3fa2f88b6d3d110c6fe2aae6bd3b" prot="public" virt="non-virtual"><scope>at::optional</scope><name>~optional</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
