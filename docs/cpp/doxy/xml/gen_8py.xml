<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="gen_8py" kind="file" language="Python">
    <compoundname>gen.py</compoundname>
    <innerclass refid="classgen_1_1_file_manager" prot="public">gen::FileManager</innerclass>
    <innernamespace refid="namespacegen">gen</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="keyword">import</highlight><highlight class="normal"><sp/>argparse</highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>os</highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>yaml</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>collections<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>OrderedDict</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>sys</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>os<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>path</highlight></codeline>
<codeline lineno="9"><highlight class="normal">sys.path.append(path.dirname(path.abspath(__file__)))</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>cwrap_parser</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>nn_parse</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>native_parse</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>preprocess_declarations</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>function_wrapper</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>copy_wrapper</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>code_template<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>CodeTemplate</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">#<sp/>This<sp/>file<sp/>is<sp/>the<sp/>top-level<sp/>entry<sp/>point<sp/>for<sp/>code<sp/>generation<sp/>in<sp/>ATen.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">#<sp/>It<sp/>takes<sp/>an<sp/>arbitrary<sp/>number<sp/>of<sp/>arguments<sp/>specifying<sp/>metadata<sp/>files<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">#<sp/>process<sp/>(.cwrap,<sp/>.yaml<sp/>and<sp/>.h)<sp/>and<sp/>outputs<sp/>a<sp/>number<sp/>generated<sp/>header</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">#<sp/>and<sp/>cpp<sp/>files<sp/>in<sp/>ATen/<sp/>(see<sp/>invocations<sp/>of<sp/>&apos;write&apos;<sp/>for<sp/>each<sp/>file<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">#<sp/>is<sp/>written.)<sp/>It<sp/>is<sp/>invoked<sp/>from<sp/>cmake;<sp/>look<sp/>for<sp/>the<sp/>&apos;cwrap_files&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">#<sp/>variable<sp/>for<sp/>an<sp/>up-to-date<sp/>list<sp/>of<sp/>files<sp/>which<sp/>are<sp/>passed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal">parser<sp/>=<sp/>argparse.ArgumentParser(description=</highlight><highlight class="stringliteral">&apos;Generate<sp/>ATen<sp/>source<sp/>files&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="29"><highlight class="normal">parser.add_argument(</highlight><highlight class="stringliteral">&apos;files&apos;</highlight><highlight class="normal">,<sp/>help=</highlight><highlight class="stringliteral">&apos;cwrap<sp/>files&apos;</highlight><highlight class="normal">,<sp/>nargs=</highlight><highlight class="stringliteral">&apos;+&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal">parser.add_argument(</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;-s&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;--source-path&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>help=</highlight><highlight class="stringliteral">&apos;path<sp/>to<sp/>source<sp/>directory<sp/>for<sp/>ATen&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>default=</highlight><highlight class="stringliteral">&apos;.&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="36"><highlight class="normal">parser.add_argument(</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;-o&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;--output-dependencies&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>help=</highlight><highlight class="stringliteral">&apos;output<sp/>a<sp/>list<sp/>of<sp/>dependencies<sp/>into<sp/>the<sp/>given<sp/>file<sp/>and<sp/>exit&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="40"><highlight class="normal">parser.add_argument(</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;-d&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;--install_dir&apos;</highlight><highlight class="normal">,<sp/>help=</highlight><highlight class="stringliteral">&apos;output<sp/>directory&apos;</highlight><highlight class="normal">,<sp/>default=</highlight><highlight class="stringliteral">&apos;ATen&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="42"><highlight class="normal">options<sp/>=<sp/>parser.parse_args()</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>options.install_dir<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>os.path.exists(options.install_dir):</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>os.makedirs(options.install_dir)</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="classgen_1_1_file_manager" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classgen_1_1_file_manager" kindref="compound">FileManager</ref>(object):</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">__init__(self):</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classgen_1_1_file_manager_1a4a636dab16bd221d0dd1de927841fd54" kindref="member">filenames</ref><sp/>=<sp/>set()</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classgen_1_1_file_manager_1a51297c43f99ac51d63f7046d3a78d79f" kindref="member">outputs_written</ref><sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classgen_1_1_file_manager_1a2f7d90f2f99511c76a6fb907c059e55c" kindref="member">undeclared_files</ref><sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">will_write(self,<sp/>filename):</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filename<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;{}/{}&apos;</highlight><highlight class="normal">.format(options.install_dir,<sp/>filename)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classgen_1_1_file_manager_1a51297c43f99ac51d63f7046d3a78d79f" kindref="member">outputs_written</ref>:</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>Exception(</highlight><highlight class="stringliteral">&quot;&apos;will_write&apos;<sp/>can<sp/>only<sp/>be<sp/>called<sp/>before<sp/>&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;the<sp/>call<sp/>to<sp/>write_outputs,<sp/>refactor<sp/>so<sp/>outputs<sp/>are<sp/>registered<sp/>&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;before<sp/>running<sp/>the<sp/>generators&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classgen_1_1_file_manager_1a4a636dab16bd221d0dd1de927841fd54" kindref="member">filenames</ref>.add(filename)</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">_write_if_changed(self,<sp/>filename,<sp/>contents):</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>with<sp/>open(filename,<sp/></highlight><highlight class="stringliteral">&apos;r&apos;)<sp/>as<sp/>f:</highlight></codeline>
<codeline lineno="65"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>old_contents<sp/>=<sp/>f.read()</highlight></codeline>
<codeline lineno="66"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>IOError:</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>old_contents<sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>contents<sp/>!=<sp/>old_contents:</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>with<sp/>open(filename,<sp/></highlight><highlight class="stringliteral">&apos;w&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>f:</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f.write(contents)</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classgen_1_1_file_manager_1a5d73e4bf65945d1badf054d94cd385b0" kindref="member">write_outputs</ref>(self,<sp/>filename):</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Write<sp/>a<sp/>file<sp/>containing<sp/>the<sp/>list<sp/>of<sp/>all<sp/>outputs<sp/>which<sp/>are</highlight></codeline>
<codeline lineno="74"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>generated<sp/>by<sp/>this<sp/>script.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classgen_1_1_file_manager_1afac9d7b7ba715fc8fc8ea262db5b0481" kindref="member">_write_if_changed</ref>(</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filename,</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">.join(name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>name<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>sorted(self.<ref refid="classgen_1_1_file_manager_1a4a636dab16bd221d0dd1de927841fd54" kindref="member">filenames</ref>)))</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classgen_1_1_file_manager_1a51297c43f99ac51d63f7046d3a78d79f" kindref="member">outputs_written</ref><sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">write(self,<sp/>filename,<sp/>s,<sp/>env=None):</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filename<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;{}/{}&apos;</highlight><highlight class="normal">.format(options.install_dir,<sp/>filename)</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>isinstance(s,<sp/>CodeTemplate):</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>env<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env[</highlight><highlight class="stringliteral">&apos;generated_comment&apos;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;@&quot;</highlight><highlight class="normal"><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;generated<sp/>by<sp/>aten/src/ATen/gen.py&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>s.substitute(env)</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classgen_1_1_file_manager_1afac9d7b7ba715fc8fc8ea262db5b0481" kindref="member">_write_if_changed</ref>(filename,<sp/>s)</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>filename<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classgen_1_1_file_manager_1a4a636dab16bd221d0dd1de927841fd54" kindref="member">filenames</ref>:</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classgen_1_1_file_manager_1a2f7d90f2f99511c76a6fb907c059e55c" kindref="member">undeclared_files</ref>.append(filename)</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classgen_1_1_file_manager_1a4a636dab16bd221d0dd1de927841fd54" kindref="member">filenames</ref>.remove(filename)</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">check_all_files_written(self):</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len(self.<ref refid="classgen_1_1_file_manager_1a2f7d90f2f99511c76a6fb907c059e55c" kindref="member">undeclared_files</ref>)<sp/>&gt;<sp/>0:</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>Exception(</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;trying<sp/>to<sp/>write<sp/>files<sp/>{}<sp/>which<sp/>are<sp/>not<sp/>&quot;</highlight><highlight class="normal">.format(self.<ref refid="classgen_1_1_file_manager_1a2f7d90f2f99511c76a6fb907c059e55c" kindref="member">undeclared_files</ref>)<sp/>+</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;in<sp/>the<sp/>list<sp/>of<sp/>outputs<sp/>this<sp/>script<sp/>produces.<sp/>&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;use<sp/>will_write<sp/>to<sp/>add<sp/>them.&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len(self.<ref refid="classgen_1_1_file_manager_1a4a636dab16bd221d0dd1de927841fd54" kindref="member">filenames</ref>)<sp/>&gt;<sp/>0:</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>Exception(</highlight><highlight class="stringliteral">&quot;Outputs<sp/>declared<sp/>with<sp/>&apos;will_write&apos;<sp/>were<sp/>&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;never<sp/>written:<sp/>{}&quot;</highlight><highlight class="normal">.format(self.<ref refid="classgen_1_1_file_manager_1a4a636dab16bd221d0dd1de927841fd54" kindref="member">filenames</ref>))</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal">TEMPLATE_PATH<sp/>=<sp/>options.source_path<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/templates&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal">GENERATOR_DERIVED<sp/>=<sp/>CodeTemplate.from_file(</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>TEMPLATE_PATH<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/GeneratorDerived.h&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="106"><highlight class="normal">STORAGE_DERIVED_CPP<sp/>=<sp/>CodeTemplate.from_file(</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>TEMPLATE_PATH<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/StorageDerived.cpp&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="108"><highlight class="normal">STORAGE_DERIVED_H<sp/>=<sp/>CodeTemplate.from_file(TEMPLATE_PATH<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/StorageDerived.h&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal">TYPE_DERIVED_CPP<sp/>=<sp/>CodeTemplate.from_file(TEMPLATE_PATH<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/TypeDerived.cpp&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="111"><highlight class="normal">SPARSE_TYPE_DERIVED_CPP<sp/>=<sp/>CodeTemplate.from_file(TEMPLATE_PATH<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/SparseTypeDerived.cpp&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="112"><highlight class="normal">TYPE_DERIVED_H<sp/>=<sp/>CodeTemplate.from_file(TEMPLATE_PATH<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/TypeDerived.h&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="113"><highlight class="normal">TYPE_H<sp/>=<sp/>CodeTemplate.from_file(TEMPLATE_PATH<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/Type.h&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="114"><highlight class="normal">TYPE_CPP<sp/>=<sp/>CodeTemplate.from_file(TEMPLATE_PATH<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/Type.cpp&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal">TENSOR_DERIVED_CPP<sp/>=<sp/>CodeTemplate.from_file(</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>TEMPLATE_PATH<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/TensorDerived.cpp&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="118"><highlight class="normal">TENSOR_DENSE_CPP<sp/>=<sp/>CodeTemplate.from_file(</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>TEMPLATE_PATH<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/TensorDense.cpp&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal">REGISTER_CUDA_H<sp/>=<sp/>CodeTemplate.from_file(TEMPLATE_PATH<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/RegisterCUDA.h&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="122"><highlight class="normal">REGISTER_CUDA_CPP<sp/>=<sp/>CodeTemplate.from_file(TEMPLATE_PATH<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/RegisterCUDA.cpp&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal">TENSOR_DERIVED_H<sp/>=<sp/>CodeTemplate.from_file(TEMPLATE_PATH<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/TensorDerived.h&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="125"><highlight class="normal">TENSOR_H<sp/>=<sp/>CodeTemplate.from_file(TEMPLATE_PATH<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/Tensor.h&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="126"><highlight class="normal">TENSOR_METHODS_H<sp/>=<sp/>CodeTemplate.from_file(TEMPLATE_PATH<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/TensorMethods.h&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal">FUNCTIONS_H<sp/>=<sp/>CodeTemplate.from_file(TEMPLATE_PATH<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/Functions.h&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal">NATIVE_FUNCTIONS_H<sp/>=<sp/>CodeTemplate.from_file(TEMPLATE_PATH<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/NativeFunctions.h&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal">TYPE_REGISTER<sp/>=<sp/><ref refid="classcode__template_1_1_code_template" kindref="compound">CodeTemplate</ref>(</highlight><highlight class="stringliteral">&quot;&quot;&quot;\</highlight></codeline>
<codeline lineno="133"><highlight class="stringliteral">context-&gt;type_registry[static_cast&lt;int&gt;(Backend::${backend})]</highlight></codeline>
<codeline lineno="134"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[static_cast&lt;int&gt;(ScalarType::${scalar_type})]</highlight></codeline>
<codeline lineno="135"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.reset(new<sp/>${type_name}(context));</highlight></codeline>
<codeline lineno="136"><highlight class="stringliteral">detail::getVariableHooks().registerVariableTypeFor(context,<sp/>Backend::${backend},<sp/>ScalarType::${scalar_type});</highlight></codeline>
<codeline lineno="137"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal">file_manager<sp/>=<sp/><ref refid="classgen_1_1_file_manager" kindref="compound">FileManager</ref>()</highlight></codeline>
<codeline lineno="140"><highlight class="normal">cuda_file_manager<sp/>=<sp/><ref refid="classgen_1_1_file_manager" kindref="compound">FileManager</ref>()</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal">generators<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;CPUGenerator.h&apos;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;CPU&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;th_generator&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;THGenerator<sp/>*<sp/>generator;&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;header&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;TH/TH.h&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;CUDAGenerator.h&apos;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;CUDA&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;th_generator&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;header&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;THC/THC.h&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal">backends<sp/>=<sp/>[</highlight><highlight class="stringliteral">&apos;CPU&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;CUDA&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="156"><highlight class="normal">densities<sp/>=<sp/>[</highlight><highlight class="stringliteral">&apos;Dense&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;Sparse&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="comment">#<sp/>scalar_name,<sp/>c_type,<sp/>accreal,<sp/>th_scalar_type,<sp/>is_floating_type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal">scalar_types<sp/>=<sp/>[</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&apos;Byte&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;uint8_t&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;Long&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;uint8_t&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&apos;Char&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;int8_t&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;Long&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;int8_t&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&apos;Double&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;double&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;Double&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;double&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&apos;Float&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;float&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;Double&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;float&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&apos;Int&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;int&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;Long&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;int32_t&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&apos;Long&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;int64_t&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;Long&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;int64_t&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&apos;Short&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;int16_t&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;Long&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;int16_t&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&apos;Half&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;Half&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;Double&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;THHalf&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="168"><highlight class="normal">]</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="comment">#<sp/>shared<sp/>environment<sp/>for<sp/>non-derived<sp/>base<sp/>classes<sp/>Type.h<sp/>Tensor.h<sp/>Storage.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal">top_env<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;cpu_type_registrations&apos;</highlight><highlight class="normal">:<sp/>[],</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;cpu_type_headers&apos;</highlight><highlight class="normal">:<sp/>[],</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;cuda_type_registrations&apos;</highlight><highlight class="normal">:<sp/>[],</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;cuda_type_headers&apos;</highlight><highlight class="normal">:<sp/>[],</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;type_method_declarations&apos;</highlight><highlight class="normal">:<sp/>[],</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;type_method_definitions&apos;</highlight><highlight class="normal">:<sp/>[],</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;type_method_inline_definitions&apos;</highlight><highlight class="normal">:<sp/>[],</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;tensor_method_declarations&apos;</highlight><highlight class="normal">:<sp/>[],</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;tensor_method_definitions&apos;</highlight><highlight class="normal">:<sp/>[],</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;function_declarations&apos;</highlight><highlight class="normal">:<sp/>[],</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;function_definitions&apos;</highlight><highlight class="normal">:<sp/>[],</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;type_ids&apos;</highlight><highlight class="normal">:<sp/>[],</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;native_function_declarations&apos;</highlight><highlight class="normal">:<sp/>[],</highlight></codeline>
<codeline lineno="185"><highlight class="normal">}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">dict_representer(dumper,<sp/>data):</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dumper.represent_dict(data.items())</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">postprocess_output_declarations(output_declarations):</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>ensure<sp/>each<sp/>return<sp/>has<sp/>a<sp/>name<sp/>associated<sp/>with<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>decl<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>output_declarations:</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>has_named_ret<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>n,<sp/>ret<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>enumerate(decl.returns):</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>ret:</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>has_named_ret</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>decl.inplace:</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret[</highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;self&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>len(decl.returns)<sp/>==<sp/>1:</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret[</highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;result&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret[</highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;result&apos;</highlight><highlight class="normal"><sp/>+<sp/>str(n)</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>has_named_ret<sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">remove_key_if_none(dictionary,<sp/>key):</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>key<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>dictionary.keys()<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>dictionary[key]<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>del<sp/>dictionary[key]</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dictionary</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[remove_key_if_none(decl._asdict(),<sp/></highlight><highlight class="stringliteral">&apos;buffers&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>decl<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>output_declarations]</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">format_yaml(data):</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>options.output_dependencies:</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>yaml<sp/>formatting<sp/>is<sp/>slow<sp/>so<sp/>don&apos;t<sp/>do<sp/>it<sp/>if<sp/>we<sp/>will<sp/>ditch<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>noalias_dumper<sp/>=<sp/>yaml.dumper.SafeDumper</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>noalias_dumper.ignore_aliases<sp/>=<sp/></highlight><highlight class="keyword">lambda</highlight><highlight class="normal"><sp/>self,<sp/>data:<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Support<sp/>serializing<sp/>OrderedDict</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>noalias_dumper.add_representer(OrderedDict,<sp/>dict_representer)</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>yaml.dump(data,<sp/>default_flow_style=</highlight><highlight class="keyword">False</highlight><highlight class="normal">,<sp/>Dumper=noalias_dumper)</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">generate_storage_type_and_tensor(backend,<sp/>density,<sp/>scalar_type,<sp/>declarations):</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>scalar_name,<sp/>c_type,<sp/>accreal,<sp/>th_scalar_type,<sp/>is_floating_type<sp/>=<sp/>scalar_type</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>env<sp/>=<sp/>{}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>density_tag<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;Sparse&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>density<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;Sparse&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>env[</highlight><highlight class="stringliteral">&apos;Density&apos;</highlight><highlight class="normal">]<sp/>=<sp/>density</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>env[</highlight><highlight class="stringliteral">&apos;ScalarName&apos;</highlight><highlight class="normal">]<sp/>=<sp/>scalar_name</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>env[</highlight><highlight class="stringliteral">&apos;ScalarType&apos;</highlight><highlight class="normal">]<sp/>=<sp/>c_type</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>env[</highlight><highlight class="stringliteral">&apos;THScalarType&apos;</highlight><highlight class="normal">]<sp/>=<sp/>th_scalar_type</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>env[</highlight><highlight class="stringliteral">&apos;AccScalarName&apos;</highlight><highlight class="normal">]<sp/>=<sp/>accreal</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>env[</highlight><highlight class="stringliteral">&apos;isFloatingType&apos;</highlight><highlight class="normal">]<sp/>=<sp/>is_floating_type</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>env[</highlight><highlight class="stringliteral">&apos;isIntegralType&apos;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>is_floating_type</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>density<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;Dense&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env[</highlight><highlight class="stringliteral">&apos;Storage&apos;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;{}{}Storage&quot;</highlight><highlight class="normal">.format(backend,<sp/>scalar_name)</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env[</highlight><highlight class="stringliteral">&apos;Tensor&apos;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;{}{}{}Tensor&quot;</highlight><highlight class="normal">.format(density_tag,<sp/>backend,<sp/>scalar_name)</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>env[</highlight><highlight class="stringliteral">&apos;Type&apos;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;{}{}{}Type&quot;</highlight><highlight class="normal">.format(density_tag,<sp/>backend,<sp/>scalar_name)</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>env[</highlight><highlight class="stringliteral">&apos;DenseTensor&apos;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;{}{}Tensor&quot;</highlight><highlight class="normal">.format(backend,<sp/>scalar_name)</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>env[</highlight><highlight class="stringliteral">&apos;Backend&apos;</highlight><highlight class="normal">]<sp/>=<sp/>density_tag<sp/>+<sp/>backend</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>env[</highlight><highlight class="stringliteral">&apos;DenseBackend&apos;</highlight><highlight class="normal">]<sp/>=<sp/>backend</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>env[</highlight><highlight class="stringliteral">&apos;storage_tensor_headers&apos;</highlight><highlight class="normal">]<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>density<sp/>!=<sp/></highlight><highlight class="stringliteral">&apos;Sparse&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env[</highlight><highlight class="stringliteral">&apos;storage_tensor_headers&apos;</highlight><highlight class="normal">]<sp/>=<sp/>[</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;#include<sp/>&quot;ATen/{}.h&quot;&apos;</highlight><highlight class="normal">.format(env[</highlight><highlight class="stringliteral">&apos;Storage&apos;</highlight><highlight class="normal">]),</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;#include<sp/>&quot;ATen/{}.h&quot;&apos;</highlight><highlight class="normal">.format(env[</highlight><highlight class="stringliteral">&apos;Tensor&apos;</highlight><highlight class="normal">]),</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;#include<sp/>&quot;ATen/{}ByteTensor.h&quot;&apos;</highlight><highlight class="normal">.format(env[</highlight><highlight class="stringliteral">&apos;Backend&apos;</highlight><highlight class="normal">]),</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;#include<sp/>&quot;ATen/{}IntTensor.h&quot;&apos;</highlight><highlight class="normal">.format(env[</highlight><highlight class="stringliteral">&apos;Backend&apos;</highlight><highlight class="normal">]),</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;#include<sp/>&quot;ATen/{}LongTensor.h&quot;&apos;</highlight><highlight class="normal">.format(env[</highlight><highlight class="stringliteral">&apos;Backend&apos;</highlight><highlight class="normal">]),</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>used<sp/>for<sp/>generating<sp/>switch<sp/>logic<sp/>for<sp/>external<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>tag<sp/>=<sp/>density_tag<sp/>+<sp/>backend<sp/>+<sp/>scalar_name</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>env[</highlight><highlight class="stringliteral">&apos;TypeID&apos;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;TypeID::&apos;</highlight><highlight class="normal"><sp/>+<sp/>tag</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>top_env[</highlight><highlight class="stringliteral">&apos;type_ids&apos;</highlight><highlight class="normal">].append(tag<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;,&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>backend<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;CUDA&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env[</highlight><highlight class="stringliteral">&apos;th_headers&apos;</highlight><highlight class="normal">]<sp/>=<sp/>[</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;#include<sp/>&lt;THC/THC.h&gt;&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;#include<sp/>&lt;THC/THCTensor.hpp&gt;&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;#include<sp/>&lt;THCUNN/THCUNN.h&gt;&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;#undef<sp/>THNN_&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;#undef<sp/>THCIndexTensor_&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env[</highlight><highlight class="stringliteral">&apos;extra_cuda_headers&apos;</highlight><highlight class="normal">]<sp/>=<sp/>[</highlight><highlight class="stringliteral">&apos;#include<sp/>&lt;ATen/cuda/CUDAHalf.cuh&gt;&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env[</highlight><highlight class="stringliteral">&apos;extra_cuda_headers&apos;</highlight><highlight class="normal">].append(</highlight><highlight class="stringliteral">&apos;#include<sp/>&lt;ATen/DeviceGuard.h&gt;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sname<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>scalar_name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Float&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>scalar_name</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env[</highlight><highlight class="stringliteral">&apos;THType&apos;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;Cuda{}&apos;</highlight><highlight class="normal">.format(sname)</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env[</highlight><highlight class="stringliteral">&apos;THStorage&apos;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;THCuda{}Storage&apos;</highlight><highlight class="normal">.format(sname)</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env[</highlight><highlight class="stringliteral">&apos;THTensor&apos;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;THCuda{}Tensor&apos;</highlight><highlight class="normal">.format(sname)</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env[</highlight><highlight class="stringliteral">&apos;THIndexTensor&apos;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;THCudaLongTensor&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env[</highlight><highlight class="stringliteral">&apos;state&apos;</highlight><highlight class="normal">]<sp/>=<sp/>[</highlight><highlight class="stringliteral">&apos;context-&gt;getTHCState()&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env[</highlight><highlight class="stringliteral">&apos;isCUDA&apos;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;true&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env[</highlight><highlight class="stringliteral">&apos;storage_device&apos;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;return<sp/>storage-&gt;device;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env[</highlight><highlight class="stringliteral">&apos;Generator&apos;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;CUDAGenerator&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env[</highlight><highlight class="stringliteral">&apos;th_headers&apos;</highlight><highlight class="normal">]<sp/>=<sp/>[</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;#include<sp/>&lt;TH/TH.h&gt;&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;#include<sp/>&lt;TH/THTensor.hpp&gt;&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;#include<sp/>&lt;THNN/THNN.h&gt;&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;#undef<sp/>THNN_&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env[</highlight><highlight class="stringliteral">&apos;extra_cuda_headers&apos;</highlight><highlight class="normal">]<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env[</highlight><highlight class="stringliteral">&apos;THType&apos;</highlight><highlight class="normal">]<sp/>=<sp/>scalar_name</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env[</highlight><highlight class="stringliteral">&apos;THStorage&apos;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;TH{}Storage&quot;</highlight><highlight class="normal">.format(scalar_name)</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env[</highlight><highlight class="stringliteral">&apos;THTensor&apos;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;TH{}Tensor&apos;</highlight><highlight class="normal">.format(scalar_name)</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env[</highlight><highlight class="stringliteral">&apos;THIndexTensor&apos;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;THLongTensor&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env[</highlight><highlight class="stringliteral">&apos;state&apos;</highlight><highlight class="normal">]<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env[</highlight><highlight class="stringliteral">&apos;isCUDA&apos;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;false&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env[</highlight><highlight class="stringliteral">&apos;storage_device&apos;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;throw<sp/>std::runtime_error(&quot;CPU<sp/>storage<sp/>has<sp/>no<sp/>device&quot;);&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env[</highlight><highlight class="stringliteral">&apos;Generator&apos;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;CPUGenerator&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>env[</highlight><highlight class="stringliteral">&apos;AS_REAL&apos;</highlight><highlight class="normal">]<sp/>=<sp/>env[</highlight><highlight class="stringliteral">&apos;ScalarType&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>scalar_name<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Half&quot;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env[</highlight><highlight class="stringliteral">&apos;SparseTensor&apos;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;Tensor&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>backend<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;CUDA&quot;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env[</highlight><highlight class="stringliteral">&apos;to_th_type&apos;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;HalfFix&lt;__half,Half&gt;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env[</highlight><highlight class="stringliteral">&apos;to_at_type&apos;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;HalfFix&lt;Half,__half&gt;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env[</highlight><highlight class="stringliteral">&apos;AS_REAL&apos;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;convert&lt;half,double&gt;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env[</highlight><highlight class="stringliteral">&apos;THScalarType&apos;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;half&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env[</highlight><highlight class="stringliteral">&apos;to_th_type&apos;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;HalfFix&lt;THHalf,Half&gt;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env[</highlight><highlight class="stringliteral">&apos;to_at_type&apos;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;HalfFix&lt;Half,THHalf&gt;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>scalar_name<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;Long&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env[</highlight><highlight class="stringliteral">&apos;to_th_type&apos;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;long&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env[</highlight><highlight class="stringliteral">&apos;to_at_type&apos;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;int64_t&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env[</highlight><highlight class="stringliteral">&apos;to_th_type&apos;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env[</highlight><highlight class="stringliteral">&apos;to_at_type&apos;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>declarations,<sp/>definitions<sp/>=<sp/><ref refid="function__wrapper_8py_1a0715f118a7167476d67892e940d4995c" kindref="member">function_wrapper.create_derived</ref>(</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env,<sp/>declarations)</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>env[</highlight><highlight class="stringliteral">&apos;type_derived_method_declarations&apos;</highlight><highlight class="normal">]<sp/>=<sp/>declarations</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>env[</highlight><highlight class="stringliteral">&apos;type_derived_method_definitions&apos;</highlight><highlight class="normal">]<sp/>=<sp/>definitions</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>fm<sp/>=<sp/>file_manager</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>env[</highlight><highlight class="stringliteral">&apos;DenseBackend&apos;</highlight><highlight class="normal">]<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;CUDA&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fm<sp/>=<sp/>cuda_file_manager</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>density<sp/>!=<sp/></highlight><highlight class="stringliteral">&apos;Sparse&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>there<sp/>are<sp/>no<sp/>storage<sp/>or<sp/>tensor<sp/>types<sp/>for<sp/>sparse;<sp/>it&apos;s<sp/>all<sp/>uniform</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fm.write(env[</highlight><highlight class="stringliteral">&apos;Storage&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.cpp&quot;</highlight><highlight class="normal">,<sp/>STORAGE_DERIVED_CPP,<sp/>env)</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fm.write(env[</highlight><highlight class="stringliteral">&apos;Storage&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.h&quot;</highlight><highlight class="normal">,<sp/>STORAGE_DERIVED_H,<sp/>env)</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env[</highlight><highlight class="stringliteral">&apos;TensorDenseOrSparse&apos;</highlight><highlight class="normal">]<sp/>=<sp/>TENSOR_DENSE_CPP.substitute(env)</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fm.write(env[</highlight><highlight class="stringliteral">&apos;Tensor&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.cpp&quot;</highlight><highlight class="normal">,<sp/>TENSOR_DERIVED_CPP,<sp/>env)</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fm.write(env[</highlight><highlight class="stringliteral">&apos;Tensor&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.h&quot;</highlight><highlight class="normal">,<sp/>TENSOR_DERIVED_H,<sp/>env)</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>density<sp/>!=<sp/></highlight><highlight class="stringliteral">&apos;Sparse&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fm.write(env[</highlight><highlight class="stringliteral">&apos;Type&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.cpp&quot;</highlight><highlight class="normal">,<sp/>TYPE_DERIVED_CPP,<sp/>env)</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fm.write(env[</highlight><highlight class="stringliteral">&apos;Type&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.cpp&quot;</highlight><highlight class="normal">,<sp/>SPARSE_TYPE_DERIVED_CPP,<sp/>env)</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>fm.write(env[</highlight><highlight class="stringliteral">&apos;Type&apos;</highlight><highlight class="normal">]<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.h&quot;</highlight><highlight class="normal">,<sp/>TYPE_DERIVED_H,<sp/>env)</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>type_register<sp/>=<sp/>TYPE_REGISTER.substitute(backend=env[</highlight><highlight class="stringliteral">&apos;Backend&apos;</highlight><highlight class="normal">],<sp/>scalar_type=scalar_name,<sp/>type_name=env[</highlight><highlight class="stringliteral">&apos;Type&apos;</highlight><highlight class="normal">])</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>env[</highlight><highlight class="stringliteral">&apos;DenseBackend&apos;</highlight><highlight class="normal">]<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;CPU&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>top_env[</highlight><highlight class="stringliteral">&apos;cpu_type_registrations&apos;</highlight><highlight class="normal">].append(type_register)</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>top_env[</highlight><highlight class="stringliteral">&apos;cpu_type_headers&apos;</highlight><highlight class="normal">].append(</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;#include<sp/>&quot;ATen/{}.h&quot;&apos;</highlight><highlight class="normal">.format(env[</highlight><highlight class="stringliteral">&apos;Type&apos;</highlight><highlight class="normal">]))</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>env[</highlight><highlight class="stringliteral">&apos;DenseBackend&apos;</highlight><highlight class="normal">]<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;CUDA&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>top_env[</highlight><highlight class="stringliteral">&apos;cuda_type_registrations&apos;</highlight><highlight class="normal">].append(type_register)</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>top_env[</highlight><highlight class="stringliteral">&apos;cuda_type_headers&apos;</highlight><highlight class="normal">].append(</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;#include<sp/>&quot;ATen/{}.h&quot;&apos;</highlight><highlight class="normal">.format(env[</highlight><highlight class="stringliteral">&apos;Type&apos;</highlight><highlight class="normal">]))</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>env</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">iterate_types():</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>backend<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>backends:</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>density<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>densities:</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>scalar_type<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>scalar_types:</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>density<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;Sparse&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>scalar_type[0]<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;Half&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>THS<sp/>does<sp/>not<sp/>do<sp/>half<sp/>type<sp/>yet.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">yield</highlight><highlight class="normal"><sp/>(backend,<sp/>density,<sp/>scalar_type)</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">declare_outputs():</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>files<sp/>=<sp/>[</highlight><highlight class="stringliteral">&apos;Declarations.yaml&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;Type.h&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;Type.cpp&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;Tensor.h&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;TensorMethods.h&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;Functions.h&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;CPUCopy.cpp&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;NativeFunctions.h&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>f<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>files:</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file_manager.will_write(f)</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>cuda_files<sp/>=<sp/>[</highlight><highlight class="stringliteral">&apos;CUDACopy.cpp&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;RegisterCUDA.cpp&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;RegisterCUDA.h&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>f<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>cuda_files:</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cuda_file_manager.will_write(f)</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>fname<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>sorted(generators.keys()):</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fm<sp/>=<sp/>file_manager</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>generators[fname][</highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal">]<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;CUDA&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fm<sp/>=<sp/>cuda_file_manager</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fm.will_write(fname)</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>backend,<sp/>density,<sp/>scalar_types<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>iterate_types():</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scalar_name<sp/>=<sp/>scalar_types[0]</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>full_backend<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Sparse&quot;</highlight><highlight class="normal"><sp/>+<sp/>backend<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>density<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Sparse&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>backend</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>kind<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>[</highlight><highlight class="stringliteral">&quot;Storage&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Type&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Tensor&quot;</highlight><highlight class="normal">]:</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>kind<sp/>!=<sp/></highlight><highlight class="stringliteral">&apos;Type&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>density<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Sparse&quot;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>No<sp/>Storage<sp/>or<sp/>Tensor<sp/>for<sp/>sparse</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fm<sp/>=<sp/>file_manager</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>backend<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;CUDA&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fm<sp/>=<sp/>cuda_file_manager</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fm.will_write(</highlight><highlight class="stringliteral">&quot;{}{}{}.h&quot;</highlight><highlight class="normal">.format(full_backend,<sp/>scalar_name,<sp/>kind))</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fm.will_write(</highlight><highlight class="stringliteral">&quot;{}{}{}.cpp&quot;</highlight><highlight class="normal">.format(full_backend,<sp/>scalar_name,<sp/>kind))</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">filter_by_extension(files,<sp/>*extensions):</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>filtered_files<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>file<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>files:</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>extension<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>extensions:</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>file.endswith(extension):</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filtered_files.append(file)</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>filtered_files</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">generate_outputs():</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>cwrap_files<sp/>=<sp/>filter_by_extension(options.files,<sp/></highlight><highlight class="stringliteral">&apos;.cwrap&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>nn_files<sp/>=<sp/>filter_by_extension(options.files,<sp/></highlight><highlight class="stringliteral">&apos;nn.yaml&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;.h&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>native_files<sp/>=<sp/>filter_by_extension(options.files,<sp/></highlight><highlight class="stringliteral">&apos;native_functions.yaml&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>declarations<sp/>=<sp/>[d</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>file<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>cwrap_files</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>d<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/><ref refid="cwrap__parser_8py_1a169fb5c3c179718b818fbb0cf6423906" kindref="member">cwrap_parser.parse</ref>(file)]</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>declarations<sp/>+=<sp/><ref refid="nn__parse_8py_1af396a5ce1e2aea8d344d0dd9ccac259d" kindref="member">nn_parse.run</ref>(nn_files)</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>declarations<sp/>+=<sp/><ref refid="native__parse_8py_1ae3e677848bfc0286b655983bedb3a578" kindref="member">native_parse.run</ref>(native_files)</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>declarations<sp/>=<sp/><ref refid="preprocess__declarations_8py_1a9b05b36b09bc34c4afd82bb1e7f4ecbb" kindref="member">preprocess_declarations.run</ref>(declarations)</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>fname,<sp/>env<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>generators.items():</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fm<sp/>=<sp/>file_manager</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>env[</highlight><highlight class="stringliteral">&apos;name&apos;</highlight><highlight class="normal">]<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;CUDA&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fm<sp/>=<sp/>cuda_file_manager</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fm.write(fname,<sp/>GENERATOR_DERIVED,<sp/>env)</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>note:<sp/>this<sp/>will<sp/>fill<sp/>in<sp/>top_env[&apos;type/tensor_method_declarations/definitions&apos;]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>and<sp/>modify<sp/>the<sp/>declarations<sp/>to<sp/>include<sp/>any<sp/>information<sp/>that<sp/>will<sp/>all_backends</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>be<sp/>used<sp/>by<sp/>function_wrapper.create_derived</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>output_declarations<sp/>=<sp/><ref refid="function__wrapper_8py_1a58a49e619ff5df97c8fa065f80ebc0a0" kindref="member">function_wrapper.create_generic</ref>(top_env,<sp/>declarations)</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>output_declarations<sp/>=<sp/>postprocess_output_declarations(output_declarations)</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>file_manager.write(</highlight><highlight class="stringliteral">&quot;Declarations.yaml&quot;</highlight><highlight class="normal">,<sp/>format_yaml(output_declarations))</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>populated<sp/>by<sp/>generate_storage_type_and_tensor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>all_types<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>backend,<sp/>density,<sp/>scalar_type<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>iterate_types():</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>all_types.append(generate_storage_type_and_tensor(</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>backend,<sp/>density,<sp/>scalar_type,<sp/>declarations))</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>file_manager.write(</highlight><highlight class="stringliteral">&apos;Type.h&apos;</highlight><highlight class="normal">,<sp/>TYPE_H,<sp/>top_env)</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>file_manager.write(</highlight><highlight class="stringliteral">&apos;Type.cpp&apos;</highlight><highlight class="normal">,<sp/>TYPE_CPP,<sp/>top_env)</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>cuda_file_manager.write(</highlight><highlight class="stringliteral">&apos;RegisterCUDA.h&apos;</highlight><highlight class="normal">,<sp/>REGISTER_CUDA_H,<sp/>top_env)</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>cuda_file_manager.write(</highlight><highlight class="stringliteral">&apos;RegisterCUDA.cpp&apos;</highlight><highlight class="normal">,<sp/>REGISTER_CUDA_CPP,<sp/>top_env)</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>file_manager.write(</highlight><highlight class="stringliteral">&apos;Tensor.h&apos;</highlight><highlight class="normal">,<sp/>TENSOR_H,<sp/>top_env)</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>file_manager.write(</highlight><highlight class="stringliteral">&apos;TensorMethods.h&apos;</highlight><highlight class="normal">,<sp/>TENSOR_METHODS_H,<sp/>top_env)</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>file_manager.write(</highlight><highlight class="stringliteral">&apos;Functions.h&apos;</highlight><highlight class="normal">,<sp/>FUNCTIONS_H,<sp/>top_env)</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>file_manager.write(</highlight><highlight class="stringliteral">&apos;CPUCopy.cpp&apos;</highlight><highlight class="normal">,<sp/><ref refid="copy__wrapper_8py_1a411b0ed606b7dc055b7dc23da69349b3" kindref="member">copy_wrapper.create</ref>(all_types,<sp/></highlight><highlight class="stringliteral">&apos;CPU&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>cuda_file_manager.write(</highlight><highlight class="stringliteral">&apos;CUDACopy.cpp&apos;</highlight><highlight class="normal">,<sp/><ref refid="copy__wrapper_8py_1a411b0ed606b7dc055b7dc23da69349b3" kindref="member">copy_wrapper.create</ref>(all_types,<sp/></highlight><highlight class="stringliteral">&apos;CUDA&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>file_manager.write(</highlight><highlight class="stringliteral">&apos;NativeFunctions.h&apos;</highlight><highlight class="normal">,<sp/>NATIVE_FUNCTIONS_H,<sp/>top_env)</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>file_manager.check_all_files_written()</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>cuda_file_manager.check_all_files_written()</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal">declare_outputs()</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>options.output_dependencies<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>file_manager.write_outputs(options.output_dependencies)</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>cuda_file_manager.write_outputs(options.output_dependencies<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;-cuda&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>generate_outputs()</highlight></codeline>
    </programlisting>
    <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/gen.py"/>
  </compounddef>
</doxygen>
