<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="structat_1_1_tensor" kind="struct" language="C++" prot="public">
    <compoundname>at::Tensor</compoundname>
    <basecompoundref refid="structat_1_1detail_1_1_tensor_base_impl" prot="public" virt="non-virtual">at::detail::TensorBaseImpl&lt; true &gt;</basecompoundref>
    <basecompoundref refid="structat_1_1detail_1_1_tensor_base_impl" prot="public" virt="non-virtual">at::detail::TensorBaseImpl&lt; true &gt;</basecompoundref>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structat_1_1_tensor_1a5bbe33ba47e9f9ff80cf2a7002a8b77d" prot="public" static="no">
        <type><ref refid="structat_1_1detail_1_1_tensor_base_impl" kindref="compound">detail::TensorBase</ref></type>
        <definition>using at::Tensor::TensorBase =  detail::TensorBase</definition>
        <argsstring></argsstring>
        <name>TensorBase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="46" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structat_1_1_tensor_1a5bbe33ba47e9f9ff80cf2a7002a8b77d" prot="public" static="no">
        <type><ref refid="structat_1_1detail_1_1_tensor_base_impl" kindref="compound">detail::TensorBase</ref></type>
        <definition>using at::Tensor::TensorBase =  detail::TensorBase</definition>
        <argsstring></argsstring>
        <name>TensorBase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" line="46" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="structat_1_1_tensor_1a4b7b5402b2b44f067d13e5704081e86d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend struct</type>
        <definition>friend struct WeakTensor</definition>
        <argsstring></argsstring>
        <name>WeakTensor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="664" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" bodystart="664" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="structat_1_1_tensor_1a479cdc1cee4cb7944658433290a34ec5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend void</type>
        <definition>void detail::set_data</definition>
        <argsstring>(Tensor &amp;tensor, Tensor new_data)</argsstring>
        <name>detail::set_data</name>
        <param>
          <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>tensor</declname>
        </param>
        <param>
          <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
          <declname>new_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="190" column="1"/>
      </memberdef>
      <memberdef kind="friend" id="structat_1_1_tensor_1a479cdc1cee4cb7944658433290a34ec5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend void</type>
        <definition>void detail::set_data</definition>
        <argsstring>(Tensor &amp;tensor, Tensor new_data)</argsstring>
        <name>detail::set_data</name>
        <param>
          <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>tensor</declname>
        </param>
        <param>
          <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
          <declname>new_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" line="190" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structat_1_1_tensor_1a039978832ec3a6b24f9af266d06b40fc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>at::Tensor::Tensor</definition>
        <argsstring>()</argsstring>
        <name>Tensor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="47" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" bodystart="47" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a215230ad15931dd6d4cf13a0048ce724" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>at::Tensor::Tensor</definition>
        <argsstring>(TensorImpl *self, bool retain)</argsstring>
        <name>Tensor</name>
        <param>
          <type><ref refid="structat_1_1_tensor_impl" kindref="compound">TensorImpl</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>retain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="48" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" bodystart="48" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a413eca0f4a1371c06984eef6d61a9cb5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>at::Tensor::Tensor</definition>
        <argsstring>(const TensorBase &amp;rhs)</argsstring>
        <name>Tensor</name>
        <param>
          <type>const <ref refid="structat_1_1detail_1_1_tensor_base_impl" kindref="compound">TensorBase</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="49" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" bodystart="49" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a7d6f9940c1f522ce80208146737bb08c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>at::Tensor::Tensor</definition>
        <argsstring>(const Tensor &amp;rhs)=default</argsstring>
        <name>Tensor</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="50" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a8336cdb38b3fb2b2c8b72ebf92921dd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>at::Tensor::Tensor</definition>
        <argsstring>(Tensor &amp;&amp;rhs) noexcept=default</argsstring>
        <name>Tensor</name>
        <param>
          <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="51" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1aba0360b6e7817289654afd051c2b7877" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::operator=</definition>
        <argsstring>(Tensor &amp;&amp;rhs) &amp;</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="54" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" bodystart="54" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a5997f90b8da1fdc40d6f1259b643d2a8" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::operator=</definition>
        <argsstring>(Tensor const &amp;rhs) &amp;</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="58" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" bodystart="58" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1aa3779019dff93334a07a334c5d3bc3b9" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="rvalue" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; at::Tensor::operator=</definition>
        <argsstring>(Tensor const &amp;rhs) &amp;&amp;</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="66" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/TensorMethods.h" bodystart="12" bodyend="14"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ae7c2fadef5f73c712cbd854b6ec942c4" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="rvalue" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; at::Tensor::operator=</definition>
        <argsstring>(Scalar v) &amp;&amp;</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="67" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/TensorOperators.h" bodystart="13" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1aec3eab956d4122607d69a13c413a5820" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* at::Tensor::toString</definition>
        <argsstring>() const</argsstring>
        <name>toString</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="68" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" bodystart="68" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a5bb72ece57cc45451a7f6f8df3542a03" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classat_1_1_array_ref" kindref="compound">IntList</ref></type>
        <definition>IntList at::Tensor::sizes</definition>
        <argsstring>() const</argsstring>
        <name>sizes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="71" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" bodystart="71" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a79ef5820221f4bc6a16f17f3557ec2a4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classat_1_1_array_ref" kindref="compound">IntList</ref></type>
        <definition>IntList at::Tensor::strides</definition>
        <argsstring>() const</argsstring>
        <name>strides</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="74" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" bodystart="74" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a21212903d6207e1e999834a3cb866b69" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t at::Tensor::ndimension</definition>
        <argsstring>() const</argsstring>
        <name>ndimension</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="77" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" bodystart="77" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ad556453a05af0ed569b78f0f5692e02a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structat_1_1_type" kindref="compound">Type</ref> &amp;</type>
        <definition>Type&amp; at::Tensor::type</definition>
        <argsstring>() const</argsstring>
        <name>type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="80" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" bodystart="80" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a6b4417f517712ee6c791ff0e67518292" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="structat_1_1_storage" kindref="compound">Storage</ref> &gt;</type>
        <definition>std::unique_ptr&lt;Storage&gt; at::Tensor::storage</definition>
        <argsstring>() const</argsstring>
        <name>storage</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="83" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" bodystart="83" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ad9ac7797b0064558da1b2d918452d695" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::toType</definition>
        <argsstring>(const Type &amp;t, bool non_blocking=false) const</argsstring>
        <name>toType</name>
        <param>
          <type>const <ref refid="structat_1_1_type" kindref="compound">Type</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>non_blocking</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="86" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/TensorMethods.h" bodystart="16" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a186067c3d65b2f5d0856cec29ce522c5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; at::Tensor::copy_</definition>
        <argsstring>(const Tensor &amp;src, bool non_blocking=false)</argsstring>
        <name>copy_</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>non_blocking</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="87" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/TensorMethods.h" bodystart="22" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1aa43d66c764bedf5978c4c5a0b2b477a9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::toType</definition>
        <argsstring>(ScalarType t) const</argsstring>
        <name>toType</name>
        <param>
          <type>ScalarType</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="88" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/TensorMethods.h" bodystart="26" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a3d27045aef471bf10389aab232fd5012" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::toBackend</definition>
        <argsstring>(Backend b) const</argsstring>
        <name>toBackend</name>
        <param>
          <type>Backend</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="89" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/TensorMethods.h" bodystart="30" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1af02d1520be96cf71c531b1eb4b20aa9e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::to</definition>
        <argsstring>(Device device, ScalarType dtype, bool non_blocking=false) const</argsstring>
        <name>to</name>
        <param>
          <type><ref refid="structat_1_1_device" kindref="compound">Device</ref></type>
          <declname>device</declname>
        </param>
        <param>
          <type>ScalarType</type>
          <declname>dtype</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>non_blocking</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>New-style <computeroutput><ref refid="structat_1_1_tensor_1af02d1520be96cf71c531b1eb4b20aa9e" kindref="member">to()</ref></computeroutput> methods. NB: These methods are defined in <ref refid="_tensor_options_8h_source" kindref="compound">TensorOptions.h</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="93" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/TensorOptions.h" bodystart="259" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a8b73c49def01e67f7c46e52041ff55fa" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::to</definition>
        <argsstring>(ScalarType dtype, bool non_blocking=false) const</argsstring>
        <name>to</name>
        <param>
          <type>ScalarType</type>
          <declname>dtype</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>non_blocking</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="94" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/TensorOptions.h" bodystart="267" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a40856e6e6c0406d068f1041e47b54401" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::to</definition>
        <argsstring>(Device device, bool non_blocking=false) const</argsstring>
        <name>to</name>
        <param>
          <type><ref refid="structat_1_1_device" kindref="compound">Device</ref></type>
          <declname>device</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>non_blocking</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="95" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/TensorOptions.h" bodystart="274" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ae5fe03a55a50933e6f2e51c4930ea4cc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool at::Tensor::is_variable</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_variable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if the <computeroutput><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></computeroutput> is actually a <computeroutput>torch::autograd::Variable</computeroutput>. Defined in <ref refid="_type_8h_source" kindref="compound">Type.h</ref> because of include order issues. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="99" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Type.h" bodystart="106" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ae354b0becb671916dceec56663fedda1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Layout</type>
        <definition>Layout at::Tensor::layout</definition>
        <argsstring>() const noexcept</argsstring>
        <name>layout</name>
        <briefdescription>
<para>Returns a <computeroutput><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></computeroutput>&apos;s layout. Defined in <ref refid="_type_8h_source" kindref="compound">Type.h</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="102" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Type.h" bodystart="114" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1acb9e0d281b1fa351141cbc61730db10a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ScalarType</type>
        <definition>ScalarType at::Tensor::dtype</definition>
        <argsstring>() const noexcept</argsstring>
        <name>dtype</name>
        <briefdescription>
<para>Returns a <computeroutput><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></computeroutput>&apos;s dtype (<computeroutput>ScalarType</computeroutput>). Defined in <ref refid="_type_8h_source" kindref="compound">Type.h</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="105" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Type.h" bodystart="110" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ad111f2086ee52a8b4c489033085af9a6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structat_1_1_device" kindref="compound">Device</ref></type>
        <definition>Device at::Tensor::device</definition>
        <argsstring>() const</argsstring>
        <name>device</name>
        <briefdescription>
<para>Returns a <computeroutput><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></computeroutput>&apos;s device. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="108" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Type.h" bodystart="118" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a7d7c4c2a7b516b004f78940584c4491e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor_options" kindref="compound">TensorOptions</ref></type>
        <definition>TensorOptions at::Tensor::options</definition>
        <argsstring>() const</argsstring>
        <name>options</name>
        <briefdescription>
<para>From Tensor.h. </para>        </briefdescription>
        <detaileddescription>
<para>Returns the <computeroutput><ref refid="structat_1_1_tensor_options" kindref="compound">TensorOptions</ref></computeroutput> corresponding to this <computeroutput><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></computeroutput>. Defined in <ref refid="_tensor_options_8h_source" kindref="compound">TensorOptions.h</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="112" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/TensorOptions.h" bodystart="241" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1afaa563865a1e92d308d1811a830ec2d6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T *</type>
        <definition>T* at::Tensor::data</definition>
        <argsstring>() const</argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="115" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1acc59ad301571518b7e551b2349c365fb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void *</type>
        <definition>void* at::Tensor::unsafeGetTH</definition>
        <argsstring>(bool retain) const</argsstring>
        <name>unsafeGetTH</name>
        <param>
          <type>bool</type>
          <declname>retain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="117" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" bodystart="117" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a0813dead9f99a37c8f7808e4273893b3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor_impl" kindref="compound">TensorImpl</ref> *</type>
        <definition>TensorImpl* at::Tensor::unsafeGetTensorImpl</definition>
        <argsstring>() const</argsstring>
        <name>unsafeGetTensorImpl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="122" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" bodystart="122" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a9b6e24ffef0f70fd10b54854f0d18c50" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void at::Tensor::print</definition>
        <argsstring>() const</argsstring>
        <name>print</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="127" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/Tensor.cpp" bodystart="7" bodyend="13"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a2235b823846523f6296d472a6ae20637" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>at::Tensor::AT_FORALL_SCALAR_TYPES</definition>
        <argsstring>(TO_TYPE_DATA) AT_FORALL_SCALAR_TYPES(TO_C_TYPE) template&lt; typename T</argsstring>
        <name>AT_FORALL_SCALAR_TYPES</name>
        <param>
          <type>TO_TYPE_DATA</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="132" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a9c17adbcd77d245b00cd96228892e35c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t N <ref refid="classat_1_1_tensor_accessor" kindref="compound">TensorAccessor</ref>&lt; T, N &gt;</type>
        <definition>size_t N TensorAccessor&lt;T,N&gt; at::Tensor::accessor</definition>
        <argsstring>() const</argsstring>
        <name>accessor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="141" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" bodystart="141" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ac5a10f0ec1c908de5cb9fa3100d96729" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::operator-</definition>
        <argsstring>() const</argsstring>
        <name>operator-</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="147" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/TensorOperators.h" bodystart="16" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a9467fbd61c6fe2cb141580b3cfca3bf4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; at::Tensor::operator+=</definition>
        <argsstring>(const Tensor &amp;other)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="148" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/TensorOperators.h" bodystart="19" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a0ee5c2f34fc6ec2776343be37dbf2362" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; at::Tensor::operator+=</definition>
        <argsstring>(Scalar other)</argsstring>
        <name>operator+=</name>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="149" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/TensorOperators.h" bodystart="22" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a5c45b92d199ee03fafc82415227dcfb5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; at::Tensor::operator-=</definition>
        <argsstring>(const Tensor &amp;other)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="150" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/TensorOperators.h" bodystart="25" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ad8c565272befb6e37b498cfbf443ff2f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; at::Tensor::operator-=</definition>
        <argsstring>(Scalar other)</argsstring>
        <name>operator-=</name>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="151" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/TensorOperators.h" bodystart="28" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a9e8edb1b85a6a17c27c075d232b62930" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; at::Tensor::operator*=</definition>
        <argsstring>(const Tensor &amp;other)</argsstring>
        <name>operator*=</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="152" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/TensorOperators.h" bodystart="31" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a374bb8418148eac65074f3eb586187f1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; at::Tensor::operator*=</definition>
        <argsstring>(Scalar other)</argsstring>
        <name>operator*=</name>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="153" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/TensorOperators.h" bodystart="34" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a4ab8e574d1674c5dca8b2c3299b7c639" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; at::Tensor::operator/=</definition>
        <argsstring>(const Tensor &amp;other)</argsstring>
        <name>operator/=</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="154" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/TensorOperators.h" bodystart="37" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a37ccae9b987ac98eeb5cd00d342d2d13" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor &amp; at::Tensor::operator/=</definition>
        <argsstring>(Scalar other)</argsstring>
        <name>operator/=</name>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="155" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/TensorOperators.h" bodystart="40" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a6e567f2b7f429044b54d5940f1b09506" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::operator[]</definition>
        <argsstring>(Scalar index) const</argsstring>
        <name>operator[]</name>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="156" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/TensorOperators.h" bodystart="43" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1aeb24fe655e368ccb888d9f12b0823626" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::operator[]</definition>
        <argsstring>(Tensor index) const</argsstring>
        <name>operator[]</name>
        <param>
          <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="157" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/TensorOperators.h" bodystart="50" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a32bcd42290b70dce6533e5aa214ff01c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::operator[]</definition>
        <argsstring>(int64_t index) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>int64_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="158" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/TensorOperators.h" bodystart="60" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1aaf29c01d712884e0cc2d25c3b2ef2e2c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::set_requires_grad</definition>
        <argsstring>(bool requires_grad)</argsstring>
        <name>set_requires_grad</name>
        <param>
          <type>bool</type>
          <declname>requires_grad</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="162" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" bodystart="162" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a36a7381b20f6ec46dcb98b724f2422bd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool at::Tensor::requires_grad</definition>
        <argsstring>() const</argsstring>
        <name>requires_grad</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="166" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" bodystart="166" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a027d9ee6f5a537b603bf335e8f20d9ec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::grad</definition>
        <argsstring>()</argsstring>
        <name>grad</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="170" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" bodystart="170" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a9a211415475a1d7c00732fa163055d2d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>const Tensor&amp; at::Tensor::grad</definition>
        <argsstring>() const</argsstring>
        <name>grad</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="173" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" bodystart="173" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1af9772c55d9743b56ac9742ebe76ca4b8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::detach</definition>
        <argsstring>() const</argsstring>
        <name>detach</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="177" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" bodystart="177" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a04c556c86cd9fb2f8bfcde768a7e231e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void at::Tensor::detach_</definition>
        <argsstring>()</argsstring>
        <name>detach_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="180" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" bodystart="180" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a2e70953ca9af09ced061b89433719d06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void at::Tensor::backward</definition>
        <argsstring>(at::optional&lt; Tensor &gt; gradient=at::nullopt, bool keep_graph=false, bool create_graph=false)</argsstring>
        <name>backward</name>
        <param>
          <type><ref refid="classat_1_1optional" kindref="compound">at::optional</ref>&lt; <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &gt;</type>
          <declname>gradient</declname>
          <defval>at::nullopt</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>keep_graph</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>create_graph</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Computes the gradient of current tensor w.r.t. graph leaves. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="185" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/TensorImpl.cpp" bodystart="30" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a2fa08c3732fd2970b89c6cfccfb11289" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t at::Tensor::storage_offset</definition>
        <argsstring>() const</argsstring>
        <name>storage_offset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="197" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1aca336294e0ac7f9149cfcbe162afba04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::resize_</definition>
        <argsstring>(IntList size)</argsstring>
        <name>resize_</name>
        <param>
          <type><ref refid="classat_1_1_array_ref" kindref="compound">IntList</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="198" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a5d043d24facdbcb41500287ffefe2caa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::set_</definition>
        <argsstring>(Storage &amp;source)</argsstring>
        <name>set_</name>
        <param>
          <type><ref refid="structat_1_1_storage" kindref="compound">Storage</ref> &amp;</type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="199" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1aac874adbe2bd3232881ce59906e55af2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::set_</definition>
        <argsstring>(Storage &amp;source, int64_t storage_offset, IntList size, IntList stride={})</argsstring>
        <name>set_</name>
        <param>
          <type><ref refid="structat_1_1_storage" kindref="compound">Storage</ref> &amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>storage_offset</declname>
        </param>
        <param>
          <type><ref refid="classat_1_1_array_ref" kindref="compound">IntList</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="classat_1_1_array_ref" kindref="compound">IntList</ref></type>
          <declname>stride</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="200" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ab68b448dafcaa4a3fe9750574c5d1e7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::set_</definition>
        <argsstring>(const Tensor &amp;source)</argsstring>
        <name>set_</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="201" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a99f246116a7c3d57f4d90e52d951aba4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::set_</definition>
        <argsstring>()</argsstring>
        <name>set_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="202" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1afd3716b7ba174bae62e5a8555eec63c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::_fill_</definition>
        <argsstring>(Scalar value)</argsstring>
        <name>_fill_</name>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="203" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a622dc488ed95918264756b1516ae17cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::_fill_</definition>
        <argsstring>(const Tensor &amp;value)</argsstring>
        <name>_fill_</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="204" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1aaa8df2cd2f60c42b926858e26dcbd7f4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool at::Tensor::is_contiguous</definition>
        <argsstring>() const</argsstring>
        <name>is_contiguous</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="205" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a064895a376b5d4bb39d374ea85fbb623" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool at::Tensor::is_set_to</definition>
        <argsstring>(const Tensor &amp;tensor) const</argsstring>
        <name>is_set_to</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>tensor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="206" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a24070e4df625fcdfd523fbbca7e96132" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::masked_fill_</definition>
        <argsstring>(const Tensor &amp;mask, Scalar value)</argsstring>
        <name>masked_fill_</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="207" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a3995daff4eb65e81c3c13b8e2d01507f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::masked_fill_</definition>
        <argsstring>(const Tensor &amp;mask, const Tensor &amp;value)</argsstring>
        <name>masked_fill_</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="208" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1aadb139c2fd0906af25e67b62e084e5a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::masked_scatter_</definition>
        <argsstring>(const Tensor &amp;mask, const Tensor &amp;source)</argsstring>
        <name>masked_scatter_</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="209" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a0f55c02364de5ce6773884ea90bef9ad" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::masked_select</definition>
        <argsstring>(const Tensor &amp;mask) const</argsstring>
        <name>masked_select</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="210" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a79c570fe7d6b6a357b5ac0f8c33ef2ea" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::nonzero</definition>
        <argsstring>() const</argsstring>
        <name>nonzero</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="211" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a828d6a0bff4abd343ab295aff41dd5ca" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::contiguous</definition>
        <argsstring>() const</argsstring>
        <name>contiguous</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="212" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1acdb581f6090f72a621bc143e91e293e4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::view</definition>
        <argsstring>(IntList size) const</argsstring>
        <name>view</name>
        <param>
          <type><ref refid="classat_1_1_array_ref" kindref="compound">IntList</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="213" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ad04312e5fff9d9d614e648b15639cf5a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::index_select</definition>
        <argsstring>(int64_t dim, const Tensor &amp;index) const</argsstring>
        <name>index_select</name>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="214" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a81d8831d1a20f1ecdb3deb15de1038fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::_indexCopy_</definition>
        <argsstring>(int64_t dim, const Tensor &amp;index, const Tensor &amp;source)</argsstring>
        <name>_indexCopy_</name>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="215" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a8f5d6b478cb4df2a5b3c007cb940592f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::take</definition>
        <argsstring>(const Tensor &amp;index) const</argsstring>
        <name>take</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="216" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a7cae1425ac00e1a1d489c1ab6604443f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::put_</definition>
        <argsstring>(const Tensor &amp;index, const Tensor &amp;source, bool accumulate=false)</argsstring>
        <name>put_</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>accumulate</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="217" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a1d6305ef5d9bea97ea437013f7a2e10a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::index_add_</definition>
        <argsstring>(int64_t dim, const Tensor &amp;index, const Tensor &amp;source)</argsstring>
        <name>index_add_</name>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="218" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a886d886eb673fc1147186f3262330d46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::index_fill_</definition>
        <argsstring>(int64_t dim, const Tensor &amp;index, Scalar value)</argsstring>
        <name>index_fill_</name>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="219" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a1f67d8100f27cb64292370c2d16ce3d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::index_fill_</definition>
        <argsstring>(int64_t dim, const Tensor &amp;index, const Tensor &amp;value)</argsstring>
        <name>index_fill_</name>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="220" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a08105083bd7c897e76c4400cba457e7c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::unfold</definition>
        <argsstring>(int64_t dimension, int64_t size, int64_t step) const</argsstring>
        <name>unfold</name>
        <param>
          <type>int64_t</type>
          <declname>dimension</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>step</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="221" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a13a185feec9b1878d5b47346b3e41f87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::scatter_</definition>
        <argsstring>(int64_t dim, const Tensor &amp;index, const Tensor &amp;src)</argsstring>
        <name>scatter_</name>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="222" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a5cd6c308cb912a8bdf80d1613d60f291" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::scatter_</definition>
        <argsstring>(int64_t dim, const Tensor &amp;index, Scalar value)</argsstring>
        <name>scatter_</name>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="223" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a237fcc9cce8b03bbc186d99362d0fa0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::scatter_add_</definition>
        <argsstring>(int64_t dim, const Tensor &amp;index, const Tensor &amp;src)</argsstring>
        <name>scatter_add_</name>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="224" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1afbf69e6f03c996da2eff6edbcaa7efc1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::gather</definition>
        <argsstring>(int64_t dim, const Tensor &amp;index) const</argsstring>
        <name>gather</name>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="225" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1aa6099651b7c5c2885ecbdd71ff401fa4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* at::Tensor::data_ptr</definition>
        <argsstring>() const</argsstring>
        <name>data_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="226" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a3f1ac0f5e7e9b7989bb34cfb7007e8c0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool at::Tensor::equal</definition>
        <argsstring>(const Tensor &amp;other) const</argsstring>
        <name>equal</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="227" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ab86c3af5d24f410a02a902f00e066d10" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::__and__</definition>
        <argsstring>(Scalar other) const</argsstring>
        <name>__and__</name>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="228" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a5f51085ac675f784b5244fa1e575efbd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::__and__</definition>
        <argsstring>(const Tensor &amp;other) const</argsstring>
        <name>__and__</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="229" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a439bd8d5d235df21e8a59a3e2ac33d69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::__iand__</definition>
        <argsstring>(Scalar other)</argsstring>
        <name>__iand__</name>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="230" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a1dcac7e0fbc821d97d46b9104524483a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::__iand__</definition>
        <argsstring>(const Tensor &amp;other)</argsstring>
        <name>__iand__</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="231" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a4ea101d103f8147f8915531125daf633" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::__or__</definition>
        <argsstring>(Scalar other) const</argsstring>
        <name>__or__</name>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="232" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a8ed63ffc15bbc03fa528582f58c1a37a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::__or__</definition>
        <argsstring>(const Tensor &amp;other) const</argsstring>
        <name>__or__</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="233" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a2dc922ab7684b273d21d3979fe433678" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::__ior__</definition>
        <argsstring>(Scalar other)</argsstring>
        <name>__ior__</name>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="234" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ae0b9a520f7c0155f11bb3c7d0d578fa8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::__ior__</definition>
        <argsstring>(const Tensor &amp;other)</argsstring>
        <name>__ior__</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="235" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1aca24d76584ebd88b25748c8c008d28ab" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::__xor__</definition>
        <argsstring>(Scalar other) const</argsstring>
        <name>__xor__</name>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="236" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ad94c5385f3a960baf27f48cd37df2543" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::__xor__</definition>
        <argsstring>(const Tensor &amp;other) const</argsstring>
        <name>__xor__</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="237" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1af9fb0c3292aaded3b5a620d1a7d705c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::__ixor__</definition>
        <argsstring>(Scalar other)</argsstring>
        <name>__ixor__</name>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="238" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a519ce5765dbf4b0f71145c761c63630a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::__ixor__</definition>
        <argsstring>(const Tensor &amp;other)</argsstring>
        <name>__ixor__</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="239" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a56a429e5f141e7130436d161d7c7c425" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::__lshift__</definition>
        <argsstring>(Scalar other) const</argsstring>
        <name>__lshift__</name>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="240" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a79dc6f2d769aabf8dc6f12f776cb71ec" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::__lshift__</definition>
        <argsstring>(const Tensor &amp;other) const</argsstring>
        <name>__lshift__</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="241" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a402139bbba69be49a5756140a38fcbe3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::__ilshift__</definition>
        <argsstring>(Scalar other)</argsstring>
        <name>__ilshift__</name>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="242" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a71968fce087b274484dc31ea0bc6f7e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::__ilshift__</definition>
        <argsstring>(const Tensor &amp;other)</argsstring>
        <name>__ilshift__</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="243" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1aa638047ae4b1ad82d8ba5bd701577031" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::__rshift__</definition>
        <argsstring>(Scalar other) const</argsstring>
        <name>__rshift__</name>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="244" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a861b7bfa0aa9536ed442b1ce4cc3141d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::__rshift__</definition>
        <argsstring>(const Tensor &amp;other) const</argsstring>
        <name>__rshift__</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="245" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a56ba2f362a9c98872b91f71cc824be01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::__irshift__</definition>
        <argsstring>(Scalar other)</argsstring>
        <name>__irshift__</name>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="246" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1af54104285f3311dec1fae136f56769b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::__irshift__</definition>
        <argsstring>(const Tensor &amp;other)</argsstring>
        <name>__irshift__</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="247" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a669c7c0d1627b162f239cd7b243853f0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::lt</definition>
        <argsstring>(Scalar other) const</argsstring>
        <name>lt</name>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="248" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a26cc941a2cf03340e7b212e9a28e80e6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::lt</definition>
        <argsstring>(const Tensor &amp;other) const</argsstring>
        <name>lt</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="249" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ae1e21899eb1f8d4b3ca59ffc85dedfa6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::lt_</definition>
        <argsstring>(Scalar other)</argsstring>
        <name>lt_</name>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="250" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a84738083e4d72ce67c15446fce8d9755" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::lt_</definition>
        <argsstring>(const Tensor &amp;other)</argsstring>
        <name>lt_</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="251" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a11486d945916da5d7504447c48712b27" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::gt</definition>
        <argsstring>(Scalar other) const</argsstring>
        <name>gt</name>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="252" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1acc8d0701c0692a16decf4e63b24e85ef" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::gt</definition>
        <argsstring>(const Tensor &amp;other) const</argsstring>
        <name>gt</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="253" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a97dc36106a8d33446f61639bf361b1e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::gt_</definition>
        <argsstring>(Scalar other)</argsstring>
        <name>gt_</name>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="254" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ad6f948d7b919eced78177c21ea6b00e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::gt_</definition>
        <argsstring>(const Tensor &amp;other)</argsstring>
        <name>gt_</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="255" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a5246d1e088d473b64ffcda1872e4a089" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::le</definition>
        <argsstring>(Scalar other) const</argsstring>
        <name>le</name>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="256" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a2a7964ffb3e94decd0e6f8afe9ba7ff8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::le</definition>
        <argsstring>(const Tensor &amp;other) const</argsstring>
        <name>le</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="257" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1af0b945c205272a931cd925e909793361" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::le_</definition>
        <argsstring>(Scalar other)</argsstring>
        <name>le_</name>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="258" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a8cf48dcb61b85207360c02784fcd741d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::le_</definition>
        <argsstring>(const Tensor &amp;other)</argsstring>
        <name>le_</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="259" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a947d3b9df3d374569c9630ae577eb4bf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::ge</definition>
        <argsstring>(Scalar other) const</argsstring>
        <name>ge</name>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="260" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1aede9e733547ea9458f6ab02a354e73e9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::ge</definition>
        <argsstring>(const Tensor &amp;other) const</argsstring>
        <name>ge</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="261" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ad4713d3c87f5673bc0121835731f15b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::ge_</definition>
        <argsstring>(Scalar other)</argsstring>
        <name>ge_</name>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="262" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1aa2ba46624f01d6d26a4a9ef236a77e94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::ge_</definition>
        <argsstring>(const Tensor &amp;other)</argsstring>
        <name>ge_</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="263" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a01721fa249a37224cb435dc4bc9fb5f6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::eq</definition>
        <argsstring>(Scalar other) const</argsstring>
        <name>eq</name>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="264" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a40a733c72075d8fc2d24fb6c77938e26" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::eq</definition>
        <argsstring>(const Tensor &amp;other) const</argsstring>
        <name>eq</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="265" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a3e22e2b77888385a378933a23094cb36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::eq_</definition>
        <argsstring>(Scalar other)</argsstring>
        <name>eq_</name>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="266" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a6e5f0563af48bde4de49130d3dc68465" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::eq_</definition>
        <argsstring>(const Tensor &amp;other)</argsstring>
        <name>eq_</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="267" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1af5e96afd4ff440f8e931bccdb99bbe04" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::ne</definition>
        <argsstring>(Scalar other) const</argsstring>
        <name>ne</name>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="268" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a54e6e760fae3ea2635b0cf1dc7bcfd23" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::ne</definition>
        <argsstring>(const Tensor &amp;other) const</argsstring>
        <name>ne</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="269" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a0769515454df9244bd48e154648ffd21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::ne_</definition>
        <argsstring>(Scalar other)</argsstring>
        <name>ne_</name>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="270" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a8829c6851c4512445a4a5206279f429e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::ne_</definition>
        <argsstring>(const Tensor &amp;other)</argsstring>
        <name>ne_</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="271" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1aa450e162ab6d0c243336f5c9a33af6f4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::min</definition>
        <argsstring>(const Tensor &amp;other) const</argsstring>
        <name>min</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="272" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1abe279f478a9af41dd90c7ed18e56f870" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::min</definition>
        <argsstring>() const</argsstring>
        <name>min</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="273" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ac8899ca1c0405a4e983429c317b27e34" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::tuple&lt; <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref>, <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &gt;</type>
        <definition>std::tuple&lt;Tensor,Tensor&gt; at::Tensor::_th_min</definition>
        <argsstring>(int64_t dim, bool keepdim=false) const</argsstring>
        <name>_th_min</name>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>keepdim</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="274" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1acff95391a7fb44e927e8254221ee19f6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::max</definition>
        <argsstring>(const Tensor &amp;other) const</argsstring>
        <name>max</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="275" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a898424a7665f5633150045b162545387" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::max</definition>
        <argsstring>() const</argsstring>
        <name>max</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="276" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a3b2fd6b46d9c497c4562c4f13f7502f8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::tuple&lt; <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref>, <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &gt;</type>
        <definition>std::tuple&lt;Tensor,Tensor&gt; at::Tensor::_th_max</definition>
        <argsstring>(int64_t dim, bool keepdim=false) const</argsstring>
        <name>_th_max</name>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>keepdim</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="277" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a58c965b423727a9b2278ab2d50582820" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::tuple&lt; <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref>, <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &gt;</type>
        <definition>std::tuple&lt;Tensor,Tensor&gt; at::Tensor::_th_kthvalue</definition>
        <argsstring>(int64_t k, int64_t dim=-1, bool keepdim=false) const</argsstring>
        <name>_th_kthvalue</name>
        <param>
          <type>int64_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>keepdim</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="278" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a3b26d3ad2591d6f77c6a1d054d32ecf1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::tuple&lt; <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref>, <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &gt;</type>
        <definition>std::tuple&lt;Tensor,Tensor&gt; at::Tensor::_th_mode</definition>
        <argsstring>(int64_t dim=-1, bool keepdim=false) const</argsstring>
        <name>_th_mode</name>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>keepdim</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="279" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ace97fc34e96ec28a94b68bcff95ed483" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::median</definition>
        <argsstring>() const</argsstring>
        <name>median</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="280" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a0345187c05e76019e5720ab6627df62a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::tuple&lt; <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref>, <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &gt;</type>
        <definition>std::tuple&lt;Tensor,Tensor&gt; at::Tensor::_th_median</definition>
        <argsstring>(int64_t dim, bool keepdim=false) const</argsstring>
        <name>_th_median</name>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>keepdim</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="281" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a0466e1519ba74fb36fd2f58925be8a8b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::tuple&lt; <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref>, <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &gt;</type>
        <definition>std::tuple&lt;Tensor,Tensor&gt; at::Tensor::sort</definition>
        <argsstring>(int64_t dim=-1, bool descending=false) const</argsstring>
        <name>sort</name>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>descending</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="282" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a3dfdd4b7e120fc428be93f028d996b0f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::tuple&lt; <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref>, <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &gt;</type>
        <definition>std::tuple&lt;Tensor,Tensor&gt; at::Tensor::topk</definition>
        <argsstring>(int64_t k, int64_t dim=-1, bool largest=true, bool sorted=true) const</argsstring>
        <name>topk</name>
        <param>
          <type>int64_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>largest</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>sorted</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="283" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a402b6d6f9569c6035438497775d09a3b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::all</definition>
        <argsstring>() const</argsstring>
        <name>all</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="284" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1aec11843a15839040bfdec07deb33d02f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::_th_all</definition>
        <argsstring>(int64_t dim, bool keepdim=false) const</argsstring>
        <name>_th_all</name>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>keepdim</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="285" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a1db7913bfb086a8c166f8882e259d3f0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::any</definition>
        <argsstring>() const</argsstring>
        <name>any</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="286" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a1604c689d1d83fbe18ba9754af270590" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::_th_any</definition>
        <argsstring>(int64_t dim, bool keepdim=false) const</argsstring>
        <name>_th_any</name>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>keepdim</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="287" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a86cc6f4841c756e41e7b7fa1e4b9ce93" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::_abs</definition>
        <argsstring>() const</argsstring>
        <name>_abs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="288" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a1bd8f7955742cb994c7e62cf629de2c3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::_th_sigmoid</definition>
        <argsstring>() const</argsstring>
        <name>_th_sigmoid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="289" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1aa62a6f4c2487b55c901272e3e94c2a67" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::_log</definition>
        <argsstring>() const</argsstring>
        <name>_log</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="290" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1af85c75f82eafa5021f5b899f79eff952" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::_log10</definition>
        <argsstring>() const</argsstring>
        <name>_log10</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="291" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ad7f1f0edd134416ae95b6279a71d773c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::_log1p</definition>
        <argsstring>() const</argsstring>
        <name>_log1p</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="292" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ab66d4cc2726dbd17b29a73eaf2be79fa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::_log2</definition>
        <argsstring>() const</argsstring>
        <name>_log2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="293" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a97d5f621ba6ac708f481def339c3d13f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::lgamma</definition>
        <argsstring>() const</argsstring>
        <name>lgamma</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="294" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a1bae071acd0cb3a5f86a4569dad17a4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::lgamma_</definition>
        <argsstring>()</argsstring>
        <name>lgamma_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="295" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a4e3d9435349255a682ecfafbc7e3ee25" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::digamma</definition>
        <argsstring>() const</argsstring>
        <name>digamma</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="296" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a569e828fec9edb1557da882f7b4c3b95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::digamma_</definition>
        <argsstring>()</argsstring>
        <name>digamma_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="297" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1aa6bdfccd7d41089aaad6f38123bbf010" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::polygamma</definition>
        <argsstring>(int64_t n) const</argsstring>
        <name>polygamma</name>
        <param>
          <type>int64_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="298" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a1909e82144b538d3359f96cdc456bf8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::polygamma_</definition>
        <argsstring>(int64_t n)</argsstring>
        <name>polygamma_</name>
        <param>
          <type>int64_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="299" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ae52217f569b5bb13ff3690a69c510aaa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::_exp</definition>
        <argsstring>() const</argsstring>
        <name>_exp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="300" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a53e6076fc6ae256ca27b7f3cbb2dc4e0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::_expm1</definition>
        <argsstring>() const</argsstring>
        <name>_expm1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="301" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a5f5666c9a3e873bca25d4f0f2916c9c2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::_cos</definition>
        <argsstring>() const</argsstring>
        <name>_cos</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="302" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ab5911df97918d022dae98892c03a447e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::_acos</definition>
        <argsstring>() const</argsstring>
        <name>_acos</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="303" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a56ea795ede4430d1ffa8b9d9ddfe38b3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::_cosh</definition>
        <argsstring>() const</argsstring>
        <name>_cosh</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="304" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1afd0dcce72711b77d2a61b43f4f6aa1a6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::_sin</definition>
        <argsstring>() const</argsstring>
        <name>_sin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="305" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a28522a568c70627d01b0341504123db1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::_asin</definition>
        <argsstring>() const</argsstring>
        <name>_asin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="306" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a28231fdf427643e35acd3cbdf381e324" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::_sinh</definition>
        <argsstring>() const</argsstring>
        <name>_sinh</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="307" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1aca43df52e67ec5e10d761db732f55645" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::_tan</definition>
        <argsstring>() const</argsstring>
        <name>_tan</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="308" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ac789eb9cbc293617ae05f6f614a01d6d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::_atan</definition>
        <argsstring>() const</argsstring>
        <name>_atan</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="309" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1afa47a9e17dbcb83d6ad4a08f243617ef" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::_th_tanh</definition>
        <argsstring>() const</argsstring>
        <name>_th_tanh</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="310" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a2e1fc58075ebc4a84a6e52e46602d3e9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::_erf</definition>
        <argsstring>() const</argsstring>
        <name>_erf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="311" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a2b3d8d46ed29346fd9367872982aff52" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::_erfc</definition>
        <argsstring>() const</argsstring>
        <name>_erfc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="312" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ab05f78c5c3423559282dab77e1cc05ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::erfinv_</definition>
        <argsstring>()</argsstring>
        <name>erfinv_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="313" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a5f15e401e0f7c71546e6e9acb8d7597a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::erfinv</definition>
        <argsstring>() const</argsstring>
        <name>erfinv</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="314" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ab7a213a60eb8953e083ba533e3ef0e07" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::_sqrt</definition>
        <argsstring>() const</argsstring>
        <name>_sqrt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="315" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a8c5bc9b418822fb0961577f94441c789" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::_rsqrt</definition>
        <argsstring>() const</argsstring>
        <name>_rsqrt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="316" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ab1b8ff283d0664b93da5f02253820615" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::_ceil</definition>
        <argsstring>() const</argsstring>
        <name>_ceil</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="317" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1af47f6f8039d7303daf76bdd0ac92325c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::_floor</definition>
        <argsstring>() const</argsstring>
        <name>_floor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="318" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a3fc432b2d3f54659852909343acda6ee" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::_round</definition>
        <argsstring>() const</argsstring>
        <name>_round</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="319" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a0bf41db77e2eeba0c667181f571f0b30" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::_trunc</definition>
        <argsstring>() const</argsstring>
        <name>_trunc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="320" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ad4c86177504e755411031d95ed4e23d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::frac_</definition>
        <argsstring>()</argsstring>
        <name>frac_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="321" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a9f9119d25543cf8b74ad15f4d6c64ea4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::frac</definition>
        <argsstring>() const</argsstring>
        <name>frac</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="322" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a5cd3f0e987cdc7fc1c89bca583a3301a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::_th_var</definition>
        <argsstring>(int64_t dim, bool unbiased=true, bool keepdim=false) const</argsstring>
        <name>_th_var</name>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>unbiased</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>keepdim</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="323" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1abe59b9fd3a6694e7cd7087162877b524" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::_th_var</definition>
        <argsstring>(bool unbiased=true) const</argsstring>
        <name>_th_var</name>
        <param>
          <type>bool</type>
          <declname>unbiased</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="324" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a8641c9c2b7e35508f0109bf0c9e8dd8c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::_th_std</definition>
        <argsstring>(int64_t dim, bool unbiased=true, bool keepdim=false) const</argsstring>
        <name>_th_std</name>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>unbiased</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>keepdim</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="325" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a96e63552fd2fa4a5c2158f43936289c5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::_th_std</definition>
        <argsstring>(bool unbiased=true) const</argsstring>
        <name>_th_std</name>
        <param>
          <type>bool</type>
          <declname>unbiased</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="326" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a919c68ad9474a9243f6cfb17e0a50f4d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::_th_norm</definition>
        <argsstring>(Scalar p, int64_t dim, bool keepdim=false) const</argsstring>
        <name>_th_norm</name>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>p</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>keepdim</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="327" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a1e6e2e520fbb0eb99c9af09577498daa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::renorm</definition>
        <argsstring>(Scalar p, int64_t dim, Scalar maxnorm) const</argsstring>
        <name>renorm</name>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>p</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
        </param>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>maxnorm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="328" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a134ebb5b5654bdfc7ef103d800fac60d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::renorm_</definition>
        <argsstring>(Scalar p, int64_t dim, Scalar maxnorm)</argsstring>
        <name>renorm_</name>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>p</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
        </param>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>maxnorm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="329" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1aacb55e7c19e4e12df673f6d5c6f54675" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::dist</definition>
        <argsstring>(const Tensor &amp;other, Scalar p=2) const</argsstring>
        <name>dist</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>p</declname>
          <defval>2</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="330" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a83e435eca628a5638fbae8bc54128cd5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::reciprocal</definition>
        <argsstring>() const</argsstring>
        <name>reciprocal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="331" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a1b17989340bb9631da5c482067fc33e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::reciprocal_</definition>
        <argsstring>()</argsstring>
        <name>reciprocal_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="332" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a0a9144bf3b49ff7f5b32c97c36ec88a2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::neg</definition>
        <argsstring>() const</argsstring>
        <name>neg</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="333" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ae8ee28c2296976f0aabbb8f9c242f257" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::neg_</definition>
        <argsstring>()</argsstring>
        <name>neg_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="334" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a66b1ee7bdc3e3bf54efee14d5db3f58b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::atan2</definition>
        <argsstring>(const Tensor &amp;other) const</argsstring>
        <name>atan2</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="335" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ace1898fa811ded714e21d74fe30a8901" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::atan2_</definition>
        <argsstring>(const Tensor &amp;other)</argsstring>
        <name>atan2_</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="336" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a6c0549a4b81b58fcf1cc3ebe66d0ccba" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::pow</definition>
        <argsstring>(const Tensor &amp;exponent) const</argsstring>
        <name>pow</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>exponent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="337" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a1cea8f44c50d0634e7de9dad5c436ac8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::pow_</definition>
        <argsstring>(Scalar exponent)</argsstring>
        <name>pow_</name>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>exponent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="338" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a5d3e73e6a0fbd04588a95ed1fef589cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::pow_</definition>
        <argsstring>(const Tensor &amp;exponent)</argsstring>
        <name>pow_</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>exponent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="339" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a63525e65ff26637d4597aaa264018f54" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::lerp</definition>
        <argsstring>(const Tensor &amp;end, Scalar weight) const</argsstring>
        <name>lerp</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>end</declname>
        </param>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>weight</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="340" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ad9bc3e8c17c6f5d89a4073995d46dbf0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::lerp_</definition>
        <argsstring>(const Tensor &amp;end, Scalar weight)</argsstring>
        <name>lerp_</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>end</declname>
        </param>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>weight</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="341" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a3839b3574baf1d3ab455d89d5670fdef" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::histc</definition>
        <argsstring>(int64_t bins=100, Scalar min=0, Scalar max=0) const</argsstring>
        <name>histc</name>
        <param>
          <type>int64_t</type>
          <declname>bins</declname>
          <defval>100</defval>
        </param>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>min</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>max</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="342" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ae527a915b190ca3a1893a0155bb19437" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::_sumall</definition>
        <argsstring>() const</argsstring>
        <name>_sumall</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="343" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ac0e13ffff294bfbae66d11f3f0729535" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::_th_sum</definition>
        <argsstring>(int64_t dim, bool keepdim=false) const</argsstring>
        <name>_th_sum</name>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>keepdim</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="344" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a326b2a198ae59343be1c809d7982d261" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::_prodall</definition>
        <argsstring>() const</argsstring>
        <name>_prodall</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="345" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a1e29415ffe55b6f9fa5f5f6c1fbfc9c9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::_th_prod</definition>
        <argsstring>(int64_t dim, bool keepdim=false) const</argsstring>
        <name>_th_prod</name>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>keepdim</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="346" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a8bc8d22325056ccb0f9ff0217afee364" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::_cumsum</definition>
        <argsstring>(int64_t dim) const</argsstring>
        <name>_cumsum</name>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="347" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a404e052676517d03c32aaa434f80ae79" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::_cumprod</definition>
        <argsstring>(int64_t dim) const</argsstring>
        <name>_cumprod</name>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="348" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a30b4b1304d04af3dc084dadbf6812a0c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::sign</definition>
        <argsstring>() const</argsstring>
        <name>sign</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="349" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a104b73fb924a0a1756745a7695fb408f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::sign_</definition>
        <argsstring>()</argsstring>
        <name>sign_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="350" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ab9fed3f59b800b996ec05cc632d81e2b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::trace</definition>
        <argsstring>() const</argsstring>
        <name>trace</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="351" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a009427a67e51413e84c9108cea31231b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::add</definition>
        <argsstring>(Scalar other, Scalar alpha=1) const</argsstring>
        <name>add</name>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>other</declname>
        </param>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>alpha</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="352" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a98c28c7f437a70438aae0e6eb7aa3920" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::add_</definition>
        <argsstring>(Scalar other, Scalar alpha=1)</argsstring>
        <name>add_</name>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>other</declname>
        </param>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>alpha</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="353" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a3b7714914c4e3b257d9fe9578d8346c5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::sub</definition>
        <argsstring>(Scalar other, Scalar alpha=1) const</argsstring>
        <name>sub</name>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>other</declname>
        </param>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>alpha</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="354" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a7230f607c0eeb01961065a7eb4f2b999" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::sub_</definition>
        <argsstring>(Scalar other, Scalar alpha=1)</argsstring>
        <name>sub_</name>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>other</declname>
        </param>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>alpha</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="355" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a32412dc04621508c0272650838f52676" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::div</definition>
        <argsstring>(const Tensor &amp;other) const</argsstring>
        <name>div</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="356" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a0dff1db7ad2b332bedaf174ad11e2ebc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::div_</definition>
        <argsstring>(const Tensor &amp;other)</argsstring>
        <name>div_</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="357" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ac1a6163af451ffe45fdd7e83c83e6803" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::fmod</definition>
        <argsstring>(Scalar other) const</argsstring>
        <name>fmod</name>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="358" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1aa20cd760214bac35c12bca0e87a4dad5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::fmod</definition>
        <argsstring>(const Tensor &amp;other) const</argsstring>
        <name>fmod</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="359" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1aff55af96021dc6801f27a75544332c74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::fmod_</definition>
        <argsstring>(Scalar other)</argsstring>
        <name>fmod_</name>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="360" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a9a87600f9421e2de6a5968c292212243" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::fmod_</definition>
        <argsstring>(const Tensor &amp;other)</argsstring>
        <name>fmod_</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="361" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1aa8695bfd4aca20f649770abc0203a9c5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::remainder</definition>
        <argsstring>(Scalar other) const</argsstring>
        <name>remainder</name>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="362" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a11de78b204422631816dac7ca5fb026d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::remainder</definition>
        <argsstring>(const Tensor &amp;other) const</argsstring>
        <name>remainder</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="363" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a1a9f53b04a64dfa3f39bb42cebd2b4ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::remainder_</definition>
        <argsstring>(Scalar other)</argsstring>
        <name>remainder_</name>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="364" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ae896ccd31e30c55bc9692c6694217b52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::remainder_</definition>
        <argsstring>(const Tensor &amp;other)</argsstring>
        <name>remainder_</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="365" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ac3c3c1f281c52b110c73029f76da3f48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::_th_clamp_</definition>
        <argsstring>(Scalar min, Scalar max)</argsstring>
        <name>_th_clamp_</name>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>min</declname>
        </param>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="366" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a0fc95b6a69103313f8e5304d3bfc006c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::_th_clamp_min_</definition>
        <argsstring>(Scalar min)</argsstring>
        <name>_th_clamp_min_</name>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>min</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="367" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a0d6486637b5fd09ef2eef6457e84e092" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::_th_clamp_max_</definition>
        <argsstring>(Scalar max)</argsstring>
        <name>_th_clamp_max_</name>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="368" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a3e28c5a7cbda392182861ee6c522cc62" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::_dot</definition>
        <argsstring>(const Tensor &amp;tensor) const</argsstring>
        <name>_dot</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>tensor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="369" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a159c8b3eb86f9adf024403ba97540ef6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::tril</definition>
        <argsstring>(int64_t diagonal=0) const</argsstring>
        <name>tril</name>
        <param>
          <type>int64_t</type>
          <declname>diagonal</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="370" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a3e1c912661952ac56f9c434c0556ae50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::tril_</definition>
        <argsstring>(int64_t diagonal=0)</argsstring>
        <name>tril_</name>
        <param>
          <type>int64_t</type>
          <declname>diagonal</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="371" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ac9abb51c9d2823917f445c17bd05c1ab" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::triu</definition>
        <argsstring>(int64_t diagonal=0) const</argsstring>
        <name>triu</name>
        <param>
          <type>int64_t</type>
          <declname>diagonal</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="372" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a06c1637aa6d6c505682f34e103120aeb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::triu_</definition>
        <argsstring>(int64_t diagonal=0)</argsstring>
        <name>triu_</name>
        <param>
          <type>int64_t</type>
          <declname>diagonal</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="373" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a08796f8de12e3910e62b5d559f46f5d8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::cross</definition>
        <argsstring>(const Tensor &amp;other, int64_t dim=-1) const</argsstring>
        <name>cross</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="374" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a4b7df296c1df34b05b67b575d245cce3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::diag</definition>
        <argsstring>(int64_t diagonal=0) const</argsstring>
        <name>diag</name>
        <param>
          <type>int64_t</type>
          <declname>diagonal</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="375" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ad754e584821fa8512eb3d45de793e397" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::_addmv</definition>
        <argsstring>(const Tensor &amp;mat, const Tensor &amp;vec, Scalar beta=1, Scalar alpha=1) const</argsstring>
        <name>_addmv</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>beta</declname>
          <defval>1</defval>
        </param>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>alpha</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="376" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a4b9e6dc20383b3aaf01860bd2514ede4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::_addmv_</definition>
        <argsstring>(const Tensor &amp;mat, const Tensor &amp;vec, Scalar beta=1, Scalar alpha=1)</argsstring>
        <name>_addmv_</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>beta</declname>
          <defval>1</defval>
        </param>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>alpha</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="377" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1acd8e6f742f4ef3097ecd8faf4ea964c5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::_addr</definition>
        <argsstring>(const Tensor &amp;vec1, const Tensor &amp;vec2, Scalar beta=1, Scalar alpha=1) const</argsstring>
        <name>_addr</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>vec1</declname>
        </param>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>vec2</declname>
        </param>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>beta</declname>
          <defval>1</defval>
        </param>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>alpha</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="378" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a6ce98529a56090e68e3254088b3bc015" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::_addr_</definition>
        <argsstring>(const Tensor &amp;vec1, const Tensor &amp;vec2, Scalar beta=1, Scalar alpha=1)</argsstring>
        <name>_addr_</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>vec1</declname>
        </param>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>vec2</declname>
        </param>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>beta</declname>
          <defval>1</defval>
        </param>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>alpha</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="379" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a585f5e33989e2271ef53b5f63d703b84" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::_ger</definition>
        <argsstring>(const Tensor &amp;vec2) const</argsstring>
        <name>_ger</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>vec2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="380" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1abfa187d2d0fd8a22e536ae433fa3990b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::_mv</definition>
        <argsstring>(const Tensor &amp;vec) const</argsstring>
        <name>_mv</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="381" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a62de8ce50db5d1e2b0cc3334a7da70b9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::_mm</definition>
        <argsstring>(const Tensor &amp;mat2) const</argsstring>
        <name>_mm</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>mat2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="382" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1af671d7c16d9b9e23c8dc1c3fd0004691" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::bmm</definition>
        <argsstring>(const Tensor &amp;mat2) const</argsstring>
        <name>bmm</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>mat2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="383" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a28107b05798c66e3362bed74ca1cbae7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::addbmm</definition>
        <argsstring>(const Tensor &amp;batch1, const Tensor &amp;batch2, Scalar beta=1, Scalar alpha=1) const</argsstring>
        <name>addbmm</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>batch1</declname>
        </param>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>batch2</declname>
        </param>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>beta</declname>
          <defval>1</defval>
        </param>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>alpha</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="384" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ad91da53ec70f4cbc8edf40fd225388d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::addbmm_</definition>
        <argsstring>(const Tensor &amp;batch1, const Tensor &amp;batch2, Scalar beta=1, Scalar alpha=1)</argsstring>
        <name>addbmm_</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>batch1</declname>
        </param>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>batch2</declname>
        </param>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>beta</declname>
          <defval>1</defval>
        </param>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>alpha</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="385" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1aaff43581d08b7023d5f6fbf3d7fbb5d9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::baddbmm</definition>
        <argsstring>(const Tensor &amp;batch1, const Tensor &amp;batch2, Scalar beta=1, Scalar alpha=1) const</argsstring>
        <name>baddbmm</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>batch1</declname>
        </param>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>batch2</declname>
        </param>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>beta</declname>
          <defval>1</defval>
        </param>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>alpha</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="386" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a71d6f654fd96d73faca52e097cc2e516" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::baddbmm_</definition>
        <argsstring>(const Tensor &amp;batch1, const Tensor &amp;batch2, Scalar beta=1, Scalar alpha=1)</argsstring>
        <name>baddbmm_</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>batch1</declname>
        </param>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>batch2</declname>
        </param>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>beta</declname>
          <defval>1</defval>
        </param>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>alpha</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="387" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a48dd476ce9b6f10e7d13d740881ed0bb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::addcmul</definition>
        <argsstring>(const Tensor &amp;tensor1, const Tensor &amp;tensor2, Scalar value=1) const</argsstring>
        <name>addcmul</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>tensor1</declname>
        </param>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>tensor2</declname>
        </param>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>value</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="388" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a6a9030c7e2a3447940307c23d74dba16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::addcmul_</definition>
        <argsstring>(const Tensor &amp;tensor1, const Tensor &amp;tensor2, Scalar value=1)</argsstring>
        <name>addcmul_</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>tensor1</declname>
        </param>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>tensor2</declname>
        </param>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>value</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="389" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a19e1bfc27ae878c87704bec413343aa4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::addcdiv</definition>
        <argsstring>(const Tensor &amp;tensor1, const Tensor &amp;tensor2, Scalar value=1) const</argsstring>
        <name>addcdiv</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>tensor1</declname>
        </param>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>tensor2</declname>
        </param>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>value</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="390" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a0d89981092c1308c4753657be4d3c872" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::addcdiv_</definition>
        <argsstring>(const Tensor &amp;tensor1, const Tensor &amp;tensor2, Scalar value=1)</argsstring>
        <name>addcdiv_</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>tensor1</declname>
        </param>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>tensor2</declname>
        </param>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>value</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="391" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ac756d9faba2aa00cd029c5ebe9d56c9e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::tuple&lt; <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref>, <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &gt;</type>
        <definition>std::tuple&lt;Tensor,Tensor&gt; at::Tensor::_gesv_single</definition>
        <argsstring>(const Tensor &amp;A) const</argsstring>
        <name>_gesv_single</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="392" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a800ccf374aefc1778d0a16ab054fddd0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::tuple&lt; <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref>, <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &gt;</type>
        <definition>std::tuple&lt;Tensor,Tensor&gt; at::Tensor::gels</definition>
        <argsstring>(const Tensor &amp;A) const</argsstring>
        <name>gels</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="393" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a8d0e79b8d1e65d410501c123a1359711" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::tuple&lt; <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref>, <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &gt;</type>
        <definition>std::tuple&lt;Tensor,Tensor&gt; at::Tensor::trtrs</definition>
        <argsstring>(const Tensor &amp;A, bool upper=true, bool transpose=false, bool unitriangular=false) const</argsstring>
        <name>trtrs</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>upper</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>transpose</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>unitriangular</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="394" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1af17982e5ba2164c822a8c0166e5b61a2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::tuple&lt; <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref>, <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &gt;</type>
        <definition>std::tuple&lt;Tensor,Tensor&gt; at::Tensor::symeig</definition>
        <argsstring>(bool eigenvectors=false, bool upper=true) const</argsstring>
        <name>symeig</name>
        <param>
          <type>bool</type>
          <declname>eigenvectors</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>upper</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="395" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ac76611548c545465b7a9fc2f16f26c1c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::tuple&lt; <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref>, <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &gt;</type>
        <definition>std::tuple&lt;Tensor,Tensor&gt; at::Tensor::eig</definition>
        <argsstring>(bool eigenvectors=false) const</argsstring>
        <name>eig</name>
        <param>
          <type>bool</type>
          <declname>eigenvectors</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="396" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ab6e2691e88af84119b6959d95cace3d7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::tuple&lt; <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref>, <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref>, <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &gt;</type>
        <definition>std::tuple&lt;Tensor,Tensor,Tensor&gt; at::Tensor::svd</definition>
        <argsstring>(bool some=true) const</argsstring>
        <name>svd</name>
        <param>
          <type>bool</type>
          <declname>some</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="397" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ae37673831f54f1df97b2c19495c83bd2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::_getri</definition>
        <argsstring>() const</argsstring>
        <name>_getri</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="398" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a2a7465b282997e2b270d481de2d0bc81" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::potrf</definition>
        <argsstring>(bool upper=true) const</argsstring>
        <name>potrf</name>
        <param>
          <type>bool</type>
          <declname>upper</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="399" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ad378040e5f9455a5d9c25fa2d61f9331" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::potrs</definition>
        <argsstring>(const Tensor &amp;input2, bool upper=true) const</argsstring>
        <name>potrs</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>input2</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>upper</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="400" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a4a2c17d6791ffff9d770c13e65d5afa7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::potri</definition>
        <argsstring>(bool upper=true) const</argsstring>
        <name>potri</name>
        <param>
          <type>bool</type>
          <declname>upper</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="401" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a27bdcf2a113e5b18557a59166e120bba" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::tuple&lt; <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref>, <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &gt;</type>
        <definition>std::tuple&lt;Tensor,Tensor&gt; at::Tensor::pstrf</definition>
        <argsstring>(bool upper=true, Scalar tol=-1) const</argsstring>
        <name>pstrf</name>
        <param>
          <type>bool</type>
          <declname>upper</declname>
          <defval>true</defval>
        </param>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>tol</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="402" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a2f86011e4efebb3ac41789992d72ce75" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::tuple&lt; <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref>, <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &gt;</type>
        <definition>std::tuple&lt;Tensor,Tensor&gt; at::Tensor::qr</definition>
        <argsstring>() const</argsstring>
        <name>qr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="403" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a91a24c60252955d47553a6522bae32a5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::tuple&lt; <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref>, <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &gt;</type>
        <definition>std::tuple&lt;Tensor,Tensor&gt; at::Tensor::geqrf</definition>
        <argsstring>() const</argsstring>
        <name>geqrf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="404" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a5ffc9f9c3b516d760e1ed6bfcd8f1cac" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::orgqr</definition>
        <argsstring>(const Tensor &amp;input2) const</argsstring>
        <name>orgqr</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>input2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="405" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a4834c1631775ac0cc6a411b2555171d2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::ormqr</definition>
        <argsstring>(const Tensor &amp;input2, const Tensor &amp;input3, bool left=true, bool transpose=false) const</argsstring>
        <name>ormqr</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>input2</declname>
        </param>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>input3</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>left</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>transpose</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="406" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a68bacf92aa1412166d193a55645dfb74" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::tuple&lt; <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref>, <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &gt;</type>
        <definition>std::tuple&lt;Tensor,Tensor&gt; at::Tensor::btrifact</definition>
        <argsstring>(bool pivot=true) const</argsstring>
        <name>btrifact</name>
        <param>
          <type>bool</type>
          <declname>pivot</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="407" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a7fe219b6e20dc1fe276b4c1a1196ef49" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::tuple&lt; <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref>, <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref>, <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &gt;</type>
        <definition>std::tuple&lt;Tensor,Tensor,Tensor&gt; at::Tensor::btrifact_with_info</definition>
        <argsstring>(bool pivot=true) const</argsstring>
        <name>btrifact_with_info</name>
        <param>
          <type>bool</type>
          <declname>pivot</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="408" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a4a1128d06de2a4645d8a3e3ff6c4ec3d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::btrisolve</definition>
        <argsstring>(const Tensor &amp;LU_data, const Tensor &amp;LU_pivots) const</argsstring>
        <name>btrisolve</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>LU_data</declname>
        </param>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>LU_pivots</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="409" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a84ead4e760386ce0f0427b2a50f502f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::random_</definition>
        <argsstring>(int64_t from, int64_t to, Generator *generator=nullptr)</argsstring>
        <name>random_</name>
        <param>
          <type>int64_t</type>
          <declname>from</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>to</declname>
        </param>
        <param>
          <type><ref refid="structat_1_1_generator" kindref="compound">Generator</ref> *</type>
          <declname>generator</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="410" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1adc8b388fcb21192ab5fa09cac63a32f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::random_</definition>
        <argsstring>(int64_t to, Generator *generator=nullptr)</argsstring>
        <name>random_</name>
        <param>
          <type>int64_t</type>
          <declname>to</declname>
        </param>
        <param>
          <type><ref refid="structat_1_1_generator" kindref="compound">Generator</ref> *</type>
          <declname>generator</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="411" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1adc0e88acf7ec75be0c7250eed26085f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::random_</definition>
        <argsstring>(Generator *generator=nullptr)</argsstring>
        <name>random_</name>
        <param>
          <type><ref refid="structat_1_1_generator" kindref="compound">Generator</ref> *</type>
          <declname>generator</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="412" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a0d12f6f2c65d4b5ff674e9055c834cca" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::multinomial</definition>
        <argsstring>(int64_t num_samples, bool replacement=false, Generator *generator=nullptr) const</argsstring>
        <name>multinomial</name>
        <param>
          <type>int64_t</type>
          <declname>num_samples</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>replacement</declname>
          <defval>false</defval>
        </param>
        <param>
          <type><ref refid="structat_1_1_generator" kindref="compound">Generator</ref> *</type>
          <declname>generator</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="413" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a48639daacc739ce4b57b8af05f0bf942" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::uniform_</definition>
        <argsstring>(double from=0, double to=1, Generator *generator=nullptr)</argsstring>
        <name>uniform_</name>
        <param>
          <type>double</type>
          <declname>from</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>double</type>
          <declname>to</declname>
          <defval>1</defval>
        </param>
        <param>
          <type><ref refid="structat_1_1_generator" kindref="compound">Generator</ref> *</type>
          <declname>generator</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="414" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1acce60afdc2b377d9e51d538ba6b06c4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::normal_</definition>
        <argsstring>(double mean=0, double std=1, Generator *generator=nullptr)</argsstring>
        <name>normal_</name>
        <param>
          <type>double</type>
          <declname>mean</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>double</type>
          <declname>std</declname>
          <defval>1</defval>
        </param>
        <param>
          <type><ref refid="structat_1_1_generator" kindref="compound">Generator</ref> *</type>
          <declname>generator</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="415" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a4756df1c8f5f67e584f963c0aedfe292" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::cauchy_</definition>
        <argsstring>(double median=0, double sigma=1, Generator *generator=nullptr)</argsstring>
        <name>cauchy_</name>
        <param>
          <type>double</type>
          <declname>median</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>double</type>
          <declname>sigma</declname>
          <defval>1</defval>
        </param>
        <param>
          <type><ref refid="structat_1_1_generator" kindref="compound">Generator</ref> *</type>
          <declname>generator</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="416" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1aff4ce2a88d6613173062f56616b30e6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::log_normal_</definition>
        <argsstring>(double mean=1, double std=2, Generator *generator=nullptr)</argsstring>
        <name>log_normal_</name>
        <param>
          <type>double</type>
          <declname>mean</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>double</type>
          <declname>std</declname>
          <defval>2</defval>
        </param>
        <param>
          <type><ref refid="structat_1_1_generator" kindref="compound">Generator</ref> *</type>
          <declname>generator</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="417" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a7ef027c72035805312171b9454f1665c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::exponential_</definition>
        <argsstring>(double lambd=1, Generator *generator=nullptr)</argsstring>
        <name>exponential_</name>
        <param>
          <type>double</type>
          <declname>lambd</declname>
          <defval>1</defval>
        </param>
        <param>
          <type><ref refid="structat_1_1_generator" kindref="compound">Generator</ref> *</type>
          <declname>generator</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="418" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a843b377aa13aa8e74ebcccbb8c5ef04e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::geometric_</definition>
        <argsstring>(double p, Generator *generator=nullptr)</argsstring>
        <name>geometric_</name>
        <param>
          <type>double</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="structat_1_1_generator" kindref="compound">Generator</ref> *</type>
          <declname>generator</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="419" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a40a07264c135a90b98758501b5e2ac94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::_bernoulli_</definition>
        <argsstring>(double p, Generator *generator=nullptr)</argsstring>
        <name>_bernoulli_</name>
        <param>
          <type>double</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="structat_1_1_generator" kindref="compound">Generator</ref> *</type>
          <declname>generator</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="420" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ab3c32b9d7dd5aa9aff28ff6d0fcaf0e3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::_th_bernoulli</definition>
        <argsstring>(Generator *generator=nullptr) const</argsstring>
        <name>_th_bernoulli</name>
        <param>
          <type><ref refid="structat_1_1_generator" kindref="compound">Generator</ref> *</type>
          <declname>generator</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="421" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1afa53f6f4094fdeff1fb0d98117f252b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::_copy_ignoring_overlaps_</definition>
        <argsstring>(const Tensor &amp;src)</argsstring>
        <name>_copy_ignoring_overlaps_</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="422" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1aa955b19ce4fe462f17d0d707c7aeabac" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::_cast_Byte</definition>
        <argsstring>(bool non_blocking=false) const</argsstring>
        <name>_cast_Byte</name>
        <param>
          <type>bool</type>
          <declname>non_blocking</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="423" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a6773a2652b4c05e8bb3633cb8930698c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::_cast_Char</definition>
        <argsstring>(bool non_blocking=false) const</argsstring>
        <name>_cast_Char</name>
        <param>
          <type>bool</type>
          <declname>non_blocking</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="424" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ae2ab1ca39063bb1593dd19318aa079c9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::_cast_Double</definition>
        <argsstring>(bool non_blocking=false) const</argsstring>
        <name>_cast_Double</name>
        <param>
          <type>bool</type>
          <declname>non_blocking</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="425" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1aa7e1bb814e0641a595b10699689f5a5c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::_cast_Float</definition>
        <argsstring>(bool non_blocking=false) const</argsstring>
        <name>_cast_Float</name>
        <param>
          <type>bool</type>
          <declname>non_blocking</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="426" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a7406462a5faeb0e7306f2f2b757ed7df" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::_cast_Int</definition>
        <argsstring>(bool non_blocking=false) const</argsstring>
        <name>_cast_Int</name>
        <param>
          <type>bool</type>
          <declname>non_blocking</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="427" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1abcd1e754110de746f73cfe9cfeee08ba" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::_cast_Long</definition>
        <argsstring>(bool non_blocking=false) const</argsstring>
        <name>_cast_Long</name>
        <param>
          <type>bool</type>
          <declname>non_blocking</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="428" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a41761f0f47457cc64efdc0793c3d4cc3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::_cast_Short</definition>
        <argsstring>(bool non_blocking=false) const</argsstring>
        <name>_cast_Short</name>
        <param>
          <type>bool</type>
          <declname>non_blocking</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="429" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a57a05dfac9590013903e6399ba8259e1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::_cast_Half</definition>
        <argsstring>(bool non_blocking=false) const</argsstring>
        <name>_cast_Half</name>
        <param>
          <type>bool</type>
          <declname>non_blocking</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="430" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1adf058f5f731dda2141190a3aa56f2311" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::abs</definition>
        <argsstring>() const</argsstring>
        <name>abs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="431" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a6aea7ab8d3b8aeaee52bf16f6bf1f7fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::abs_</definition>
        <argsstring>()</argsstring>
        <name>abs_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="432" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a39213a9fdbab2395b7863d41eb4c5606" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::acos</definition>
        <argsstring>() const</argsstring>
        <name>acos</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="433" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a7f36b9e23c4de7f05e52fcfa17be3d31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::acos_</definition>
        <argsstring>()</argsstring>
        <name>acos_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="434" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1afaccae3fe6199b2a4fc0d485e1153e11" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool at::Tensor::allclose</definition>
        <argsstring>(const Tensor &amp;other, double rtol=1e-05, double atol=1e-08, bool equal_nan=false) const</argsstring>
        <name>allclose</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rtol</declname>
          <defval>1e-05</defval>
        </param>
        <param>
          <type>double</type>
          <declname>atol</declname>
          <defval>1e-08</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>equal_nan</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="435" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a3b7099fe3008a39d7baff49cb4ead66d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::addmv</definition>
        <argsstring>(const Tensor &amp;mat, const Tensor &amp;vec, Scalar beta=1, Scalar alpha=1) const</argsstring>
        <name>addmv</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>beta</declname>
          <defval>1</defval>
        </param>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>alpha</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="436" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a0069a9cf8e84421d3420fc80bb8d848c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::addmv_</definition>
        <argsstring>(const Tensor &amp;mat, const Tensor &amp;vec, Scalar beta=1, Scalar alpha=1)</argsstring>
        <name>addmv_</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>beta</declname>
          <defval>1</defval>
        </param>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>alpha</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="437" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ab95497741a3f68b819590008c5254a06" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::addr</definition>
        <argsstring>(const Tensor &amp;vec1, const Tensor &amp;vec2, Scalar beta=1, Scalar alpha=1) const</argsstring>
        <name>addr</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>vec1</declname>
        </param>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>vec2</declname>
        </param>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>beta</declname>
          <defval>1</defval>
        </param>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>alpha</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="438" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1aeecb56d7c7d4663f4e412d1c305a5b9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::addr_</definition>
        <argsstring>(const Tensor &amp;vec1, const Tensor &amp;vec2, Scalar beta=1, Scalar alpha=1)</argsstring>
        <name>addr_</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>vec1</declname>
        </param>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>vec2</declname>
        </param>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>beta</declname>
          <defval>1</defval>
        </param>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>alpha</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="439" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a9ae5bc41e9963e02eb938965643a0a3c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::all</definition>
        <argsstring>(int64_t dim, bool keepdim=false) const</argsstring>
        <name>all</name>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>keepdim</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="440" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a948f45a1c53fea91ace2d78faaa4c5a7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::any</definition>
        <argsstring>(int64_t dim, bool keepdim=false) const</argsstring>
        <name>any</name>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>keepdim</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="441" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ac5aa960b52a2203a7bb7aa1e05337c25" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::argmax</definition>
        <argsstring>(int64_t dim, bool keepdim=false) const</argsstring>
        <name>argmax</name>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>keepdim</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="442" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a39aa3ce29c8b82245bc0281a6dc2bd92" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::argmax</definition>
        <argsstring>() const</argsstring>
        <name>argmax</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="443" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a1514a6d623be08ec9aa364c8c9db45bd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::_argmax</definition>
        <argsstring>(int64_t dim, bool keepdim=false) const</argsstring>
        <name>_argmax</name>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>keepdim</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="444" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a0b6c198981624777b9f1fb85dedb64dc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::argmin</definition>
        <argsstring>(int64_t dim, bool keepdim=false) const</argsstring>
        <name>argmin</name>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>keepdim</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="445" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ad53dcccdb0d7b49acf0f53c0c3668725" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::argmin</definition>
        <argsstring>() const</argsstring>
        <name>argmin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="446" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a6e29ed688b6b3622cab1fd720b5ac4e9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::_argmin</definition>
        <argsstring>(int64_t dim, bool keepdim=false) const</argsstring>
        <name>_argmin</name>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>keepdim</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="447" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a1f673aea1861a02ca34c202fce2ecf1f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::as_strided</definition>
        <argsstring>(IntList size, IntList stride) const</argsstring>
        <name>as_strided</name>
        <param>
          <type><ref refid="classat_1_1_array_ref" kindref="compound">IntList</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="classat_1_1_array_ref" kindref="compound">IntList</ref></type>
          <declname>stride</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="448" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1aaadb889484d30d7b819e4ad4d57915c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::as_strided_</definition>
        <argsstring>(IntList size, IntList stride)</argsstring>
        <name>as_strided_</name>
        <param>
          <type><ref refid="classat_1_1_array_ref" kindref="compound">IntList</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="classat_1_1_array_ref" kindref="compound">IntList</ref></type>
          <declname>stride</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="449" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1aca30ea7676e25697cb523d4955b209ac" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::as_strided</definition>
        <argsstring>(IntList size, IntList stride, int64_t storage_offset) const</argsstring>
        <name>as_strided</name>
        <param>
          <type><ref refid="classat_1_1_array_ref" kindref="compound">IntList</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="classat_1_1_array_ref" kindref="compound">IntList</ref></type>
          <declname>stride</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>storage_offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="450" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a26dbebbc603ff9c97711d8ca6c133b23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::as_strided_</definition>
        <argsstring>(IntList size, IntList stride, int64_t storage_offset)</argsstring>
        <name>as_strided_</name>
        <param>
          <type><ref refid="classat_1_1_array_ref" kindref="compound">IntList</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="classat_1_1_array_ref" kindref="compound">IntList</ref></type>
          <declname>stride</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>storage_offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="451" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a8a0eb9818a9b6adeef93fa4b02b2f820" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::asin</definition>
        <argsstring>() const</argsstring>
        <name>asin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="452" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a2b092fcca4143654f48283fd08b3ab84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::asin_</definition>
        <argsstring>()</argsstring>
        <name>asin_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="453" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1acd1082d1dbfde6379724476620d5fe08" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::atan</definition>
        <argsstring>() const</argsstring>
        <name>atan</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="454" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1af3aab5950b84c91ea52d62ca672edb4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::atan_</definition>
        <argsstring>()</argsstring>
        <name>atan_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="455" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a382114d0d61986127e1ceef31c373fc2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::bernoulli</definition>
        <argsstring>(const Tensor &amp;p, Generator *generator=nullptr) const</argsstring>
        <name>bernoulli</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="structat_1_1_generator" kindref="compound">Generator</ref> *</type>
          <declname>generator</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="456" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a4ba906f71924befb21bbedca645bb7ca" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::bernoulli</definition>
        <argsstring>(double p, Generator *generator=nullptr) const</argsstring>
        <name>bernoulli</name>
        <param>
          <type>double</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="structat_1_1_generator" kindref="compound">Generator</ref> *</type>
          <declname>generator</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="457" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a4c4c021019e21e88ddfe8a9c7fb57733" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::bernoulli</definition>
        <argsstring>() const</argsstring>
        <name>bernoulli</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="458" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1abd793a18f626d4f1a5238f7659227a78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::bernoulli_</definition>
        <argsstring>(const Tensor &amp;p, Generator *generator=nullptr)</argsstring>
        <name>bernoulli_</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="structat_1_1_generator" kindref="compound">Generator</ref> *</type>
          <declname>generator</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="459" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ace561e5d0f2d861c6efb5051d155cbb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::bernoulli_</definition>
        <argsstring>(double p, Generator *generator=nullptr)</argsstring>
        <name>bernoulli_</name>
        <param>
          <type>double</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="structat_1_1_generator" kindref="compound">Generator</ref> *</type>
          <declname>generator</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="460" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ac973061a1e754372acb0b84125b8daf3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::bernoulli_</definition>
        <argsstring>()</argsstring>
        <name>bernoulli_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="461" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ad18206c3615d9f5011a0706331d70fe9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::bincount</definition>
        <argsstring>(const Tensor &amp;weights={}, int64_t minlength=0) const</argsstring>
        <name>bincount</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>weights</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>int64_t</type>
          <declname>minlength</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="462" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1abe83866de1755c70f7e6e31e92d59012" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::ceil</definition>
        <argsstring>() const</argsstring>
        <name>ceil</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="463" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a993b85896ece58be0fbf34de8eacc99a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::ceil_</definition>
        <argsstring>()</argsstring>
        <name>ceil_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="464" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a79dc1190ce626531e1ecb607de89a3c6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &gt;</type>
        <definition>std::vector&lt;Tensor&gt; at::Tensor::chunk</definition>
        <argsstring>(int64_t chunks, int64_t dim=0) const</argsstring>
        <name>chunk</name>
        <param>
          <type>int64_t</type>
          <declname>chunks</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="465" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a4d18beea29addba57725836b6bf86b20" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::clamp</definition>
        <argsstring>(Scalar min, Scalar max) const</argsstring>
        <name>clamp</name>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>min</declname>
        </param>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="466" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a7f6525487d988b82461fb1a2e306f343" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::clamp_</definition>
        <argsstring>(Scalar min, Scalar max)</argsstring>
        <name>clamp_</name>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>min</declname>
        </param>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="467" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1af65df97bc623080f9f6aa3b3c65bb2e9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::clamp_max</definition>
        <argsstring>(Scalar max) const</argsstring>
        <name>clamp_max</name>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="468" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a7ef5ddeb8db931fdf00db1fd66b67c14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::clamp_max_</definition>
        <argsstring>(Scalar max)</argsstring>
        <name>clamp_max_</name>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="469" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a2dc463652527e4855c19cd434f13f1e8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::clamp_min</definition>
        <argsstring>(Scalar min) const</argsstring>
        <name>clamp_min</name>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>min</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="470" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1aa9caf7c731951c99d89e8b563a1c6108" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::clamp_min_</definition>
        <argsstring>(Scalar min)</argsstring>
        <name>clamp_min_</name>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>min</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="471" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a9466b48f677212ce3affff8bac71b2bc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::conv_tbc</definition>
        <argsstring>(const Tensor &amp;weight, const Tensor &amp;bias, int64_t pad) const</argsstring>
        <name>conv_tbc</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>weight</declname>
        </param>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>bias</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>pad</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="472" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1aa2aa59b26e54281e8c2f36a0329365fc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::tuple&lt; <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref>, <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref>, <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &gt;</type>
        <definition>std::tuple&lt;Tensor,Tensor,Tensor&gt; at::Tensor::conv_tbc_backward</definition>
        <argsstring>(const Tensor &amp;input, const Tensor &amp;weight, const Tensor &amp;bias, int64_t pad) const</argsstring>
        <name>conv_tbc_backward</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>weight</declname>
        </param>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>bias</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>pad</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="473" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1aaedcc491cd58b4896df8df4f84be2757" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::cos</definition>
        <argsstring>() const</argsstring>
        <name>cos</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="474" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1af199264463285749de2a6d2ec17dca9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::cos_</definition>
        <argsstring>()</argsstring>
        <name>cos_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="475" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a12be1df83b8b26e1af37a44e8ed715ed" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::cosh</definition>
        <argsstring>() const</argsstring>
        <name>cosh</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="476" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a96133c876c2c91054127082471e6f9a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::cosh_</definition>
        <argsstring>()</argsstring>
        <name>cosh_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="477" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ada34ab3dc355dfc248b3a21e36efbc05" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::cumsum</definition>
        <argsstring>(int64_t dim, ScalarType dtype) const</argsstring>
        <name>cumsum</name>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>ScalarType</type>
          <declname>dtype</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="478" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1aa813266866e85cdac403effcdb088eb4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::cumsum</definition>
        <argsstring>(int64_t dim) const</argsstring>
        <name>cumsum</name>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="479" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a06358379c205f22e6c111a456cb766ff" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::cumprod</definition>
        <argsstring>(int64_t dim, ScalarType dtype) const</argsstring>
        <name>cumprod</name>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>ScalarType</type>
          <declname>dtype</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="480" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a032b04d3a486141c766c154d53d8c8ea" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::cumprod</definition>
        <argsstring>(int64_t dim) const</argsstring>
        <name>cumprod</name>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="481" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a344d2cae823c12203e3bf6d0b73fc1cb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::det</definition>
        <argsstring>() const</argsstring>
        <name>det</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="482" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a9f61abc02682dcfd00f844358b3acdf9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::diagonal</definition>
        <argsstring>(int64_t offset=0, int64_t dim1=0, int64_t dim2=1) const</argsstring>
        <name>diagonal</name>
        <param>
          <type>int64_t</type>
          <declname>offset</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int64_t</type>
          <declname>dim1</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int64_t</type>
          <declname>dim2</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="483" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a1a15ee6a9bb8978243843dc1d3fbe381" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::dot</definition>
        <argsstring>(const Tensor &amp;tensor) const</argsstring>
        <name>dot</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>tensor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="484" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ae96ff06f1a78a121e0f169437535c817" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::erf</definition>
        <argsstring>() const</argsstring>
        <name>erf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="485" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a60d5f8f0c844e692a17310a941d47ffa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::erf_</definition>
        <argsstring>()</argsstring>
        <name>erf_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="486" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a1b215403c7d23babb59d86a91f2d68d5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::erfc</definition>
        <argsstring>() const</argsstring>
        <name>erfc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="487" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a7c7389d5d91bd16410cfcaae8b4ec953" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::erfc_</definition>
        <argsstring>()</argsstring>
        <name>erfc_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="488" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a5e38dd793b8acdbd479bdedb9e9fb1b2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::exp</definition>
        <argsstring>() const</argsstring>
        <name>exp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="489" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a9b8b63c176ac8234b11cc373a90dbbae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::exp_</definition>
        <argsstring>()</argsstring>
        <name>exp_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="490" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a35b8d857ab64710ac5451b67f43652c5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::expm1</definition>
        <argsstring>() const</argsstring>
        <name>expm1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="491" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a321b24a2126870dd8bc15bfdde54cb2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::expm1_</definition>
        <argsstring>()</argsstring>
        <name>expm1_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="492" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1aa68deeb98a99b7b4660d3036ef97cac6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::expand</definition>
        <argsstring>(IntList size, bool implicit=false) const</argsstring>
        <name>expand</name>
        <param>
          <type><ref refid="classat_1_1_array_ref" kindref="compound">IntList</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>implicit</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="493" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a1b09fed666f3a6f7c9d6240192604f95" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::expand_as</definition>
        <argsstring>(const Tensor &amp;other) const</argsstring>
        <name>expand_as</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="494" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a3d13cc715faf52bd76e78cad08e09d29" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::flatten</definition>
        <argsstring>(int64_t start_dim=0, int64_t end_dim=-1) const</argsstring>
        <name>flatten</name>
        <param>
          <type>int64_t</type>
          <declname>start_dim</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int64_t</type>
          <declname>end_dim</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="495" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a7365b5219d709cc4726ea3e67d30d885" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::fill_</definition>
        <argsstring>(Scalar value)</argsstring>
        <name>fill_</name>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="496" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a54b65108002df3b826119875fd1103ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::fill_</definition>
        <argsstring>(const Tensor &amp;value)</argsstring>
        <name>fill_</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="497" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a480fec3159b17a1894765dad8b1dc934" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::floor</definition>
        <argsstring>() const</argsstring>
        <name>floor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="498" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a203fdde0cdf15acd01fff4520888584b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::floor_</definition>
        <argsstring>()</argsstring>
        <name>floor_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="499" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a671f430bb2e35ed12d5220360ce95f92" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::ger</definition>
        <argsstring>(const Tensor &amp;vec2) const</argsstring>
        <name>ger</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>vec2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="500" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ac88053dce40a9e8aa8f039997a47c436" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::tuple&lt; <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref>, <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &gt;</type>
        <definition>std::tuple&lt;Tensor,Tensor&gt; at::Tensor::gesv</definition>
        <argsstring>(const Tensor &amp;A) const</argsstring>
        <name>gesv</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="501" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1af5a9180b692f2fa9d59418d54e9fd826" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::tuple&lt; <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref>, <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &gt;</type>
        <definition>std::tuple&lt;Tensor,Tensor&gt; at::Tensor::_gesv_helper</definition>
        <argsstring>(const Tensor &amp;A) const</argsstring>
        <name>_gesv_helper</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>A</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="502" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1afe8239d2ad3337bc2f2484cb9e4093d6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::fft</definition>
        <argsstring>(int64_t signal_ndim, bool normalized=false) const</argsstring>
        <name>fft</name>
        <param>
          <type>int64_t</type>
          <declname>signal_ndim</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>normalized</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="503" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a74863cb05c61fc70c317a10d7e058048" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::ifft</definition>
        <argsstring>(int64_t signal_ndim, bool normalized=false) const</argsstring>
        <name>ifft</name>
        <param>
          <type>int64_t</type>
          <declname>signal_ndim</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>normalized</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="504" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1aa1daa96b0a03e641df1a32c15884d372" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::rfft</definition>
        <argsstring>(int64_t signal_ndim, bool normalized=false, bool onesided=true) const</argsstring>
        <name>rfft</name>
        <param>
          <type>int64_t</type>
          <declname>signal_ndim</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>normalized</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>onesided</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="505" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ab9edf50e04c1ef2cec9c9869662d5ab1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::irfft</definition>
        <argsstring>(int64_t signal_ndim, bool normalized=false, bool onesided=true, IntList signal_sizes={}) const</argsstring>
        <name>irfft</name>
        <param>
          <type>int64_t</type>
          <declname>signal_ndim</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>normalized</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>onesided</declname>
          <defval>true</defval>
        </param>
        <param>
          <type><ref refid="classat_1_1_array_ref" kindref="compound">IntList</ref></type>
          <declname>signal_sizes</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="506" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a7abddd1692647be3df051b9df0f5c65f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::_fft_with_size</definition>
        <argsstring>(int64_t signal_ndim, bool complex_input, bool complex_output, bool inverse, IntList checked_signal_sizes, bool normalized, bool onesided, IntList output_sizes) const</argsstring>
        <name>_fft_with_size</name>
        <param>
          <type>int64_t</type>
          <declname>signal_ndim</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>complex_input</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>complex_output</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>inverse</declname>
        </param>
        <param>
          <type><ref refid="classat_1_1_array_ref" kindref="compound">IntList</ref></type>
          <declname>checked_signal_sizes</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>normalized</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>onesided</declname>
        </param>
        <param>
          <type><ref refid="classat_1_1_array_ref" kindref="compound">IntList</ref></type>
          <declname>output_sizes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="507" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ab3195df77761cebb1c5a2cc0744740cc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::index</definition>
        <argsstring>(TensorList indices) const</argsstring>
        <name>index</name>
        <param>
          <type><ref refid="classat_1_1_array_ref" kindref="compound">TensorList</ref></type>
          <declname>indices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="508" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a45aa387430f4625832cd6f2a3c511a98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::index_copy_</definition>
        <argsstring>(int64_t dim, const Tensor &amp;index, const Tensor &amp;source)</argsstring>
        <name>index_copy_</name>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="509" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a1b74f889ed2d277e4e9c558d5e61472d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::index_put</definition>
        <argsstring>(TensorList indices, const Tensor &amp;values) const</argsstring>
        <name>index_put</name>
        <param>
          <type><ref refid="classat_1_1_array_ref" kindref="compound">TensorList</ref></type>
          <declname>indices</declname>
        </param>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>values</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="510" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a2aeab25261d8a8145587e2955b0cc27c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::index_put_</definition>
        <argsstring>(TensorList indices, const Tensor &amp;values)</argsstring>
        <name>index_put_</name>
        <param>
          <type><ref refid="classat_1_1_array_ref" kindref="compound">TensorList</ref></type>
          <declname>indices</declname>
        </param>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>values</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="511" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1abec177a8260d076ac1eda607f13f11ff" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::inverse</definition>
        <argsstring>() const</argsstring>
        <name>inverse</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="512" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a8719901777254154865a312a2cc2129e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::isclose</definition>
        <argsstring>(const Tensor &amp;other, double rtol=1e-05, double atol=1e-08, bool equal_nan=false) const</argsstring>
        <name>isclose</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>double</type>
          <declname>rtol</declname>
          <defval>1e-05</defval>
        </param>
        <param>
          <type>double</type>
          <declname>atol</declname>
          <defval>1e-08</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>equal_nan</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="513" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a05e90e9c85c742428122a999a1b64b05" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool at::Tensor::is_cuda</definition>
        <argsstring>() const</argsstring>
        <name>is_cuda</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="514" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ac4d447b3eb1e0be0dce71e0709058342" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool at::Tensor::is_distributed</definition>
        <argsstring>() const</argsstring>
        <name>is_distributed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="515" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ab96c912f0e0527c1309deed7c09f6842" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool at::Tensor::is_floating_point</definition>
        <argsstring>() const</argsstring>
        <name>is_floating_point</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="516" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1aa6c10c7e78e34bfeec061528a2f1d38f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool at::Tensor::is_nonzero</definition>
        <argsstring>() const</argsstring>
        <name>is_nonzero</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="517" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a50258e16585b785dd439d0cab924075c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool at::Tensor::is_same_size</definition>
        <argsstring>(const Tensor &amp;other) const</argsstring>
        <name>is_same_size</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="518" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1adc87e748ddaa3170f0677deca9458a39" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool at::Tensor::is_signed</definition>
        <argsstring>() const</argsstring>
        <name>is_signed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="519" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a261ad7511ca5d293d08c180c7b2cda36" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool at::Tensor::is_sparse</definition>
        <argsstring>() const</argsstring>
        <name>is_sparse</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="520" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a934054d9a9c3d45f7a2b488212ad0f94" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::tuple&lt; <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref>, <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &gt;</type>
        <definition>std::tuple&lt;Tensor,Tensor&gt; at::Tensor::kthvalue</definition>
        <argsstring>(int64_t k, int64_t dim=-1, bool keepdim=false) const</argsstring>
        <name>kthvalue</name>
        <param>
          <type>int64_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>keepdim</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="521" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a906936b939af5419895e97af10283791" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::log</definition>
        <argsstring>() const</argsstring>
        <name>log</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="522" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1acfd8acc5daf5da139ed95cb90da864f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::log_</definition>
        <argsstring>()</argsstring>
        <name>log_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="523" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a6462238558e0e45ab025f02d255da3af" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::log10</definition>
        <argsstring>() const</argsstring>
        <name>log10</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="524" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ab60b032e2987f457e4c42b6391bd5fd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::log10_</definition>
        <argsstring>()</argsstring>
        <name>log10_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="525" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ae25118d3094011e64532257b2399f270" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::log1p</definition>
        <argsstring>() const</argsstring>
        <name>log1p</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="526" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a41ae4c99244cd921e6f7f3259c67dcc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::log1p_</definition>
        <argsstring>()</argsstring>
        <name>log1p_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="527" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a307ca0c80b761c76c3655b5230f5f723" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::log2</definition>
        <argsstring>() const</argsstring>
        <name>log2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="528" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a87f77ad7455f22ce5fe4c3b7c672460c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::log2_</definition>
        <argsstring>()</argsstring>
        <name>log2_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="529" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a31d8b9ace04e2c7a64ca76e45e54431a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::logdet</definition>
        <argsstring>() const</argsstring>
        <name>logdet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="530" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1aabdb272d546f97ca7525b61191e6ec85" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::log_softmax</definition>
        <argsstring>(int64_t dim) const</argsstring>
        <name>log_softmax</name>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="531" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a6b4c4449a999d983cdd6e38e33fe92cf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::log_softmax_backward_data</definition>
        <argsstring>(const Tensor &amp;grad_output, const Tensor &amp;output, int64_t dim) const</argsstring>
        <name>log_softmax_backward_data</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>grad_output</declname>
        </param>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>output</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="532" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a8d0a878b2b0d1fd74441d7824a6fde7d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::logsumexp</definition>
        <argsstring>(int64_t dim, bool keepdim=false) const</argsstring>
        <name>logsumexp</name>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>keepdim</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="533" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1aad4bd74f6942ea1a79a44be9ee1a654f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::matmul</definition>
        <argsstring>(const Tensor &amp;other) const</argsstring>
        <name>matmul</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="534" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1aad2569b1de729634070981577b0fce64" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::tuple&lt; <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref>, <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &gt;</type>
        <definition>std::tuple&lt;Tensor,Tensor&gt; at::Tensor::max</definition>
        <argsstring>(int64_t dim, bool keepdim=false) const</argsstring>
        <name>max</name>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>keepdim</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="535" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a902bbb5ffaf0a5be1faa659dbfc09fef" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::max_values</definition>
        <argsstring>(int64_t dim, bool keepdim=false) const</argsstring>
        <name>max_values</name>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>keepdim</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="536" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ae0b785dad61bebcc85a946a3541ed245" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::mean</definition>
        <argsstring>(ScalarType dtype) const</argsstring>
        <name>mean</name>
        <param>
          <type>ScalarType</type>
          <declname>dtype</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="537" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1aaee80ac0ca7961050e5ea0661d56a5c3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::mean</definition>
        <argsstring>() const</argsstring>
        <name>mean</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="538" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1adeaad10fa203952068bda0437a29e175" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::mean</definition>
        <argsstring>(int64_t dim, bool keepdim, ScalarType dtype) const</argsstring>
        <name>mean</name>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>keepdim</declname>
        </param>
        <param>
          <type>ScalarType</type>
          <declname>dtype</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="539" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a554cd9058f23c98be15f855f520e65bb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::mean</definition>
        <argsstring>(int64_t dim, bool keepdim=false) const</argsstring>
        <name>mean</name>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>keepdim</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="540" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a1c8ed1675e3b230b57594c4261519705" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::mean</definition>
        <argsstring>(int64_t dim, ScalarType dtype) const</argsstring>
        <name>mean</name>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>ScalarType</type>
          <declname>dtype</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="541" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a3b7d6bf8432e71eef7c488103057eb2e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::tuple&lt; <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref>, <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &gt;</type>
        <definition>std::tuple&lt;Tensor,Tensor&gt; at::Tensor::median</definition>
        <argsstring>(int64_t dim, bool keepdim=false) const</argsstring>
        <name>median</name>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>keepdim</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="542" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a04853f50dc4da79ec404860064ae0f6e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::tuple&lt; <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref>, <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &gt;</type>
        <definition>std::tuple&lt;Tensor,Tensor&gt; at::Tensor::min</definition>
        <argsstring>(int64_t dim, bool keepdim=false) const</argsstring>
        <name>min</name>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>keepdim</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="543" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a3622ab49bd7855b6d99b2ce2c49137f1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::min_values</definition>
        <argsstring>(int64_t dim, bool keepdim=false) const</argsstring>
        <name>min_values</name>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>keepdim</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="544" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a09d1eba8914e76f5141e1af72ebda7ef" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::mm</definition>
        <argsstring>(const Tensor &amp;mat2) const</argsstring>
        <name>mm</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>mat2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="545" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a4d85f210b887c1b3af6d968d567847d1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::tuple&lt; <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref>, <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &gt;</type>
        <definition>std::tuple&lt;Tensor,Tensor&gt; at::Tensor::mode</definition>
        <argsstring>(int64_t dim=-1, bool keepdim=false) const</argsstring>
        <name>mode</name>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>keepdim</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="546" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a82940b68a12bda701e72734208653916" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::mv</definition>
        <argsstring>(const Tensor &amp;vec) const</argsstring>
        <name>mv</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="547" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a31825c7bdd705705c3a230a931776639" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::narrow</definition>
        <argsstring>(int64_t dim, int64_t start, int64_t length) const</argsstring>
        <name>narrow</name>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>start</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="548" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a8946771d65d960154116604bdc173729" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::permute</definition>
        <argsstring>(IntList dims) const</argsstring>
        <name>permute</name>
        <param>
          <type><ref refid="classat_1_1_array_ref" kindref="compound">IntList</ref></type>
          <declname>dims</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="549" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a99ce592322487225ae43e40564236baa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::pin_memory</definition>
        <argsstring>() const</argsstring>
        <name>pin_memory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="550" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1aaf2cdbe3c2aaa177d251f1eb0da9335a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::pinverse</definition>
        <argsstring>(double rcond=1e-15) const</argsstring>
        <name>pinverse</name>
        <param>
          <type>double</type>
          <declname>rcond</declname>
          <defval>1e-15</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="551" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a9691781e7fecea91f5a4b2c18c9fa9f0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::repeat</definition>
        <argsstring>(IntList repeats) const</argsstring>
        <name>repeat</name>
        <param>
          <type><ref refid="classat_1_1_array_ref" kindref="compound">IntList</ref></type>
          <declname>repeats</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="552" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a1a48e797fff112fde42d57c93336fedd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::reshape</definition>
        <argsstring>(IntList shape) const</argsstring>
        <name>reshape</name>
        <param>
          <type><ref refid="classat_1_1_array_ref" kindref="compound">IntList</ref></type>
          <declname>shape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="553" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a78c2bbe689fd169f987bcb66261e5e85" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::reshape_as</definition>
        <argsstring>(const Tensor &amp;other) const</argsstring>
        <name>reshape_as</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="554" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ad61b21c0b5b2d523d750ad1f94649487" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::round</definition>
        <argsstring>() const</argsstring>
        <name>round</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="555" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ad9fafe556341ed06e6f50ef5d200623a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::round_</definition>
        <argsstring>()</argsstring>
        <name>round_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="556" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a59023b4cc19233aaa244db35d1c6a5a4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::relu</definition>
        <argsstring>() const</argsstring>
        <name>relu</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="557" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ac1a13681e52be4d39e1c7f48d86eb71c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::relu_</definition>
        <argsstring>()</argsstring>
        <name>relu_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="558" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a7668de7733830c35320169d5850d258c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::hardshrink</definition>
        <argsstring>(Scalar lambd=0.5) const</argsstring>
        <name>hardshrink</name>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>lambd</declname>
          <defval>0.5</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="559" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a27754f8b331a7a95a3f503383bfbb7f6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::hardshrink_backward</definition>
        <argsstring>(const Tensor &amp;grad_out, Scalar lambd) const</argsstring>
        <name>hardshrink_backward</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>grad_out</declname>
        </param>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>lambd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="560" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a99f19a1da04f5b7b469e96d3de05ad4d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::rsqrt</definition>
        <argsstring>() const</argsstring>
        <name>rsqrt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="561" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1afe48f35d62821c3d6d2f9afdf36f60ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::rsqrt_</definition>
        <argsstring>()</argsstring>
        <name>rsqrt_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="562" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a854c2b232ba7da89e3f8632f4ec21784" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::select</definition>
        <argsstring>(int64_t dim, int64_t index) const</argsstring>
        <name>select</name>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="563" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ab190e338e8daf8f7c77834e27d3758a8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::sigmoid</definition>
        <argsstring>() const</argsstring>
        <name>sigmoid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="564" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a6f686b46a6971e5c37afd3d3294df68c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::sigmoid_</definition>
        <argsstring>()</argsstring>
        <name>sigmoid_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="565" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a47ae4a9d9113c0acebe94e98709d63f3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::sin</definition>
        <argsstring>() const</argsstring>
        <name>sin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="566" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1aa9ed790465affe9f49b8429de1076816" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::sin_</definition>
        <argsstring>()</argsstring>
        <name>sin_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="567" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a98069f0b64ebdb51c4d390153b6767a4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::sinh</definition>
        <argsstring>() const</argsstring>
        <name>sinh</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="568" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a95e7027076a937925c01b13c84a507df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::sinh_</definition>
        <argsstring>()</argsstring>
        <name>sinh_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="569" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a163cf09129011ea17cf7851ce03cd618" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t at::Tensor::size</definition>
        <argsstring>(int64_t dim) const</argsstring>
        <name>size</name>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="570" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a2123c98013d645426e28d6aa69b3903a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::slice</definition>
        <argsstring>(int64_t dim=0, int64_t start=0, int64_t end=9223372036854775807, int64_t step=1) const</argsstring>
        <name>slice</name>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int64_t</type>
          <declname>start</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int64_t</type>
          <declname>end</declname>
          <defval>9223372036854775807</defval>
        </param>
        <param>
          <type>int64_t</type>
          <declname>step</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="571" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1aadfe3b7d01fdd815d042ee16f8518629" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::tuple&lt; <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref>, <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &gt;</type>
        <definition>std::tuple&lt;Tensor,Tensor&gt; at::Tensor::slogdet</definition>
        <argsstring>() const</argsstring>
        <name>slogdet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="572" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1aa08964a38f52a4e5c0effbe0b91a37bf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::smm</definition>
        <argsstring>(const Tensor &amp;mat2) const</argsstring>
        <name>smm</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>mat2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="573" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a4ed5d69c75f897a298e7f131df315fa1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::softmax</definition>
        <argsstring>(int64_t dim) const</argsstring>
        <name>softmax</name>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="574" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a563c9b8d744490e71ba52152885ecb0e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::softmax_backward_data</definition>
        <argsstring>(const Tensor &amp;grad_output, const Tensor &amp;output, int64_t dim) const</argsstring>
        <name>softmax_backward_data</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>grad_output</declname>
        </param>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>output</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="575" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a96f76bf143e9f49924a1e8b869c0b29c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &gt;</type>
        <definition>std::vector&lt;Tensor&gt; at::Tensor::split</definition>
        <argsstring>(int64_t split_size, int64_t dim=0) const</argsstring>
        <name>split</name>
        <param>
          <type>int64_t</type>
          <declname>split_size</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="576" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a6979c5c770d26ea4abf50dbf760813d3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &gt;</type>
        <definition>std::vector&lt;Tensor&gt; at::Tensor::split_with_sizes</definition>
        <argsstring>(IntList split_sizes, int64_t dim=0) const</argsstring>
        <name>split_with_sizes</name>
        <param>
          <type><ref refid="classat_1_1_array_ref" kindref="compound">IntList</ref></type>
          <declname>split_sizes</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="577" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ada65d787d9946fd2bfc126a6df97ec00" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::squeeze</definition>
        <argsstring>() const</argsstring>
        <name>squeeze</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="578" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a44467f1afe204a57f63252a86e9afe04" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::squeeze</definition>
        <argsstring>(int64_t dim) const</argsstring>
        <name>squeeze</name>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="579" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ab272ca486dc86e2c0499211d970e37b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::squeeze_</definition>
        <argsstring>()</argsstring>
        <name>squeeze_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="580" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a3634035bee0774069cd8f8d3c7567a0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::squeeze_</definition>
        <argsstring>(int64_t dim)</argsstring>
        <name>squeeze_</name>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="581" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ad8abf3a9e9a58a946bac952c92edb6ee" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::sspaddmm</definition>
        <argsstring>(const Tensor &amp;mat1, const Tensor &amp;mat2, Scalar beta=1, Scalar alpha=1) const</argsstring>
        <name>sspaddmm</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>mat1</declname>
        </param>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>mat2</declname>
        </param>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>beta</declname>
          <defval>1</defval>
        </param>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>alpha</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="582" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ac6c8d1a6472c6e3cfe0f17a0f6a7b8a0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::stft</definition>
        <argsstring>(int64_t n_fft, int64_t hop_length, int64_t win_length, const Tensor &amp;window={}, bool normalized=false, bool onesided=true) const</argsstring>
        <name>stft</name>
        <param>
          <type>int64_t</type>
          <declname>n_fft</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>hop_length</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>win_length</declname>
        </param>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>window</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>normalized</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>onesided</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="583" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a756ac988c2b43f1cb61134945b7567f3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t at::Tensor::stride</definition>
        <argsstring>(int64_t dim) const</argsstring>
        <name>stride</name>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="584" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a63766202540b15f41e60064883d1923b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::sum</definition>
        <argsstring>(ScalarType dtype) const</argsstring>
        <name>sum</name>
        <param>
          <type>ScalarType</type>
          <declname>dtype</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="585" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1af3b71b4363235729794fb0751bdb9082" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::sum</definition>
        <argsstring>() const</argsstring>
        <name>sum</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="586" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a1276105790369506e9a99b3b28d3ebd7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::_sum</definition>
        <argsstring>() const</argsstring>
        <name>_sum</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="587" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a3b0ebceb6b2662f1c91b587a24bc9c24" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::sum</definition>
        <argsstring>(IntList dim, bool keepdim, ScalarType dtype) const</argsstring>
        <name>sum</name>
        <param>
          <type><ref refid="classat_1_1_array_ref" kindref="compound">IntList</ref></type>
          <declname>dim</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>keepdim</declname>
        </param>
        <param>
          <type>ScalarType</type>
          <declname>dtype</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="588" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a4ab481f61e1b8eebd46577a5c439ede2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::sum</definition>
        <argsstring>(IntList dim, bool keepdim=false) const</argsstring>
        <name>sum</name>
        <param>
          <type><ref refid="classat_1_1_array_ref" kindref="compound">IntList</ref></type>
          <declname>dim</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>keepdim</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="589" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a4281f566f3336c70c8db66e4f4b17f87" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::sum</definition>
        <argsstring>(IntList dim, ScalarType dtype) const</argsstring>
        <name>sum</name>
        <param>
          <type><ref refid="classat_1_1_array_ref" kindref="compound">IntList</ref></type>
          <declname>dim</declname>
        </param>
        <param>
          <type>ScalarType</type>
          <declname>dtype</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="590" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a1a1204a01ce24c5576944ce2c210cbc9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::_sum</definition>
        <argsstring>(IntList dim, bool keepdim=false) const</argsstring>
        <name>_sum</name>
        <param>
          <type><ref refid="classat_1_1_array_ref" kindref="compound">IntList</ref></type>
          <declname>dim</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>keepdim</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="591" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ac3453d7350f69efd95ded4b4c574b7f5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::sqrt</definition>
        <argsstring>() const</argsstring>
        <name>sqrt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="592" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a9211804fda973ed357df8b922b2528ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::sqrt_</definition>
        <argsstring>()</argsstring>
        <name>sqrt_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="593" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a4158ae39c55a90c9433d6cd1b0b552e5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::std</definition>
        <argsstring>(bool unbiased=true) const</argsstring>
        <name>std</name>
        <param>
          <type>bool</type>
          <declname>unbiased</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="594" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a98d261b125794a1ce7cb9d68cc857bed" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::std</definition>
        <argsstring>(int64_t dim, bool unbiased=true, bool keepdim=false) const</argsstring>
        <name>std</name>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>unbiased</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>keepdim</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="595" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a2a8f22bc51f4c6a78be136b82f825196" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::prod</definition>
        <argsstring>(ScalarType dtype) const</argsstring>
        <name>prod</name>
        <param>
          <type>ScalarType</type>
          <declname>dtype</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="596" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1aa7a4c20e47d5d8502f04ce7123061866" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::prod</definition>
        <argsstring>() const</argsstring>
        <name>prod</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="597" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a0a246c1a55c48cdbc1cc9311d5b4ba2b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::_prod</definition>
        <argsstring>() const</argsstring>
        <name>_prod</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="598" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a870895158df1618d214565685df76831" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::prod</definition>
        <argsstring>(int64_t dim, bool keepdim, ScalarType dtype) const</argsstring>
        <name>prod</name>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>keepdim</declname>
        </param>
        <param>
          <type>ScalarType</type>
          <declname>dtype</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="599" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a57713502f673259960d20cb57dceea23" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::prod</definition>
        <argsstring>(int64_t dim, bool keepdim=false) const</argsstring>
        <name>prod</name>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>keepdim</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="600" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a60b35aa94f7b29f496232109139264f2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::prod</definition>
        <argsstring>(int64_t dim, ScalarType dtype) const</argsstring>
        <name>prod</name>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>ScalarType</type>
          <declname>dtype</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="601" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1af84c4cac809ca2951ce36da843722869" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::_prod</definition>
        <argsstring>(int64_t dim, bool keepdim=false) const</argsstring>
        <name>_prod</name>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>keepdim</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="602" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1adc7a921a6fef5bf035bf371ef3903df9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::t</definition>
        <argsstring>() const</argsstring>
        <name>t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="603" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a2c4798fbd3a958e34f0c1465c0829295" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::t_</definition>
        <argsstring>()</argsstring>
        <name>t_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="604" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a270d8cca1b64912747e21b838d139182" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::tan</definition>
        <argsstring>() const</argsstring>
        <name>tan</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="605" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a0dc6eec75db92ffcadea71d3277e7865" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::tan_</definition>
        <argsstring>()</argsstring>
        <name>tan_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="606" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a764510fd2dc4d035b9961d1dc448ea05" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::tanh</definition>
        <argsstring>() const</argsstring>
        <name>tanh</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="607" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a98b1074283ca90370f7ee5dd2fadd2eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::tanh_</definition>
        <argsstring>()</argsstring>
        <name>tanh_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="608" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ab34d154cd9da86304c2c467461ada0fd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::transpose</definition>
        <argsstring>(int64_t dim0, int64_t dim1) const</argsstring>
        <name>transpose</name>
        <param>
          <type>int64_t</type>
          <declname>dim0</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>dim1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="609" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a007fb44a7b3c4240c277dc49239521dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::transpose_</definition>
        <argsstring>(int64_t dim0, int64_t dim1)</argsstring>
        <name>transpose_</name>
        <param>
          <type>int64_t</type>
          <declname>dim0</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>dim1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="610" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a427dc04a47f43c38a1d710e37b1b9869" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::flip</definition>
        <argsstring>(IntList dims) const</argsstring>
        <name>flip</name>
        <param>
          <type><ref refid="classat_1_1_array_ref" kindref="compound">IntList</ref></type>
          <declname>dims</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="611" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a6f827d523694376d7deb734a30a50076" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::trunc</definition>
        <argsstring>() const</argsstring>
        <name>trunc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="612" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a0375e9f48fc6cb3b24151cf16902b449" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::trunc_</definition>
        <argsstring>()</argsstring>
        <name>trunc_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="613" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a28d0e64a6619b931913d5980284ca721" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::type_as</definition>
        <argsstring>(const Tensor &amp;other) const</argsstring>
        <name>type_as</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="614" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a6d164485f71226bfbcb8867ba03b4cc3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::tuple&lt; <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref>, <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &gt;</type>
        <definition>std::tuple&lt;Tensor,Tensor&gt; at::Tensor::_unique</definition>
        <argsstring>(bool sorted=false, bool return_inverse=false) const</argsstring>
        <name>_unique</name>
        <param>
          <type>bool</type>
          <declname>sorted</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>return_inverse</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="615" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a48a454772f0b4c2b5d38be662433e6dd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::unsqueeze</definition>
        <argsstring>(int64_t dim) const</argsstring>
        <name>unsqueeze</name>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="616" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1aa606413551acd870212c20d9c2d1a4c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::unsqueeze_</definition>
        <argsstring>(int64_t dim)</argsstring>
        <name>unsqueeze_</name>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="617" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a2b35e4684865dd9b937af2f822e02d9a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::var</definition>
        <argsstring>(bool unbiased=true) const</argsstring>
        <name>var</name>
        <param>
          <type>bool</type>
          <declname>unbiased</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="618" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1af7da0b5d2d9784e53a212159107992bb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::var</definition>
        <argsstring>(int64_t dim, bool unbiased=true, bool keepdim=false) const</argsstring>
        <name>var</name>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>unbiased</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>keepdim</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="619" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a7e7a899530ec006260ed42bac9b57b70" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::view_as</definition>
        <argsstring>(const Tensor &amp;other) const</argsstring>
        <name>view_as</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="620" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a5d0f1af4c1b63de3d94f6efda18408d6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::where</definition>
        <argsstring>(const Tensor &amp;condition, const Tensor &amp;other) const</argsstring>
        <name>where</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>condition</declname>
        </param>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="621" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a538edf4efba69ea4d8042cf56a1002d0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::_s_where</definition>
        <argsstring>(const Tensor &amp;condition, const Tensor &amp;other) const</argsstring>
        <name>_s_where</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>condition</declname>
        </param>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="622" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a78c0b5a9c47f3ccd23b3f6b85021c71f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::_standard_gamma_grad</definition>
        <argsstring>(const Tensor &amp;output) const</argsstring>
        <name>_standard_gamma_grad</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>output</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="623" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a1c431e71e5ebac07f4a5b9ea259632c3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::_standard_gamma</definition>
        <argsstring>(Generator *generator=nullptr) const</argsstring>
        <name>_standard_gamma</name>
        <param>
          <type><ref refid="structat_1_1_generator" kindref="compound">Generator</ref> *</type>
          <declname>generator</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="624" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a7a85bfb24310c6d91f812ad7947a29ad" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::norm</definition>
        <argsstring>(Scalar p=2) const</argsstring>
        <name>norm</name>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>p</declname>
          <defval>2</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="625" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a1f338f9b0fd0a851fef1be8e9f8d3cf8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::norm</definition>
        <argsstring>(Scalar p, int64_t dim, bool keepdim=false) const</argsstring>
        <name>norm</name>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>p</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>keepdim</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="626" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ad05f1fcc2fcf0c7c9ee1eb138f44372c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::clone</definition>
        <argsstring>() const</argsstring>
        <name>clone</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="627" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a09853a1f55688da98e29dcad6808a86c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::resize_as_</definition>
        <argsstring>(const Tensor &amp;the_template)</argsstring>
        <name>resize_as_</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>the_template</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="628" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ab136c35778aa09d57fa7d917faf3e0f4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::pow</definition>
        <argsstring>(Scalar exponent) const</argsstring>
        <name>pow</name>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>exponent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="629" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ae24321f2972600312f02f41533d7fe5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::zero_</definition>
        <argsstring>()</argsstring>
        <name>zero_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="630" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a58bc273a285b429bafe884970dcdfd64" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::add</definition>
        <argsstring>(const Tensor &amp;other, Scalar alpha=1) const</argsstring>
        <name>add</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>alpha</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="631" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a10a68653f03e78f64feb5e22d825a23f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::add_</definition>
        <argsstring>(const Tensor &amp;other, Scalar alpha=1)</argsstring>
        <name>add_</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>alpha</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="632" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a132bfd452862081e69023c8a86fb9618" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::sub</definition>
        <argsstring>(const Tensor &amp;other, Scalar alpha=1) const</argsstring>
        <name>sub</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>alpha</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="633" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a3741ece64f5e7503632be469112671ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::sub_</definition>
        <argsstring>(const Tensor &amp;other, Scalar alpha=1)</argsstring>
        <name>sub_</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>alpha</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="634" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a615c7d5996505c059ed366721aff4536" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::mul</definition>
        <argsstring>(const Tensor &amp;other) const</argsstring>
        <name>mul</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="635" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a7d1eff28e2a009b13fc491e7608d3793" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::mul</definition>
        <argsstring>(Scalar other) const</argsstring>
        <name>mul</name>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="636" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1af379bbe2a1eca29179ef362df1ead4be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::mul_</definition>
        <argsstring>(const Tensor &amp;other)</argsstring>
        <name>mul_</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="637" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1aa57329ca9c8a608fe6e4d61ef2230fe3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::mul_</definition>
        <argsstring>(Scalar other)</argsstring>
        <name>mul_</name>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="638" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a197a4b05678c67cda2956eb7f88334b8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::div</definition>
        <argsstring>(Scalar other) const</argsstring>
        <name>div</name>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="639" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a748e76e8c74c970ca0a42e380f1ed400" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::div_</definition>
        <argsstring>(Scalar other)</argsstring>
        <name>div_</name>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="640" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a576ec925a7fdf576837d183a346e1270" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::addmm</definition>
        <argsstring>(const Tensor &amp;mat1, const Tensor &amp;mat2, Scalar beta=1, Scalar alpha=1) const</argsstring>
        <name>addmm</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>mat1</declname>
        </param>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>mat2</declname>
        </param>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>beta</declname>
          <defval>1</defval>
        </param>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>alpha</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="641" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ac16a050de396708d88488248172d9998" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::addmm_</definition>
        <argsstring>(const Tensor &amp;mat1, const Tensor &amp;mat2, Scalar beta=1, Scalar alpha=1)</argsstring>
        <name>addmm_</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>mat1</declname>
        </param>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>mat2</declname>
        </param>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>beta</declname>
          <defval>1</defval>
        </param>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>alpha</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="642" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a200dcc6a3fce8111667e2478c588b0fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::sparse_raw_resize_</definition>
        <argsstring>(IntList size, int64_t sparseDims, int64_t denseDims)</argsstring>
        <name>sparse_raw_resize_</name>
        <param>
          <type><ref refid="classat_1_1_array_ref" kindref="compound">IntList</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>sparseDims</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>denseDims</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="643" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a95cd023802f7c5831aaf63f032a775bb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::_sparse_mask</definition>
        <argsstring>(SparseTensorRef mask) const</argsstring>
        <name>_sparse_mask</name>
        <param>
          <type><ref refid="structat_1_1_sparse_tensor_ref" kindref="compound">SparseTensorRef</ref></type>
          <declname>mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="644" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1af5a18b8ae113c4728298e1c34ab27412" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::to_dense</definition>
        <argsstring>() const</argsstring>
        <name>to_dense</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="645" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a155f90f7e595e576867d08aed28fd019" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t at::Tensor::_sparseDims</definition>
        <argsstring>() const</argsstring>
        <name>_sparseDims</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="646" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a43491464f0f1fe11600e819ab430599e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t at::Tensor::_dimI</definition>
        <argsstring>() const</argsstring>
        <name>_dimI</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="647" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1aa6d34e735095da3ea519beabf60165c7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t at::Tensor::_denseDims</definition>
        <argsstring>() const</argsstring>
        <name>_denseDims</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="648" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ae24b17c18930ce9b76eddf367b46b17a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t at::Tensor::_dimV</definition>
        <argsstring>() const</argsstring>
        <name>_dimV</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="649" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a163d30f7eec1a62cc9d089f953fcacd6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t at::Tensor::_nnz</definition>
        <argsstring>() const</argsstring>
        <name>_nnz</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="650" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a32b4c948e5757da8f30728af856cf91c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::coalesce</definition>
        <argsstring>() const</argsstring>
        <name>coalesce</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="651" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a54eb94b2a928126fe29abf74e351e164" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool at::Tensor::is_coalesced</definition>
        <argsstring>() const</argsstring>
        <name>is_coalesced</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="652" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a8e244263c9de86b33a5d6760555d60bb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::_indices</definition>
        <argsstring>() const</argsstring>
        <name>_indices</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="653" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a67cecae0a69cad0e6b26e8f92713a9f3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::_values</definition>
        <argsstring>() const</argsstring>
        <name>_values</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="654" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ac301cb06ee4e3e24a22bfcce21a1f225" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t at::Tensor::numel</definition>
        <argsstring>() const</argsstring>
        <name>numel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="655" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a3a2a59387f7383e2f5908394d32b4416" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &gt;</type>
        <definition>std::vector&lt;Tensor&gt; at::Tensor::unbind</definition>
        <argsstring>(int64_t dim=0) const</argsstring>
        <name>unbind</name>
        <param>
          <type>int64_t</type>
          <declname>dim</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="656" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a44d31419951c13f0615f30db1cbe1302" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t at::Tensor::get_device</definition>
        <argsstring>() const</argsstring>
        <name>get_device</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="657" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a472586999077d80d3f3817fcad70ae3d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto at::Tensor::m</definition>
        <argsstring>(F func, Args &amp;&amp;... params) const -&gt; decltype(func(*this, std::forward&lt; Args &gt;(params)...))</argsstring>
        <name>m</name>
        <param>
          <type>F</type>
          <declname>func</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="660" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" bodystart="660" bodyend="662"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a039978832ec3a6b24f9af266d06b40fc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>at::Tensor::Tensor</definition>
        <argsstring>()</argsstring>
        <name>Tensor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" line="47" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" bodystart="47" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a215230ad15931dd6d4cf13a0048ce724" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>at::Tensor::Tensor</definition>
        <argsstring>(TensorImpl *self, bool retain)</argsstring>
        <name>Tensor</name>
        <param>
          <type><ref refid="structat_1_1_tensor_impl" kindref="compound">TensorImpl</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>retain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" line="48" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" bodystart="48" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a413eca0f4a1371c06984eef6d61a9cb5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>at::Tensor::Tensor</definition>
        <argsstring>(const TensorBase &amp;rhs)</argsstring>
        <name>Tensor</name>
        <param>
          <type>const <ref refid="structat_1_1detail_1_1_tensor_base_impl" kindref="compound">TensorBase</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" line="49" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" bodystart="49" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a7d6f9940c1f522ce80208146737bb08c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>at::Tensor::Tensor</definition>
        <argsstring>(const Tensor &amp;rhs)=default</argsstring>
        <name>Tensor</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" line="50" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a8336cdb38b3fb2b2c8b72ebf92921dd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>at::Tensor::Tensor</definition>
        <argsstring>(Tensor &amp;&amp;rhs) noexcept=default</argsstring>
        <name>Tensor</name>
        <param>
          <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" line="51" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1aba0360b6e7817289654afd051c2b7877" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::operator=</definition>
        <argsstring>(Tensor &amp;&amp;rhs) &amp;</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" line="54" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" bodystart="54" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a5997f90b8da1fdc40d6f1259b643d2a8" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::operator=</definition>
        <argsstring>(Tensor const &amp;rhs) &amp;</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" line="58" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" bodystart="58" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a29f0c7e381cb7367644cb9f25e11c54d" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="rvalue" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::operator=</definition>
        <argsstring>(Tensor const &amp;rhs) &amp;&amp;</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" line="66" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a94ab51c985208bab1415cac55af1fd78" prot="public" static="no" const="no" explicit="no" inline="no" refqual="rvalue" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::operator=</definition>
        <argsstring>(Scalar v) &amp;&amp;</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" line="67" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1aec3eab956d4122607d69a13c413a5820" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* at::Tensor::toString</definition>
        <argsstring>() const</argsstring>
        <name>toString</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" line="68" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" bodystart="68" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a5bb72ece57cc45451a7f6f8df3542a03" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classat_1_1_array_ref" kindref="compound">IntList</ref></type>
        <definition>IntList at::Tensor::sizes</definition>
        <argsstring>() const</argsstring>
        <name>sizes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" line="71" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" bodystart="71" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a79ef5820221f4bc6a16f17f3557ec2a4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classat_1_1_array_ref" kindref="compound">IntList</ref></type>
        <definition>IntList at::Tensor::strides</definition>
        <argsstring>() const</argsstring>
        <name>strides</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" line="74" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" bodystart="74" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a21212903d6207e1e999834a3cb866b69" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t at::Tensor::ndimension</definition>
        <argsstring>() const</argsstring>
        <name>ndimension</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" line="77" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" bodystart="77" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ad556453a05af0ed569b78f0f5692e02a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structat_1_1_type" kindref="compound">Type</ref> &amp;</type>
        <definition>Type&amp; at::Tensor::type</definition>
        <argsstring>() const</argsstring>
        <name>type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" line="80" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" bodystart="80" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a6b4417f517712ee6c791ff0e67518292" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="structat_1_1_storage" kindref="compound">Storage</ref> &gt;</type>
        <definition>std::unique_ptr&lt;Storage&gt; at::Tensor::storage</definition>
        <argsstring>() const</argsstring>
        <name>storage</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" line="83" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" bodystart="83" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ad9ac7797b0064558da1b2d918452d695" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::toType</definition>
        <argsstring>(const Type &amp;t, bool non_blocking=false) const</argsstring>
        <name>toType</name>
        <param>
          <type>const <ref refid="structat_1_1_type" kindref="compound">Type</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>non_blocking</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" line="86" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a27cf64d6b2ce2da0c4ab6397cd02fb9f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::copy_</definition>
        <argsstring>(const Tensor &amp;src, bool non_blocking=false)</argsstring>
        <name>copy_</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>non_blocking</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" line="87" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1aa43d66c764bedf5978c4c5a0b2b477a9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::toType</definition>
        <argsstring>(ScalarType t) const</argsstring>
        <name>toType</name>
        <param>
          <type>ScalarType</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" line="88" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a3d27045aef471bf10389aab232fd5012" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::toBackend</definition>
        <argsstring>(Backend b) const</argsstring>
        <name>toBackend</name>
        <param>
          <type>Backend</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" line="89" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1af02d1520be96cf71c531b1eb4b20aa9e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::to</definition>
        <argsstring>(Device device, ScalarType dtype, bool non_blocking=false) const</argsstring>
        <name>to</name>
        <param>
          <type><ref refid="structat_1_1_device" kindref="compound">Device</ref></type>
          <declname>device</declname>
        </param>
        <param>
          <type>ScalarType</type>
          <declname>dtype</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>non_blocking</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>New-style <computeroutput><ref refid="structat_1_1_tensor_1af02d1520be96cf71c531b1eb4b20aa9e" kindref="member">to()</ref></computeroutput> methods. NB: These methods are defined in <ref refid="_tensor_options_8h_source" kindref="compound">TensorOptions.h</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" line="93" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a8b73c49def01e67f7c46e52041ff55fa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::to</definition>
        <argsstring>(ScalarType dtype, bool non_blocking=false) const</argsstring>
        <name>to</name>
        <param>
          <type>ScalarType</type>
          <declname>dtype</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>non_blocking</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" line="94" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a40856e6e6c0406d068f1041e47b54401" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::to</definition>
        <argsstring>(Device device, bool non_blocking=false) const</argsstring>
        <name>to</name>
        <param>
          <type><ref refid="structat_1_1_device" kindref="compound">Device</ref></type>
          <declname>device</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>non_blocking</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" line="95" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ae5fe03a55a50933e6f2e51c4930ea4cc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool at::Tensor::is_variable</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_variable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if the <computeroutput><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></computeroutput> is actually a <computeroutput>torch::autograd::Variable</computeroutput>. Defined in <ref refid="_type_8h_source" kindref="compound">Type.h</ref> because of include order issues. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" line="99" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ae354b0becb671916dceec56663fedda1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Layout</type>
        <definition>Layout at::Tensor::layout</definition>
        <argsstring>() const noexcept</argsstring>
        <name>layout</name>
        <briefdescription>
<para>Returns a <computeroutput><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></computeroutput>&apos;s layout. Defined in <ref refid="_type_8h_source" kindref="compound">Type.h</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" line="102" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1acb9e0d281b1fa351141cbc61730db10a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>ScalarType</type>
        <definition>ScalarType at::Tensor::dtype</definition>
        <argsstring>() const noexcept</argsstring>
        <name>dtype</name>
        <briefdescription>
<para>Returns a <computeroutput><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></computeroutput>&apos;s dtype (<computeroutput>ScalarType</computeroutput>). Defined in <ref refid="_type_8h_source" kindref="compound">Type.h</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" line="105" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ad111f2086ee52a8b4c489033085af9a6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_device" kindref="compound">Device</ref></type>
        <definition>Device at::Tensor::device</definition>
        <argsstring>() const</argsstring>
        <name>device</name>
        <briefdescription>
<para>Returns a <computeroutput><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></computeroutput>&apos;s device. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" line="108" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a7d7c4c2a7b516b004f78940584c4491e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor_options" kindref="compound">TensorOptions</ref></type>
        <definition>TensorOptions at::Tensor::options</definition>
        <argsstring>() const</argsstring>
        <name>options</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the <computeroutput><ref refid="structat_1_1_tensor_options" kindref="compound">TensorOptions</ref></computeroutput> corresponding to this <computeroutput><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></computeroutput>. Defined in <ref refid="_tensor_options_8h_source" kindref="compound">TensorOptions.h</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" line="112" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1afaa563865a1e92d308d1811a830ec2d6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T *</type>
        <definition>T* at::Tensor::data</definition>
        <argsstring>() const</argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" line="115" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1acc59ad301571518b7e551b2349c365fb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void *</type>
        <definition>void* at::Tensor::unsafeGetTH</definition>
        <argsstring>(bool retain) const</argsstring>
        <name>unsafeGetTH</name>
        <param>
          <type>bool</type>
          <declname>retain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" line="117" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" bodystart="117" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a0813dead9f99a37c8f7808e4273893b3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor_impl" kindref="compound">TensorImpl</ref> *</type>
        <definition>TensorImpl* at::Tensor::unsafeGetTensorImpl</definition>
        <argsstring>() const</argsstring>
        <name>unsafeGetTensorImpl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" line="122" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" bodystart="122" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a9b6e24ffef0f70fd10b54854f0d18c50" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void at::Tensor::print</definition>
        <argsstring>() const</argsstring>
        <name>print</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" line="127" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a2235b823846523f6296d472a6ae20637" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>at::Tensor::AT_FORALL_SCALAR_TYPES</definition>
        <argsstring>(TO_TYPE_DATA) AT_FORALL_SCALAR_TYPES(TO_C_TYPE) template&lt; typename T</argsstring>
        <name>AT_FORALL_SCALAR_TYPES</name>
        <param>
          <type>TO_TYPE_DATA</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" line="132" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a9c17adbcd77d245b00cd96228892e35c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t N <ref refid="classat_1_1_tensor_accessor" kindref="compound">TensorAccessor</ref>&lt; T, N &gt;</type>
        <definition>size_t N TensorAccessor&lt;T,N&gt; at::Tensor::accessor</definition>
        <argsstring>() const</argsstring>
        <name>accessor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" line="141" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" bodystart="141" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ac5a10f0ec1c908de5cb9fa3100d96729" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::operator-</definition>
        <argsstring>() const</argsstring>
        <name>operator-</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" line="147" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1ac44ff7086a3dd29aafa4b4a942b270dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::operator+=</definition>
        <argsstring>(const Tensor &amp;other)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" line="148" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a7fe0a8eaf913a1d143aa5432e4610762" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::operator+=</definition>
        <argsstring>(Scalar other)</argsstring>
        <name>operator+=</name>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" line="149" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a83522cee02749ebf23f06c82ecf0f7ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::operator-=</definition>
        <argsstring>(const Tensor &amp;other)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" line="150" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a58d425cc025e49d55484e1428e434f65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::operator-=</definition>
        <argsstring>(Scalar other)</argsstring>
        <name>operator-=</name>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" line="151" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a17d1c377c004a4532eec8cd7601a6fa6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::operator*=</definition>
        <argsstring>(const Tensor &amp;other)</argsstring>
        <name>operator*=</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" line="152" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a7e76196d0f0a85afad58b25fa1bb7e90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::operator*=</definition>
        <argsstring>(Scalar other)</argsstring>
        <name>operator*=</name>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" line="153" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a845f6906f262c04d0f33842cceb5cdcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::operator/=</definition>
        <argsstring>(const Tensor &amp;other)</argsstring>
        <name>operator/=</name>
        <param>
          <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" line="154" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a7aa0b4218bac3232da2c964cd87d4bb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::operator/=</definition>
        <argsstring>(Scalar other)</argsstring>
        <name>operator/=</name>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" line="155" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a6e567f2b7f429044b54d5940f1b09506" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::operator[]</definition>
        <argsstring>(Scalar index) const</argsstring>
        <name>operator[]</name>
        <param>
          <type><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" line="156" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1aeb24fe655e368ccb888d9f12b0823626" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::operator[]</definition>
        <argsstring>(Tensor index) const</argsstring>
        <name>operator[]</name>
        <param>
          <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" line="157" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a32bcd42290b70dce6533e5aa214ff01c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::operator[]</definition>
        <argsstring>(int64_t index) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>int64_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" line="158" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1aaf29c01d712884e0cc2d25c3b2ef2e2c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::set_requires_grad</definition>
        <argsstring>(bool requires_grad)</argsstring>
        <name>set_requires_grad</name>
        <param>
          <type>bool</type>
          <declname>requires_grad</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" line="162" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" bodystart="162" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a36a7381b20f6ec46dcb98b724f2422bd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool at::Tensor::requires_grad</definition>
        <argsstring>() const</argsstring>
        <name>requires_grad</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" line="166" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" bodystart="166" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a027d9ee6f5a537b603bf335e8f20d9ec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>Tensor&amp; at::Tensor::grad</definition>
        <argsstring>()</argsstring>
        <name>grad</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" line="170" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" bodystart="170" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a9a211415475a1d7c00732fa163055d2d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
        <definition>const Tensor&amp; at::Tensor::grad</definition>
        <argsstring>() const</argsstring>
        <name>grad</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" line="173" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" bodystart="173" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1af9772c55d9743b56ac9742ebe76ca4b8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref></type>
        <definition>Tensor at::Tensor::detach</definition>
        <argsstring>() const</argsstring>
        <name>detach</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" line="177" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" bodystart="177" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a04c556c86cd9fb2f8bfcde768a7e231e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void at::Tensor::detach_</definition>
        <argsstring>()</argsstring>
        <name>detach_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" line="180" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" bodystart="180" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="structat_1_1_tensor_1a2e70953ca9af09ced061b89433719d06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void at::Tensor::backward</definition>
        <argsstring>(at::optional&lt; Tensor &gt; gradient=at::nullopt, bool keep_graph=false, bool create_graph=false)</argsstring>
        <name>backward</name>
        <param>
          <type><ref refid="classat_1_1optional" kindref="compound">at::optional</ref>&lt; <ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref> &gt;</type>
          <declname>gradient</declname>
          <defval>at::nullopt</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>keep_graph</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>create_graph</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Computes the gradient of current tensor w.r.t. graph leaves. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" line="185" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="671">
        <label>detail::TensorBase</label>
        <link refid="structat_1_1detail_1_1_tensor_base_impl"/>
      </node>
      <node id="670">
        <label>at::Tensor</label>
        <link refid="structat_1_1_tensor"/>
        <childnode refid="671" relation="public-inheritance">
        </childnode>
        <childnode refid="671" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="673">
        <label>detail::TensorBase</label>
        <link refid="structat_1_1detail_1_1_tensor_base_impl"/>
        <childnode refid="674" relation="usage">
          <edgelabel>pImpl</edgelabel>
        </childnode>
      </node>
      <node id="676">
        <label>at::Type</label>
        <link refid="structat_1_1_type"/>
      </node>
      <node id="674">
        <label>at::TensorImpl</label>
        <link refid="structat_1_1_tensor_impl"/>
        <childnode refid="675" relation="public-inheritance">
        </childnode>
        <childnode refid="676" relation="usage">
          <edgelabel>type_</edgelabel>
        </childnode>
      </node>
      <node id="675">
        <label>at::Retainable</label>
        <link refid="structat_1_1_retainable"/>
      </node>
      <node id="672">
        <label>at::Tensor</label>
        <link refid="structat_1_1_tensor"/>
        <childnode refid="673" relation="public-inheritance">
        </childnode>
        <childnode refid="673" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" line="45" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h" bodystart="45" bodyend="665"/>
    <listofallmembers>
      <member refid="structat_1_1_tensor_1ab86c3af5d24f410a02a902f00e066d10" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>__and__</name></member>
      <member refid="structat_1_1_tensor_1a5f51085ac675f784b5244fa1e575efbd" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>__and__</name></member>
      <member refid="structat_1_1_tensor_1a439bd8d5d235df21e8a59a3e2ac33d69" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>__iand__</name></member>
      <member refid="structat_1_1_tensor_1a1dcac7e0fbc821d97d46b9104524483a" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>__iand__</name></member>
      <member refid="structat_1_1_tensor_1a402139bbba69be49a5756140a38fcbe3" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>__ilshift__</name></member>
      <member refid="structat_1_1_tensor_1a71968fce087b274484dc31ea0bc6f7e4" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>__ilshift__</name></member>
      <member refid="structat_1_1_tensor_1a2dc922ab7684b273d21d3979fe433678" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>__ior__</name></member>
      <member refid="structat_1_1_tensor_1ae0b9a520f7c0155f11bb3c7d0d578fa8" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>__ior__</name></member>
      <member refid="structat_1_1_tensor_1a56ba2f362a9c98872b91f71cc824be01" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>__irshift__</name></member>
      <member refid="structat_1_1_tensor_1af54104285f3311dec1fae136f56769b9" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>__irshift__</name></member>
      <member refid="structat_1_1_tensor_1af9fb0c3292aaded3b5a620d1a7d705c4" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>__ixor__</name></member>
      <member refid="structat_1_1_tensor_1a519ce5765dbf4b0f71145c761c63630a" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>__ixor__</name></member>
      <member refid="structat_1_1_tensor_1a56a429e5f141e7130436d161d7c7c425" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>__lshift__</name></member>
      <member refid="structat_1_1_tensor_1a79dc6f2d769aabf8dc6f12f776cb71ec" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>__lshift__</name></member>
      <member refid="structat_1_1_tensor_1a4ea101d103f8147f8915531125daf633" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>__or__</name></member>
      <member refid="structat_1_1_tensor_1a8ed63ffc15bbc03fa528582f58c1a37a" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>__or__</name></member>
      <member refid="structat_1_1_tensor_1aa638047ae4b1ad82d8ba5bd701577031" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>__rshift__</name></member>
      <member refid="structat_1_1_tensor_1a861b7bfa0aa9536ed442b1ce4cc3141d" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>__rshift__</name></member>
      <member refid="structat_1_1_tensor_1aca24d76584ebd88b25748c8c008d28ab" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>__xor__</name></member>
      <member refid="structat_1_1_tensor_1ad94c5385f3a960baf27f48cd37df2543" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>__xor__</name></member>
      <member refid="structat_1_1_tensor_1a86cc6f4841c756e41e7b7fa1e4b9ce93" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_abs</name></member>
      <member refid="structat_1_1_tensor_1ab5911df97918d022dae98892c03a447e" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_acos</name></member>
      <member refid="structat_1_1_tensor_1ad754e584821fa8512eb3d45de793e397" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_addmv</name></member>
      <member refid="structat_1_1_tensor_1a4b9e6dc20383b3aaf01860bd2514ede4" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_addmv_</name></member>
      <member refid="structat_1_1_tensor_1acd8e6f742f4ef3097ecd8faf4ea964c5" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_addr</name></member>
      <member refid="structat_1_1_tensor_1a6ce98529a56090e68e3254088b3bc015" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_addr_</name></member>
      <member refid="structat_1_1_tensor_1a1514a6d623be08ec9aa364c8c9db45bd" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_argmax</name></member>
      <member refid="structat_1_1_tensor_1a6e29ed688b6b3622cab1fd720b5ac4e9" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_argmin</name></member>
      <member refid="structat_1_1_tensor_1a28522a568c70627d01b0341504123db1" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_asin</name></member>
      <member refid="structat_1_1_tensor_1ac789eb9cbc293617ae05f6f614a01d6d" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_atan</name></member>
      <member refid="structat_1_1_tensor_1a40a07264c135a90b98758501b5e2ac94" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_bernoulli_</name></member>
      <member refid="structat_1_1_tensor_1aa955b19ce4fe462f17d0d707c7aeabac" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_cast_Byte</name></member>
      <member refid="structat_1_1_tensor_1a6773a2652b4c05e8bb3633cb8930698c" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_cast_Char</name></member>
      <member refid="structat_1_1_tensor_1ae2ab1ca39063bb1593dd19318aa079c9" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_cast_Double</name></member>
      <member refid="structat_1_1_tensor_1aa7e1bb814e0641a595b10699689f5a5c" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_cast_Float</name></member>
      <member refid="structat_1_1_tensor_1a57a05dfac9590013903e6399ba8259e1" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_cast_Half</name></member>
      <member refid="structat_1_1_tensor_1a7406462a5faeb0e7306f2f2b757ed7df" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_cast_Int</name></member>
      <member refid="structat_1_1_tensor_1abcd1e754110de746f73cfe9cfeee08ba" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_cast_Long</name></member>
      <member refid="structat_1_1_tensor_1a41761f0f47457cc64efdc0793c3d4cc3" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_cast_Short</name></member>
      <member refid="structat_1_1_tensor_1ab1b8ff283d0664b93da5f02253820615" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_ceil</name></member>
      <member refid="structat_1_1_tensor_1afa53f6f4094fdeff1fb0d98117f252b8" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_copy_ignoring_overlaps_</name></member>
      <member refid="structat_1_1_tensor_1a5f5666c9a3e873bca25d4f0f2916c9c2" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_cos</name></member>
      <member refid="structat_1_1_tensor_1a56ea795ede4430d1ffa8b9d9ddfe38b3" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_cosh</name></member>
      <member refid="structat_1_1_tensor_1a404e052676517d03c32aaa434f80ae79" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_cumprod</name></member>
      <member refid="structat_1_1_tensor_1a8bc8d22325056ccb0f9ff0217afee364" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_cumsum</name></member>
      <member refid="structat_1_1_tensor_1aa6d34e735095da3ea519beabf60165c7" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_denseDims</name></member>
      <member refid="structat_1_1_tensor_1a43491464f0f1fe11600e819ab430599e" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_dimI</name></member>
      <member refid="structat_1_1_tensor_1ae24b17c18930ce9b76eddf367b46b17a" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_dimV</name></member>
      <member refid="structat_1_1_tensor_1a3e28c5a7cbda392182861ee6c522cc62" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_dot</name></member>
      <member refid="structat_1_1_tensor_1a2e1fc58075ebc4a84a6e52e46602d3e9" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_erf</name></member>
      <member refid="structat_1_1_tensor_1a2b3d8d46ed29346fd9367872982aff52" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_erfc</name></member>
      <member refid="structat_1_1_tensor_1ae52217f569b5bb13ff3690a69c510aaa" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_exp</name></member>
      <member refid="structat_1_1_tensor_1a53e6076fc6ae256ca27b7f3cbb2dc4e0" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_expm1</name></member>
      <member refid="structat_1_1_tensor_1a7abddd1692647be3df051b9df0f5c65f" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_fft_with_size</name></member>
      <member refid="structat_1_1_tensor_1afd3716b7ba174bae62e5a8555eec63c2" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_fill_</name></member>
      <member refid="structat_1_1_tensor_1a622dc488ed95918264756b1516ae17cf" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_fill_</name></member>
      <member refid="structat_1_1_tensor_1af47f6f8039d7303daf76bdd0ac92325c" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_floor</name></member>
      <member refid="structat_1_1_tensor_1a585f5e33989e2271ef53b5f63d703b84" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_ger</name></member>
      <member refid="structat_1_1_tensor_1af5a9180b692f2fa9d59418d54e9fd826" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_gesv_helper</name></member>
      <member refid="structat_1_1_tensor_1ac756d9faba2aa00cd029c5ebe9d56c9e" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_gesv_single</name></member>
      <member refid="structat_1_1_tensor_1ae37673831f54f1df97b2c19495c83bd2" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_getri</name></member>
      <member refid="structat_1_1_tensor_1a81d8831d1a20f1ecdb3deb15de1038fd" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_indexCopy_</name></member>
      <member refid="structat_1_1_tensor_1a8e244263c9de86b33a5d6760555d60bb" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_indices</name></member>
      <member refid="structat_1_1_tensor_1aa62a6f4c2487b55c901272e3e94c2a67" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_log</name></member>
      <member refid="structat_1_1_tensor_1af85c75f82eafa5021f5b899f79eff952" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_log10</name></member>
      <member refid="structat_1_1_tensor_1ad7f1f0edd134416ae95b6279a71d773c" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_log1p</name></member>
      <member refid="structat_1_1_tensor_1ab66d4cc2726dbd17b29a73eaf2be79fa" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_log2</name></member>
      <member refid="structat_1_1_tensor_1a62de8ce50db5d1e2b0cc3334a7da70b9" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_mm</name></member>
      <member refid="structat_1_1_tensor_1abfa187d2d0fd8a22e536ae433fa3990b" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_mv</name></member>
      <member refid="structat_1_1_tensor_1a163d30f7eec1a62cc9d089f953fcacd6" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_nnz</name></member>
      <member refid="structat_1_1_tensor_1a0a246c1a55c48cdbc1cc9311d5b4ba2b" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_prod</name></member>
      <member refid="structat_1_1_tensor_1af84c4cac809ca2951ce36da843722869" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_prod</name></member>
      <member refid="structat_1_1_tensor_1a326b2a198ae59343be1c809d7982d261" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_prodall</name></member>
      <member refid="structat_1_1_tensor_1a3fc432b2d3f54659852909343acda6ee" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_round</name></member>
      <member refid="structat_1_1_tensor_1a8c5bc9b418822fb0961577f94441c789" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_rsqrt</name></member>
      <member refid="structat_1_1_tensor_1a538edf4efba69ea4d8042cf56a1002d0" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_s_where</name></member>
      <member refid="structat_1_1_tensor_1afd0dcce72711b77d2a61b43f4f6aa1a6" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_sin</name></member>
      <member refid="structat_1_1_tensor_1a28231fdf427643e35acd3cbdf381e324" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_sinh</name></member>
      <member refid="structat_1_1_tensor_1a95cd023802f7c5831aaf63f032a775bb" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_sparse_mask</name></member>
      <member refid="structat_1_1_tensor_1a155f90f7e595e576867d08aed28fd019" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_sparseDims</name></member>
      <member refid="structat_1_1_tensor_1ab7a213a60eb8953e083ba533e3ef0e07" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_sqrt</name></member>
      <member refid="structat_1_1_tensor_1a1c431e71e5ebac07f4a5b9ea259632c3" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_standard_gamma</name></member>
      <member refid="structat_1_1_tensor_1a78c0b5a9c47f3ccd23b3f6b85021c71f" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_standard_gamma_grad</name></member>
      <member refid="structat_1_1_tensor_1a1276105790369506e9a99b3b28d3ebd7" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_sum</name></member>
      <member refid="structat_1_1_tensor_1a1a1204a01ce24c5576944ce2c210cbc9" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_sum</name></member>
      <member refid="structat_1_1_tensor_1ae527a915b190ca3a1893a0155bb19437" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_sumall</name></member>
      <member refid="structat_1_1_tensor_1aca43df52e67ec5e10d761db732f55645" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_tan</name></member>
      <member refid="structat_1_1_tensor_1aec11843a15839040bfdec07deb33d02f" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_th_all</name></member>
      <member refid="structat_1_1_tensor_1a1604c689d1d83fbe18ba9754af270590" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_th_any</name></member>
      <member refid="structat_1_1_tensor_1ab3c32b9d7dd5aa9aff28ff6d0fcaf0e3" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_th_bernoulli</name></member>
      <member refid="structat_1_1_tensor_1ac3c3c1f281c52b110c73029f76da3f48" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_th_clamp_</name></member>
      <member refid="structat_1_1_tensor_1a0d6486637b5fd09ef2eef6457e84e092" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_th_clamp_max_</name></member>
      <member refid="structat_1_1_tensor_1a0fc95b6a69103313f8e5304d3bfc006c" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_th_clamp_min_</name></member>
      <member refid="structat_1_1_tensor_1a58c965b423727a9b2278ab2d50582820" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_th_kthvalue</name></member>
      <member refid="structat_1_1_tensor_1a3b2fd6b46d9c497c4562c4f13f7502f8" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_th_max</name></member>
      <member refid="structat_1_1_tensor_1a0345187c05e76019e5720ab6627df62a" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_th_median</name></member>
      <member refid="structat_1_1_tensor_1ac8899ca1c0405a4e983429c317b27e34" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_th_min</name></member>
      <member refid="structat_1_1_tensor_1a3b26d3ad2591d6f77c6a1d054d32ecf1" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_th_mode</name></member>
      <member refid="structat_1_1_tensor_1a919c68ad9474a9243f6cfb17e0a50f4d" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_th_norm</name></member>
      <member refid="structat_1_1_tensor_1a1e29415ffe55b6f9fa5f5f6c1fbfc9c9" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_th_prod</name></member>
      <member refid="structat_1_1_tensor_1a1bd8f7955742cb994c7e62cf629de2c3" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_th_sigmoid</name></member>
      <member refid="structat_1_1_tensor_1a8641c9c2b7e35508f0109bf0c9e8dd8c" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_th_std</name></member>
      <member refid="structat_1_1_tensor_1a96e63552fd2fa4a5c2158f43936289c5" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_th_std</name></member>
      <member refid="structat_1_1_tensor_1ac0e13ffff294bfbae66d11f3f0729535" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_th_sum</name></member>
      <member refid="structat_1_1_tensor_1afa47a9e17dbcb83d6ad4a08f243617ef" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_th_tanh</name></member>
      <member refid="structat_1_1_tensor_1a5cd3f0e987cdc7fc1c89bca583a3301a" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_th_var</name></member>
      <member refid="structat_1_1_tensor_1abe59b9fd3a6694e7cd7087162877b524" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_th_var</name></member>
      <member refid="structat_1_1_tensor_1a0bf41db77e2eeba0c667181f571f0b30" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_trunc</name></member>
      <member refid="structat_1_1_tensor_1a6d164485f71226bfbcb8867ba03b4cc3" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_unique</name></member>
      <member refid="structat_1_1_tensor_1a67cecae0a69cad0e6b26e8f92713a9f3" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>_values</name></member>
      <member refid="structat_1_1_tensor_1adf058f5f731dda2141190a3aa56f2311" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>abs</name></member>
      <member refid="structat_1_1_tensor_1a6aea7ab8d3b8aeaee52bf16f6bf1f7fe" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>abs_</name></member>
      <member refid="structat_1_1_tensor_1a9c17adbcd77d245b00cd96228892e35c" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>accessor</name></member>
      <member refid="structat_1_1_tensor_1a9c17adbcd77d245b00cd96228892e35c" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>accessor</name></member>
      <member refid="structat_1_1_tensor_1a39213a9fdbab2395b7863d41eb4c5606" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>acos</name></member>
      <member refid="structat_1_1_tensor_1a7f36b9e23c4de7f05e52fcfa17be3d31" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>acos_</name></member>
      <member refid="structat_1_1_tensor_1a009427a67e51413e84c9108cea31231b" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>add</name></member>
      <member refid="structat_1_1_tensor_1a58bc273a285b429bafe884970dcdfd64" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>add</name></member>
      <member refid="structat_1_1_tensor_1a98c28c7f437a70438aae0e6eb7aa3920" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>add_</name></member>
      <member refid="structat_1_1_tensor_1a10a68653f03e78f64feb5e22d825a23f" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>add_</name></member>
      <member refid="structat_1_1_tensor_1a28107b05798c66e3362bed74ca1cbae7" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>addbmm</name></member>
      <member refid="structat_1_1_tensor_1ad91da53ec70f4cbc8edf40fd225388d9" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>addbmm_</name></member>
      <member refid="structat_1_1_tensor_1a19e1bfc27ae878c87704bec413343aa4" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>addcdiv</name></member>
      <member refid="structat_1_1_tensor_1a0d89981092c1308c4753657be4d3c872" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>addcdiv_</name></member>
      <member refid="structat_1_1_tensor_1a48dd476ce9b6f10e7d13d740881ed0bb" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>addcmul</name></member>
      <member refid="structat_1_1_tensor_1a6a9030c7e2a3447940307c23d74dba16" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>addcmul_</name></member>
      <member refid="structat_1_1_tensor_1a576ec925a7fdf576837d183a346e1270" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>addmm</name></member>
      <member refid="structat_1_1_tensor_1ac16a050de396708d88488248172d9998" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>addmm_</name></member>
      <member refid="structat_1_1_tensor_1a3b7099fe3008a39d7baff49cb4ead66d" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>addmv</name></member>
      <member refid="structat_1_1_tensor_1a0069a9cf8e84421d3420fc80bb8d848c" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>addmv_</name></member>
      <member refid="structat_1_1_tensor_1ab95497741a3f68b819590008c5254a06" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>addr</name></member>
      <member refid="structat_1_1_tensor_1aeecb56d7c7d4663f4e412d1c305a5b9c" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>addr_</name></member>
      <member refid="structat_1_1_tensor_1a402b6d6f9569c6035438497775d09a3b" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>all</name></member>
      <member refid="structat_1_1_tensor_1a9ae5bc41e9963e02eb938965643a0a3c" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>all</name></member>
      <member refid="structat_1_1_tensor_1afaccae3fe6199b2a4fc0d485e1153e11" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>allclose</name></member>
      <member refid="structat_1_1_tensor_1a1db7913bfb086a8c166f8882e259d3f0" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>any</name></member>
      <member refid="structat_1_1_tensor_1a948f45a1c53fea91ace2d78faaa4c5a7" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>any</name></member>
      <member refid="structat_1_1_tensor_1ac5aa960b52a2203a7bb7aa1e05337c25" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>argmax</name></member>
      <member refid="structat_1_1_tensor_1a39aa3ce29c8b82245bc0281a6dc2bd92" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>argmax</name></member>
      <member refid="structat_1_1_tensor_1a0b6c198981624777b9f1fb85dedb64dc" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>argmin</name></member>
      <member refid="structat_1_1_tensor_1ad53dcccdb0d7b49acf0f53c0c3668725" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>argmin</name></member>
      <member refid="structat_1_1_tensor_1a1f673aea1861a02ca34c202fce2ecf1f" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>as_strided</name></member>
      <member refid="structat_1_1_tensor_1aca30ea7676e25697cb523d4955b209ac" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>as_strided</name></member>
      <member refid="structat_1_1_tensor_1aaadb889484d30d7b819e4ad4d57915c2" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>as_strided_</name></member>
      <member refid="structat_1_1_tensor_1a26dbebbc603ff9c97711d8ca6c133b23" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>as_strided_</name></member>
      <member refid="structat_1_1_tensor_1a8a0eb9818a9b6adeef93fa4b02b2f820" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>asin</name></member>
      <member refid="structat_1_1_tensor_1a2b092fcca4143654f48283fd08b3ab84" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>asin_</name></member>
      <member refid="structat_1_1_tensor_1a2235b823846523f6296d472a6ae20637" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>AT_FORALL_SCALAR_TYPES</name></member>
      <member refid="structat_1_1_tensor_1a2235b823846523f6296d472a6ae20637" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>AT_FORALL_SCALAR_TYPES</name></member>
      <member refid="structat_1_1_tensor_1acd1082d1dbfde6379724476620d5fe08" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>atan</name></member>
      <member refid="structat_1_1_tensor_1a66b1ee7bdc3e3bf54efee14d5db3f58b" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>atan2</name></member>
      <member refid="structat_1_1_tensor_1ace1898fa811ded714e21d74fe30a8901" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>atan2_</name></member>
      <member refid="structat_1_1_tensor_1af3aab5950b84c91ea52d62ca672edb4b" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>atan_</name></member>
      <member refid="structat_1_1_tensor_1a2e70953ca9af09ced061b89433719d06" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>backward</name></member>
      <member refid="structat_1_1_tensor_1a2e70953ca9af09ced061b89433719d06" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>backward</name></member>
      <member refid="structat_1_1_tensor_1aaff43581d08b7023d5f6fbf3d7fbb5d9" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>baddbmm</name></member>
      <member refid="structat_1_1_tensor_1a71d6f654fd96d73faca52e097cc2e516" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>baddbmm_</name></member>
      <member refid="structat_1_1_tensor_1a382114d0d61986127e1ceef31c373fc2" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>bernoulli</name></member>
      <member refid="structat_1_1_tensor_1a4ba906f71924befb21bbedca645bb7ca" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>bernoulli</name></member>
      <member refid="structat_1_1_tensor_1a4c4c021019e21e88ddfe8a9c7fb57733" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>bernoulli</name></member>
      <member refid="structat_1_1_tensor_1abd793a18f626d4f1a5238f7659227a78" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>bernoulli_</name></member>
      <member refid="structat_1_1_tensor_1ace561e5d0f2d861c6efb5051d155cbb2" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>bernoulli_</name></member>
      <member refid="structat_1_1_tensor_1ac973061a1e754372acb0b84125b8daf3" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>bernoulli_</name></member>
      <member refid="structat_1_1_tensor_1ad18206c3615d9f5011a0706331d70fe9" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>bincount</name></member>
      <member refid="structat_1_1_tensor_1af671d7c16d9b9e23c8dc1c3fd0004691" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>bmm</name></member>
      <member refid="structat_1_1_tensor_1a68bacf92aa1412166d193a55645dfb74" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>btrifact</name></member>
      <member refid="structat_1_1_tensor_1a7fe219b6e20dc1fe276b4c1a1196ef49" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>btrifact_with_info</name></member>
      <member refid="structat_1_1_tensor_1a4a1128d06de2a4645d8a3e3ff6c4ec3d" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>btrisolve</name></member>
      <member refid="structat_1_1_tensor_1a4756df1c8f5f67e584f963c0aedfe292" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>cauchy_</name></member>
      <member refid="structat_1_1_tensor_1abe83866de1755c70f7e6e31e92d59012" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>ceil</name></member>
      <member refid="structat_1_1_tensor_1a993b85896ece58be0fbf34de8eacc99a" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>ceil_</name></member>
      <member refid="structat_1_1_tensor_1a79dc1190ce626531e1ecb607de89a3c6" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>chunk</name></member>
      <member refid="structat_1_1_tensor_1a4d18beea29addba57725836b6bf86b20" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>clamp</name></member>
      <member refid="structat_1_1_tensor_1a7f6525487d988b82461fb1a2e306f343" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>clamp_</name></member>
      <member refid="structat_1_1_tensor_1af65df97bc623080f9f6aa3b3c65bb2e9" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>clamp_max</name></member>
      <member refid="structat_1_1_tensor_1a7ef5ddeb8db931fdf00db1fd66b67c14" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>clamp_max_</name></member>
      <member refid="structat_1_1_tensor_1a2dc463652527e4855c19cd434f13f1e8" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>clamp_min</name></member>
      <member refid="structat_1_1_tensor_1aa9caf7c731951c99d89e8b563a1c6108" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>clamp_min_</name></member>
      <member refid="structat_1_1_tensor_1ad05f1fcc2fcf0c7c9ee1eb138f44372c" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>clone</name></member>
      <member refid="structat_1_1_tensor_1a32b4c948e5757da8f30728af856cf91c" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>coalesce</name></member>
      <member refid="structat_1_1_tensor_1a828d6a0bff4abd343ab295aff41dd5ca" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>contiguous</name></member>
      <member refid="structat_1_1_tensor_1a9466b48f677212ce3affff8bac71b2bc" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>conv_tbc</name></member>
      <member refid="structat_1_1_tensor_1aa2aa59b26e54281e8c2f36a0329365fc" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>conv_tbc_backward</name></member>
      <member refid="structat_1_1_tensor_1a186067c3d65b2f5d0856cec29ce522c5" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>copy_</name></member>
      <member refid="structat_1_1_tensor_1a27cf64d6b2ce2da0c4ab6397cd02fb9f" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>copy_</name></member>
      <member refid="structat_1_1_tensor_1aaedcc491cd58b4896df8df4f84be2757" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>cos</name></member>
      <member refid="structat_1_1_tensor_1af199264463285749de2a6d2ec17dca9d" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>cos_</name></member>
      <member refid="structat_1_1_tensor_1a12be1df83b8b26e1af37a44e8ed715ed" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>cosh</name></member>
      <member refid="structat_1_1_tensor_1a96133c876c2c91054127082471e6f9a0" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>cosh_</name></member>
      <member refid="structat_1_1_tensor_1a08796f8de12e3910e62b5d559f46f5d8" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>cross</name></member>
      <member refid="structat_1_1_tensor_1a06358379c205f22e6c111a456cb766ff" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>cumprod</name></member>
      <member refid="structat_1_1_tensor_1a032b04d3a486141c766c154d53d8c8ea" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>cumprod</name></member>
      <member refid="structat_1_1_tensor_1ada34ab3dc355dfc248b3a21e36efbc05" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>cumsum</name></member>
      <member refid="structat_1_1_tensor_1aa813266866e85cdac403effcdb088eb4" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>cumsum</name></member>
      <member refid="structat_1_1_tensor_1afaa563865a1e92d308d1811a830ec2d6" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>data</name></member>
      <member refid="structat_1_1_tensor_1afaa563865a1e92d308d1811a830ec2d6" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>data</name></member>
      <member refid="structat_1_1_tensor_1aa6099651b7c5c2885ecbdd71ff401fa4" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>data_ptr</name></member>
      <member refid="structat_1_1detail_1_1_tensor_base_impl_1aa84fc2e46da60e511e23eb3fa40989f7" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>defined</name></member>
      <member refid="structat_1_1_tensor_1a344d2cae823c12203e3bf6d0b73fc1cb" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>det</name></member>
      <member refid="structat_1_1_tensor_1af9772c55d9743b56ac9742ebe76ca4b8" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>detach</name></member>
      <member refid="structat_1_1_tensor_1af9772c55d9743b56ac9742ebe76ca4b8" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>detach</name></member>
      <member refid="structat_1_1detail_1_1_tensor_base_impl_1a38c63c4d8f35ed5dd2634f26c083e8bc" prot="public" virt="non-virtual" ambiguityscope="at::detail::TensorBaseImpl::"><scope>at::Tensor</scope><name>detach</name></member>
      <member refid="structat_1_1_tensor_1a04c556c86cd9fb2f8bfcde768a7e231e" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>detach_</name></member>
      <member refid="structat_1_1_tensor_1a04c556c86cd9fb2f8bfcde768a7e231e" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>detach_</name></member>
      <member refid="structat_1_1_tensor_1a479cdc1cee4cb7944658433290a34ec5" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>detail::set_data</name></member>
      <member refid="structat_1_1_tensor_1a479cdc1cee4cb7944658433290a34ec5" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>detail::set_data</name></member>
      <member refid="structat_1_1_tensor_1ad111f2086ee52a8b4c489033085af9a6" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>device</name></member>
      <member refid="structat_1_1_tensor_1ad111f2086ee52a8b4c489033085af9a6" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>device</name></member>
      <member refid="structat_1_1_tensor_1a4b7df296c1df34b05b67b575d245cce3" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>diag</name></member>
      <member refid="structat_1_1_tensor_1a9f61abc02682dcfd00f844358b3acdf9" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>diagonal</name></member>
      <member refid="structat_1_1_tensor_1a4e3d9435349255a682ecfafbc7e3ee25" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>digamma</name></member>
      <member refid="structat_1_1_tensor_1a569e828fec9edb1557da882f7b4c3b95" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>digamma_</name></member>
      <member refid="structat_1_1detail_1_1_tensor_base_impl_1a035d60099a2293e070b6a150c201cf0b" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>dim</name></member>
      <member refid="structat_1_1_tensor_1aacb55e7c19e4e12df673f6d5c6f54675" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>dist</name></member>
      <member refid="structat_1_1_tensor_1a32412dc04621508c0272650838f52676" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>div</name></member>
      <member refid="structat_1_1_tensor_1a197a4b05678c67cda2956eb7f88334b8" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>div</name></member>
      <member refid="structat_1_1_tensor_1a0dff1db7ad2b332bedaf174ad11e2ebc" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>div_</name></member>
      <member refid="structat_1_1_tensor_1a748e76e8c74c970ca0a42e380f1ed400" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>div_</name></member>
      <member refid="structat_1_1_tensor_1a1a15ee6a9bb8978243843dc1d3fbe381" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>dot</name></member>
      <member refid="structat_1_1_tensor_1acb9e0d281b1fa351141cbc61730db10a" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>dtype</name></member>
      <member refid="structat_1_1_tensor_1acb9e0d281b1fa351141cbc61730db10a" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>dtype</name></member>
      <member refid="structat_1_1_tensor_1ac76611548c545465b7a9fc2f16f26c1c" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>eig</name></member>
      <member refid="structat_1_1_tensor_1a01721fa249a37224cb435dc4bc9fb5f6" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>eq</name></member>
      <member refid="structat_1_1_tensor_1a40a733c72075d8fc2d24fb6c77938e26" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>eq</name></member>
      <member refid="structat_1_1_tensor_1a3e22e2b77888385a378933a23094cb36" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>eq_</name></member>
      <member refid="structat_1_1_tensor_1a6e5f0563af48bde4de49130d3dc68465" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>eq_</name></member>
      <member refid="structat_1_1_tensor_1a3f1ac0f5e7e9b7989bb34cfb7007e8c0" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>equal</name></member>
      <member refid="structat_1_1_tensor_1ae96ff06f1a78a121e0f169437535c817" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>erf</name></member>
      <member refid="structat_1_1_tensor_1a60d5f8f0c844e692a17310a941d47ffa" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>erf_</name></member>
      <member refid="structat_1_1_tensor_1a1b215403c7d23babb59d86a91f2d68d5" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>erfc</name></member>
      <member refid="structat_1_1_tensor_1a7c7389d5d91bd16410cfcaae8b4ec953" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>erfc_</name></member>
      <member refid="structat_1_1_tensor_1a5f15e401e0f7c71546e6e9acb8d7597a" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>erfinv</name></member>
      <member refid="structat_1_1_tensor_1ab05f78c5c3423559282dab77e1cc05ae" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>erfinv_</name></member>
      <member refid="structat_1_1_tensor_1a5e38dd793b8acdbd479bdedb9e9fb1b2" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>exp</name></member>
      <member refid="structat_1_1_tensor_1a9b8b63c176ac8234b11cc373a90dbbae" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>exp_</name></member>
      <member refid="structat_1_1_tensor_1aa68deeb98a99b7b4660d3036ef97cac6" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>expand</name></member>
      <member refid="structat_1_1_tensor_1a1b09fed666f3a6f7c9d6240192604f95" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>expand_as</name></member>
      <member refid="structat_1_1_tensor_1a35b8d857ab64710ac5451b67f43652c5" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>expm1</name></member>
      <member refid="structat_1_1_tensor_1a321b24a2126870dd8bc15bfdde54cb2f" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>expm1_</name></member>
      <member refid="structat_1_1_tensor_1a7ef027c72035805312171b9454f1665c" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>exponential_</name></member>
      <member refid="structat_1_1_tensor_1afe8239d2ad3337bc2f2484cb9e4093d6" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>fft</name></member>
      <member refid="structat_1_1_tensor_1a7365b5219d709cc4726ea3e67d30d885" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>fill_</name></member>
      <member refid="structat_1_1_tensor_1a54b65108002df3b826119875fd1103ef" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>fill_</name></member>
      <member refid="structat_1_1_tensor_1a3d13cc715faf52bd76e78cad08e09d29" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>flatten</name></member>
      <member refid="structat_1_1_tensor_1a427dc04a47f43c38a1d710e37b1b9869" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>flip</name></member>
      <member refid="structat_1_1_tensor_1a480fec3159b17a1894765dad8b1dc934" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>floor</name></member>
      <member refid="structat_1_1_tensor_1a203fdde0cdf15acd01fff4520888584b" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>floor_</name></member>
      <member refid="structat_1_1_tensor_1ac1a6163af451ffe45fdd7e83c83e6803" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>fmod</name></member>
      <member refid="structat_1_1_tensor_1aa20cd760214bac35c12bca0e87a4dad5" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>fmod</name></member>
      <member refid="structat_1_1_tensor_1aff55af96021dc6801f27a75544332c74" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>fmod_</name></member>
      <member refid="structat_1_1_tensor_1a9a87600f9421e2de6a5968c292212243" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>fmod_</name></member>
      <member refid="structat_1_1_tensor_1a9f9119d25543cf8b74ad15f4d6c64ea4" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>frac</name></member>
      <member refid="structat_1_1_tensor_1ad4c86177504e755411031d95ed4e23d4" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>frac_</name></member>
      <member refid="structat_1_1_tensor_1afbf69e6f03c996da2eff6edbcaa7efc1" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>gather</name></member>
      <member refid="structat_1_1_tensor_1a947d3b9df3d374569c9630ae577eb4bf" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>ge</name></member>
      <member refid="structat_1_1_tensor_1aede9e733547ea9458f6ab02a354e73e9" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>ge</name></member>
      <member refid="structat_1_1_tensor_1ad4713d3c87f5673bc0121835731f15b6" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>ge_</name></member>
      <member refid="structat_1_1_tensor_1aa2ba46624f01d6d26a4a9ef236a77e94" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>ge_</name></member>
      <member refid="structat_1_1_tensor_1a800ccf374aefc1778d0a16ab054fddd0" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>gels</name></member>
      <member refid="structat_1_1_tensor_1a843b377aa13aa8e74ebcccbb8c5ef04e" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>geometric_</name></member>
      <member refid="structat_1_1_tensor_1a91a24c60252955d47553a6522bae32a5" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>geqrf</name></member>
      <member refid="structat_1_1_tensor_1a671f430bb2e35ed12d5220360ce95f92" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>ger</name></member>
      <member refid="structat_1_1_tensor_1ac88053dce40a9e8aa8f039997a47c436" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>gesv</name></member>
      <member refid="structat_1_1detail_1_1_tensor_base_impl_1a4b6520f7edcc5682ceb9c790b66a45b7" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>get</name></member>
      <member refid="structat_1_1_tensor_1a44d31419951c13f0615f30db1cbe1302" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>get_device</name></member>
      <member refid="structat_1_1_tensor_1a027d9ee6f5a537b603bf335e8f20d9ec" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>grad</name></member>
      <member refid="structat_1_1_tensor_1a9a211415475a1d7c00732fa163055d2d" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>grad</name></member>
      <member refid="structat_1_1_tensor_1a027d9ee6f5a537b603bf335e8f20d9ec" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>grad</name></member>
      <member refid="structat_1_1_tensor_1a9a211415475a1d7c00732fa163055d2d" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>grad</name></member>
      <member refid="structat_1_1_tensor_1a11486d945916da5d7504447c48712b27" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>gt</name></member>
      <member refid="structat_1_1_tensor_1acc8d0701c0692a16decf4e63b24e85ef" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>gt</name></member>
      <member refid="structat_1_1_tensor_1a97dc36106a8d33446f61639bf361b1e6" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>gt_</name></member>
      <member refid="structat_1_1_tensor_1ad6f948d7b919eced78177c21ea6b00e0" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>gt_</name></member>
      <member refid="structat_1_1_tensor_1a7668de7733830c35320169d5850d258c" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>hardshrink</name></member>
      <member refid="structat_1_1_tensor_1a27754f8b331a7a95a3f503383bfbb7f6" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>hardshrink_backward</name></member>
      <member refid="structat_1_1_tensor_1a3839b3574baf1d3ab455d89d5670fdef" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>histc</name></member>
      <member refid="structat_1_1_tensor_1a74863cb05c61fc70c317a10d7e058048" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>ifft</name></member>
      <member refid="structat_1_1_tensor_1ab3195df77761cebb1c5a2cc0744740cc" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>index</name></member>
      <member refid="structat_1_1_tensor_1a1d6305ef5d9bea97ea437013f7a2e10a" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>index_add_</name></member>
      <member refid="structat_1_1_tensor_1a45aa387430f4625832cd6f2a3c511a98" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>index_copy_</name></member>
      <member refid="structat_1_1_tensor_1a886d886eb673fc1147186f3262330d46" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>index_fill_</name></member>
      <member refid="structat_1_1_tensor_1a1f67d8100f27cb64292370c2d16ce3d2" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>index_fill_</name></member>
      <member refid="structat_1_1_tensor_1a1b74f889ed2d277e4e9c558d5e61472d" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>index_put</name></member>
      <member refid="structat_1_1_tensor_1a2aeab25261d8a8145587e2955b0cc27c" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>index_put_</name></member>
      <member refid="structat_1_1_tensor_1ad04312e5fff9d9d614e648b15639cf5a" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>index_select</name></member>
      <member refid="structat_1_1_tensor_1abec177a8260d076ac1eda607f13f11ff" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>inverse</name></member>
      <member refid="structat_1_1_tensor_1ab9edf50e04c1ef2cec9c9869662d5ab1" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>irfft</name></member>
      <member refid="structat_1_1_tensor_1a54eb94b2a928126fe29abf74e351e164" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>is_coalesced</name></member>
      <member refid="structat_1_1_tensor_1aaa8df2cd2f60c42b926858e26dcbd7f4" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>is_contiguous</name></member>
      <member refid="structat_1_1_tensor_1a05e90e9c85c742428122a999a1b64b05" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>is_cuda</name></member>
      <member refid="structat_1_1_tensor_1ac4d447b3eb1e0be0dce71e0709058342" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>is_distributed</name></member>
      <member refid="structat_1_1_tensor_1ab96c912f0e0527c1309deed7c09f6842" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>is_floating_point</name></member>
      <member refid="structat_1_1_tensor_1aa6c10c7e78e34bfeec061528a2f1d38f" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>is_nonzero</name></member>
      <member refid="structat_1_1_tensor_1a50258e16585b785dd439d0cab924075c" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>is_same_size</name></member>
      <member refid="structat_1_1_tensor_1a064895a376b5d4bb39d374ea85fbb623" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>is_set_to</name></member>
      <member refid="structat_1_1_tensor_1adc87e748ddaa3170f0677deca9458a39" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>is_signed</name></member>
      <member refid="structat_1_1_tensor_1a261ad7511ca5d293d08c180c7b2cda36" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>is_sparse</name></member>
      <member refid="structat_1_1_tensor_1ae5fe03a55a50933e6f2e51c4930ea4cc" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>is_variable</name></member>
      <member refid="structat_1_1_tensor_1ae5fe03a55a50933e6f2e51c4930ea4cc" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>is_variable</name></member>
      <member refid="structat_1_1_tensor_1a8719901777254154865a312a2cc2129e" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>isclose</name></member>
      <member refid="structat_1_1_tensor_1a934054d9a9c3d45f7a2b488212ad0f94" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>kthvalue</name></member>
      <member refid="structat_1_1_tensor_1ae354b0becb671916dceec56663fedda1" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>layout</name></member>
      <member refid="structat_1_1_tensor_1ae354b0becb671916dceec56663fedda1" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>layout</name></member>
      <member refid="structat_1_1_tensor_1a5246d1e088d473b64ffcda1872e4a089" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>le</name></member>
      <member refid="structat_1_1_tensor_1a2a7964ffb3e94decd0e6f8afe9ba7ff8" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>le</name></member>
      <member refid="structat_1_1_tensor_1af0b945c205272a931cd925e909793361" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>le_</name></member>
      <member refid="structat_1_1_tensor_1a8cf48dcb61b85207360c02784fcd741d" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>le_</name></member>
      <member refid="structat_1_1_tensor_1a63525e65ff26637d4597aaa264018f54" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>lerp</name></member>
      <member refid="structat_1_1_tensor_1ad9bc3e8c17c6f5d89a4073995d46dbf0" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>lerp_</name></member>
      <member refid="structat_1_1_tensor_1a97d5f621ba6ac708f481def339c3d13f" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>lgamma</name></member>
      <member refid="structat_1_1_tensor_1a1bae071acd0cb3a5f86a4569dad17a4b" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>lgamma_</name></member>
      <member refid="structat_1_1_tensor_1a906936b939af5419895e97af10283791" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>log</name></member>
      <member refid="structat_1_1_tensor_1a6462238558e0e45ab025f02d255da3af" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>log10</name></member>
      <member refid="structat_1_1_tensor_1ab60b032e2987f457e4c42b6391bd5fd2" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>log10_</name></member>
      <member refid="structat_1_1_tensor_1ae25118d3094011e64532257b2399f270" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>log1p</name></member>
      <member refid="structat_1_1_tensor_1a41ae4c99244cd921e6f7f3259c67dcc3" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>log1p_</name></member>
      <member refid="structat_1_1_tensor_1a307ca0c80b761c76c3655b5230f5f723" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>log2</name></member>
      <member refid="structat_1_1_tensor_1a87f77ad7455f22ce5fe4c3b7c672460c" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>log2_</name></member>
      <member refid="structat_1_1_tensor_1acfd8acc5daf5da139ed95cb90da864f8" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>log_</name></member>
      <member refid="structat_1_1_tensor_1aff4ce2a88d6613173062f56616b30e6a" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>log_normal_</name></member>
      <member refid="structat_1_1_tensor_1aabdb272d546f97ca7525b61191e6ec85" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>log_softmax</name></member>
      <member refid="structat_1_1_tensor_1a6b4c4449a999d983cdd6e38e33fe92cf" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>log_softmax_backward_data</name></member>
      <member refid="structat_1_1_tensor_1a31d8b9ace04e2c7a64ca76e45e54431a" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>logdet</name></member>
      <member refid="structat_1_1_tensor_1a8d0a878b2b0d1fd74441d7824a6fde7d" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>logsumexp</name></member>
      <member refid="structat_1_1_tensor_1a669c7c0d1627b162f239cd7b243853f0" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>lt</name></member>
      <member refid="structat_1_1_tensor_1a26cc941a2cf03340e7b212e9a28e80e6" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>lt</name></member>
      <member refid="structat_1_1_tensor_1ae1e21899eb1f8d4b3ca59ffc85dedfa6" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>lt_</name></member>
      <member refid="structat_1_1_tensor_1a84738083e4d72ce67c15446fce8d9755" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>lt_</name></member>
      <member refid="structat_1_1_tensor_1a472586999077d80d3f3817fcad70ae3d" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>m</name></member>
      <member refid="structat_1_1_tensor_1a24070e4df625fcdfd523fbbca7e96132" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>masked_fill_</name></member>
      <member refid="structat_1_1_tensor_1a3995daff4eb65e81c3c13b8e2d01507f" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>masked_fill_</name></member>
      <member refid="structat_1_1_tensor_1aadb139c2fd0906af25e67b62e084e5a7" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>masked_scatter_</name></member>
      <member refid="structat_1_1_tensor_1a0f55c02364de5ce6773884ea90bef9ad" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>masked_select</name></member>
      <member refid="structat_1_1_tensor_1aad4bd74f6942ea1a79a44be9ee1a654f" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>matmul</name></member>
      <member refid="structat_1_1_tensor_1acff95391a7fb44e927e8254221ee19f6" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>max</name></member>
      <member refid="structat_1_1_tensor_1a898424a7665f5633150045b162545387" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>max</name></member>
      <member refid="structat_1_1_tensor_1aad2569b1de729634070981577b0fce64" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>max</name></member>
      <member refid="structat_1_1_tensor_1a902bbb5ffaf0a5be1faa659dbfc09fef" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>max_values</name></member>
      <member refid="structat_1_1_tensor_1ae0b785dad61bebcc85a946a3541ed245" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>mean</name></member>
      <member refid="structat_1_1_tensor_1aaee80ac0ca7961050e5ea0661d56a5c3" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>mean</name></member>
      <member refid="structat_1_1_tensor_1adeaad10fa203952068bda0437a29e175" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>mean</name></member>
      <member refid="structat_1_1_tensor_1a554cd9058f23c98be15f855f520e65bb" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>mean</name></member>
      <member refid="structat_1_1_tensor_1a1c8ed1675e3b230b57594c4261519705" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>mean</name></member>
      <member refid="structat_1_1_tensor_1ace97fc34e96ec28a94b68bcff95ed483" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>median</name></member>
      <member refid="structat_1_1_tensor_1a3b7d6bf8432e71eef7c488103057eb2e" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>median</name></member>
      <member refid="structat_1_1_tensor_1aa450e162ab6d0c243336f5c9a33af6f4" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>min</name></member>
      <member refid="structat_1_1_tensor_1abe279f478a9af41dd90c7ed18e56f870" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>min</name></member>
      <member refid="structat_1_1_tensor_1a04853f50dc4da79ec404860064ae0f6e" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>min</name></member>
      <member refid="structat_1_1_tensor_1a3622ab49bd7855b6d99b2ce2c49137f1" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>min_values</name></member>
      <member refid="structat_1_1_tensor_1a09d1eba8914e76f5141e1af72ebda7ef" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>mm</name></member>
      <member refid="structat_1_1_tensor_1a4d85f210b887c1b3af6d968d567847d1" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>mode</name></member>
      <member refid="structat_1_1_tensor_1a615c7d5996505c059ed366721aff4536" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>mul</name></member>
      <member refid="structat_1_1_tensor_1a7d1eff28e2a009b13fc491e7608d3793" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>mul</name></member>
      <member refid="structat_1_1_tensor_1af379bbe2a1eca29179ef362df1ead4be" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>mul_</name></member>
      <member refid="structat_1_1_tensor_1aa57329ca9c8a608fe6e4d61ef2230fe3" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>mul_</name></member>
      <member refid="structat_1_1_tensor_1a0d12f6f2c65d4b5ff674e9055c834cca" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>multinomial</name></member>
      <member refid="structat_1_1_tensor_1a82940b68a12bda701e72734208653916" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>mv</name></member>
      <member refid="structat_1_1_tensor_1a31825c7bdd705705c3a230a931776639" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>narrow</name></member>
      <member refid="structat_1_1_tensor_1a21212903d6207e1e999834a3cb866b69" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>ndimension</name></member>
      <member refid="structat_1_1_tensor_1a21212903d6207e1e999834a3cb866b69" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>ndimension</name></member>
      <member refid="structat_1_1_tensor_1af5e96afd4ff440f8e931bccdb99bbe04" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>ne</name></member>
      <member refid="structat_1_1_tensor_1a54e6e760fae3ea2635b0cf1dc7bcfd23" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>ne</name></member>
      <member refid="structat_1_1_tensor_1a0769515454df9244bd48e154648ffd21" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>ne_</name></member>
      <member refid="structat_1_1_tensor_1a8829c6851c4512445a4a5206279f429e" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>ne_</name></member>
      <member refid="structat_1_1_tensor_1a0a9144bf3b49ff7f5b32c97c36ec88a2" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>neg</name></member>
      <member refid="structat_1_1_tensor_1ae8ee28c2296976f0aabbb8f9c242f257" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>neg_</name></member>
      <member refid="structat_1_1_tensor_1a79c570fe7d6b6a357b5ac0f8c33ef2ea" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>nonzero</name></member>
      <member refid="structat_1_1_tensor_1a7a85bfb24310c6d91f812ad7947a29ad" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>norm</name></member>
      <member refid="structat_1_1_tensor_1a1f338f9b0fd0a851fef1be8e9f8d3cf8" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>norm</name></member>
      <member refid="structat_1_1_tensor_1acce60afdc2b377d9e51d538ba6b06c4e" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>normal_</name></member>
      <member refid="structat_1_1_tensor_1ac301cb06ee4e3e24a22bfcce21a1f225" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>numel</name></member>
      <member refid="structat_1_1_tensor_1a9e8edb1b85a6a17c27c075d232b62930" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>operator*=</name></member>
      <member refid="structat_1_1_tensor_1a374bb8418148eac65074f3eb586187f1" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>operator*=</name></member>
      <member refid="structat_1_1_tensor_1a17d1c377c004a4532eec8cd7601a6fa6" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>operator*=</name></member>
      <member refid="structat_1_1_tensor_1a7e76196d0f0a85afad58b25fa1bb7e90" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>operator*=</name></member>
      <member refid="structat_1_1_tensor_1a9467fbd61c6fe2cb141580b3cfca3bf4" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>operator+=</name></member>
      <member refid="structat_1_1_tensor_1a0ee5c2f34fc6ec2776343be37dbf2362" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>operator+=</name></member>
      <member refid="structat_1_1_tensor_1ac44ff7086a3dd29aafa4b4a942b270dd" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>operator+=</name></member>
      <member refid="structat_1_1_tensor_1a7fe0a8eaf913a1d143aa5432e4610762" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>operator+=</name></member>
      <member refid="structat_1_1_tensor_1ac5a10f0ec1c908de5cb9fa3100d96729" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>operator-</name></member>
      <member refid="structat_1_1_tensor_1ac5a10f0ec1c908de5cb9fa3100d96729" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>operator-</name></member>
      <member refid="structat_1_1_tensor_1a5c45b92d199ee03fafc82415227dcfb5" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>operator-=</name></member>
      <member refid="structat_1_1_tensor_1ad8c565272befb6e37b498cfbf443ff2f" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>operator-=</name></member>
      <member refid="structat_1_1_tensor_1a83522cee02749ebf23f06c82ecf0f7ef" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>operator-=</name></member>
      <member refid="structat_1_1_tensor_1a58d425cc025e49d55484e1428e434f65" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>operator-=</name></member>
      <member refid="structat_1_1_tensor_1a4ab8e574d1674c5dca8b2c3299b7c639" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>operator/=</name></member>
      <member refid="structat_1_1_tensor_1a37ccae9b987ac98eeb5cd00d342d2d13" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>operator/=</name></member>
      <member refid="structat_1_1_tensor_1a845f6906f262c04d0f33842cceb5cdcd" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>operator/=</name></member>
      <member refid="structat_1_1_tensor_1a7aa0b4218bac3232da2c964cd87d4bb9" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>operator/=</name></member>
      <member refid="structat_1_1_tensor_1aba0360b6e7817289654afd051c2b7877" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>operator=</name></member>
      <member refid="structat_1_1_tensor_1a5997f90b8da1fdc40d6f1259b643d2a8" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>operator=</name></member>
      <member refid="structat_1_1_tensor_1aa3779019dff93334a07a334c5d3bc3b9" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>operator=</name></member>
      <member refid="structat_1_1_tensor_1ae7c2fadef5f73c712cbd854b6ec942c4" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>operator=</name></member>
      <member refid="structat_1_1_tensor_1aba0360b6e7817289654afd051c2b7877" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>operator=</name></member>
      <member refid="structat_1_1_tensor_1a5997f90b8da1fdc40d6f1259b643d2a8" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>operator=</name></member>
      <member refid="structat_1_1_tensor_1a29f0c7e381cb7367644cb9f25e11c54d" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>operator=</name></member>
      <member refid="structat_1_1_tensor_1a94ab51c985208bab1415cac55af1fd78" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>operator=</name></member>
      <member refid="structat_1_1detail_1_1_tensor_base_impl_1a20dae34c3fc4be8321dda63ee3064a9e" prot="public" virt="non-virtual" ambiguityscope="at::detail::TensorBaseImpl::"><scope>at::Tensor</scope><name>operator=</name></member>
      <member refid="structat_1_1detail_1_1_tensor_base_impl_1a58b39d2f0941418977b617c8d9303372" prot="public" virt="non-virtual" ambiguityscope="at::detail::TensorBaseImpl::"><scope>at::Tensor</scope><name>operator=</name></member>
      <member refid="structat_1_1_tensor_1a6e567f2b7f429044b54d5940f1b09506" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>operator[]</name></member>
      <member refid="structat_1_1_tensor_1aeb24fe655e368ccb888d9f12b0823626" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>operator[]</name></member>
      <member refid="structat_1_1_tensor_1a32bcd42290b70dce6533e5aa214ff01c" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>operator[]</name></member>
      <member refid="structat_1_1_tensor_1a6e567f2b7f429044b54d5940f1b09506" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>operator[]</name></member>
      <member refid="structat_1_1_tensor_1aeb24fe655e368ccb888d9f12b0823626" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>operator[]</name></member>
      <member refid="structat_1_1_tensor_1a32bcd42290b70dce6533e5aa214ff01c" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>operator[]</name></member>
      <member refid="structat_1_1_tensor_1a7d7c4c2a7b516b004f78940584c4491e" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>options</name></member>
      <member refid="structat_1_1_tensor_1a7d7c4c2a7b516b004f78940584c4491e" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>options</name></member>
      <member refid="structat_1_1_tensor_1a5ffc9f9c3b516d760e1ed6bfcd8f1cac" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>orgqr</name></member>
      <member refid="structat_1_1_tensor_1a4834c1631775ac0cc6a411b2555171d2" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>ormqr</name></member>
      <member refid="structat_1_1_tensor_1a8946771d65d960154116604bdc173729" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>permute</name></member>
      <member refid="structat_1_1detail_1_1_tensor_base_impl_1a0fd8c05f8aa269923a3b0e237d0592b8" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>pImpl</name></member>
      <member refid="structat_1_1_tensor_1a99ce592322487225ae43e40564236baa" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>pin_memory</name></member>
      <member refid="structat_1_1_tensor_1aaf2cdbe3c2aaa177d251f1eb0da9335a" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>pinverse</name></member>
      <member refid="structat_1_1_tensor_1aa6bdfccd7d41089aaad6f38123bbf010" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>polygamma</name></member>
      <member refid="structat_1_1_tensor_1a1909e82144b538d3359f96cdc456bf8b" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>polygamma_</name></member>
      <member refid="structat_1_1_tensor_1a2a7465b282997e2b270d481de2d0bc81" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>potrf</name></member>
      <member refid="structat_1_1_tensor_1a4a2c17d6791ffff9d770c13e65d5afa7" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>potri</name></member>
      <member refid="structat_1_1_tensor_1ad378040e5f9455a5d9c25fa2d61f9331" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>potrs</name></member>
      <member refid="structat_1_1_tensor_1a6c0549a4b81b58fcf1cc3ebe66d0ccba" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>pow</name></member>
      <member refid="structat_1_1_tensor_1ab136c35778aa09d57fa7d917faf3e0f4" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>pow</name></member>
      <member refid="structat_1_1_tensor_1a1cea8f44c50d0634e7de9dad5c436ac8" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>pow_</name></member>
      <member refid="structat_1_1_tensor_1a5d3e73e6a0fbd04588a95ed1fef589cf" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>pow_</name></member>
      <member refid="structat_1_1_tensor_1a9b6e24ffef0f70fd10b54854f0d18c50" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>print</name></member>
      <member refid="structat_1_1_tensor_1a9b6e24ffef0f70fd10b54854f0d18c50" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>print</name></member>
      <member refid="structat_1_1_tensor_1a2a8f22bc51f4c6a78be136b82f825196" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>prod</name></member>
      <member refid="structat_1_1_tensor_1aa7a4c20e47d5d8502f04ce7123061866" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>prod</name></member>
      <member refid="structat_1_1_tensor_1a870895158df1618d214565685df76831" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>prod</name></member>
      <member refid="structat_1_1_tensor_1a57713502f673259960d20cb57dceea23" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>prod</name></member>
      <member refid="structat_1_1_tensor_1a60b35aa94f7b29f496232109139264f2" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>prod</name></member>
      <member refid="structat_1_1_tensor_1a27bdcf2a113e5b18557a59166e120bba" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>pstrf</name></member>
      <member refid="structat_1_1_tensor_1a7cae1425ac00e1a1d489c1ab6604443f" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>put_</name></member>
      <member refid="structat_1_1_tensor_1a2f86011e4efebb3ac41789992d72ce75" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>qr</name></member>
      <member refid="structat_1_1_tensor_1a84ead4e760386ce0f0427b2a50f502f3" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>random_</name></member>
      <member refid="structat_1_1_tensor_1adc8b388fcb21192ab5fa09cac63a32f0" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>random_</name></member>
      <member refid="structat_1_1_tensor_1adc0e88acf7ec75be0c7250eed26085f9" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>random_</name></member>
      <member refid="structat_1_1_tensor_1a83e435eca628a5638fbae8bc54128cd5" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>reciprocal</name></member>
      <member refid="structat_1_1_tensor_1a1b17989340bb9631da5c482067fc33e9" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>reciprocal_</name></member>
      <member refid="structat_1_1_tensor_1a59023b4cc19233aaa244db35d1c6a5a4" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>relu</name></member>
      <member refid="structat_1_1_tensor_1ac1a13681e52be4d39e1c7f48d86eb71c" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>relu_</name></member>
      <member refid="structat_1_1_tensor_1aa8695bfd4aca20f649770abc0203a9c5" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>remainder</name></member>
      <member refid="structat_1_1_tensor_1a11de78b204422631816dac7ca5fb026d" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>remainder</name></member>
      <member refid="structat_1_1_tensor_1a1a9f53b04a64dfa3f39bb42cebd2b4ac" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>remainder_</name></member>
      <member refid="structat_1_1_tensor_1ae896ccd31e30c55bc9692c6694217b52" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>remainder_</name></member>
      <member refid="structat_1_1_tensor_1a1e6e2e520fbb0eb99c9af09577498daa" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>renorm</name></member>
      <member refid="structat_1_1_tensor_1a134ebb5b5654bdfc7ef103d800fac60d" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>renorm_</name></member>
      <member refid="structat_1_1_tensor_1a9691781e7fecea91f5a4b2c18c9fa9f0" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>repeat</name></member>
      <member refid="structat_1_1_tensor_1a36a7381b20f6ec46dcb98b724f2422bd" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>requires_grad</name></member>
      <member refid="structat_1_1_tensor_1a36a7381b20f6ec46dcb98b724f2422bd" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>requires_grad</name></member>
      <member refid="structat_1_1detail_1_1_tensor_base_impl_1a9a4a2e694e26ce5d3d90d7bc6dc58f56" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>reset</name></member>
      <member refid="structat_1_1detail_1_1_tensor_base_impl_1abc80a9b964737897f9476c616bf41aa9" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>reset</name></member>
      <member refid="structat_1_1detail_1_1_tensor_base_impl_1a78d88d013fe23bb05dde64403652bbe9" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>reset</name></member>
      <member refid="structat_1_1_tensor_1a1a48e797fff112fde42d57c93336fedd" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>reshape</name></member>
      <member refid="structat_1_1_tensor_1a78c2bbe689fd169f987bcb66261e5e85" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>reshape_as</name></member>
      <member refid="structat_1_1_tensor_1aca336294e0ac7f9149cfcbe162afba04" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>resize_</name></member>
      <member refid="structat_1_1_tensor_1a09853a1f55688da98e29dcad6808a86c" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>resize_as_</name></member>
      <member refid="structat_1_1_tensor_1aa1daa96b0a03e641df1a32c15884d372" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>rfft</name></member>
      <member refid="structat_1_1_tensor_1ad61b21c0b5b2d523d750ad1f94649487" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>round</name></member>
      <member refid="structat_1_1_tensor_1ad9fafe556341ed06e6f50ef5d200623a" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>round_</name></member>
      <member refid="structat_1_1_tensor_1a99f19a1da04f5b7b469e96d3de05ad4d" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>rsqrt</name></member>
      <member refid="structat_1_1_tensor_1afe48f35d62821c3d6d2f9afdf36f60ae" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>rsqrt_</name></member>
      <member refid="structat_1_1_tensor_1a13a185feec9b1878d5b47346b3e41f87" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>scatter_</name></member>
      <member refid="structat_1_1_tensor_1a5cd6c308cb912a8bdf80d1613d60f291" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>scatter_</name></member>
      <member refid="structat_1_1_tensor_1a237fcc9cce8b03bbc186d99362d0fa0f" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>scatter_add_</name></member>
      <member refid="structat_1_1_tensor_1a854c2b232ba7da89e3f8632f4ec21784" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>select</name></member>
      <member refid="structat_1_1_tensor_1a5d043d24facdbcb41500287ffefe2caa" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>set_</name></member>
      <member refid="structat_1_1_tensor_1aac874adbe2bd3232881ce59906e55af2" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>set_</name></member>
      <member refid="structat_1_1_tensor_1ab68b448dafcaa4a3fe9750574c5d1e7c" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>set_</name></member>
      <member refid="structat_1_1_tensor_1a99f246116a7c3d57f4d90e52d951aba4" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>set_</name></member>
      <member refid="structat_1_1_tensor_1aaf29c01d712884e0cc2d25c3b2ef2e2c" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>set_requires_grad</name></member>
      <member refid="structat_1_1_tensor_1aaf29c01d712884e0cc2d25c3b2ef2e2c" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>set_requires_grad</name></member>
      <member refid="structat_1_1_tensor_1ab190e338e8daf8f7c77834e27d3758a8" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>sigmoid</name></member>
      <member refid="structat_1_1_tensor_1a6f686b46a6971e5c37afd3d3294df68c" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>sigmoid_</name></member>
      <member refid="structat_1_1_tensor_1a30b4b1304d04af3dc084dadbf6812a0c" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>sign</name></member>
      <member refid="structat_1_1_tensor_1a104b73fb924a0a1756745a7695fb408f" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>sign_</name></member>
      <member refid="structat_1_1_tensor_1a47ae4a9d9113c0acebe94e98709d63f3" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>sin</name></member>
      <member refid="structat_1_1_tensor_1aa9ed790465affe9f49b8429de1076816" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>sin_</name></member>
      <member refid="structat_1_1_tensor_1a98069f0b64ebdb51c4d390153b6767a4" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>sinh</name></member>
      <member refid="structat_1_1_tensor_1a95e7027076a937925c01b13c84a507df" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>sinh_</name></member>
      <member refid="structat_1_1_tensor_1a163cf09129011ea17cf7851ce03cd618" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>size</name></member>
      <member refid="structat_1_1_tensor_1a5bb72ece57cc45451a7f6f8df3542a03" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>sizes</name></member>
      <member refid="structat_1_1_tensor_1a5bb72ece57cc45451a7f6f8df3542a03" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>sizes</name></member>
      <member refid="structat_1_1_tensor_1a2123c98013d645426e28d6aa69b3903a" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>slice</name></member>
      <member refid="structat_1_1_tensor_1aadfe3b7d01fdd815d042ee16f8518629" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>slogdet</name></member>
      <member refid="structat_1_1_tensor_1aa08964a38f52a4e5c0effbe0b91a37bf" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>smm</name></member>
      <member refid="structat_1_1_tensor_1a4ed5d69c75f897a298e7f131df315fa1" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>softmax</name></member>
      <member refid="structat_1_1_tensor_1a563c9b8d744490e71ba52152885ecb0e" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>softmax_backward_data</name></member>
      <member refid="structat_1_1_tensor_1a0466e1519ba74fb36fd2f58925be8a8b" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>sort</name></member>
      <member refid="structat_1_1_tensor_1a200dcc6a3fce8111667e2478c588b0fe" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>sparse_raw_resize_</name></member>
      <member refid="structat_1_1_tensor_1a96f76bf143e9f49924a1e8b869c0b29c" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>split</name></member>
      <member refid="structat_1_1_tensor_1a6979c5c770d26ea4abf50dbf760813d3" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>split_with_sizes</name></member>
      <member refid="structat_1_1_tensor_1ac3453d7350f69efd95ded4b4c574b7f5" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>sqrt</name></member>
      <member refid="structat_1_1_tensor_1a9211804fda973ed357df8b922b2528ea" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>sqrt_</name></member>
      <member refid="structat_1_1_tensor_1ada65d787d9946fd2bfc126a6df97ec00" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>squeeze</name></member>
      <member refid="structat_1_1_tensor_1a44467f1afe204a57f63252a86e9afe04" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>squeeze</name></member>
      <member refid="structat_1_1_tensor_1ab272ca486dc86e2c0499211d970e37b4" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>squeeze_</name></member>
      <member refid="structat_1_1_tensor_1a3634035bee0774069cd8f8d3c7567a0a" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>squeeze_</name></member>
      <member refid="structat_1_1_tensor_1ad8abf3a9e9a58a946bac952c92edb6ee" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>sspaddmm</name></member>
      <member refid="structat_1_1_tensor_1a4158ae39c55a90c9433d6cd1b0b552e5" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>std</name></member>
      <member refid="structat_1_1_tensor_1a98d261b125794a1ce7cb9d68cc857bed" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>std</name></member>
      <member refid="structat_1_1_tensor_1ac6c8d1a6472c6e3cfe0f17a0f6a7b8a0" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>stft</name></member>
      <member refid="structat_1_1_tensor_1a6b4417f517712ee6c791ff0e67518292" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>storage</name></member>
      <member refid="structat_1_1_tensor_1a6b4417f517712ee6c791ff0e67518292" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>storage</name></member>
      <member refid="structat_1_1_tensor_1a2fa08c3732fd2970b89c6cfccfb11289" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>storage_offset</name></member>
      <member refid="structat_1_1_tensor_1a756ac988c2b43f1cb61134945b7567f3" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>stride</name></member>
      <member refid="structat_1_1_tensor_1a79ef5820221f4bc6a16f17f3557ec2a4" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>strides</name></member>
      <member refid="structat_1_1_tensor_1a79ef5820221f4bc6a16f17f3557ec2a4" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>strides</name></member>
      <member refid="structat_1_1_tensor_1a3b7714914c4e3b257d9fe9578d8346c5" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>sub</name></member>
      <member refid="structat_1_1_tensor_1a132bfd452862081e69023c8a86fb9618" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>sub</name></member>
      <member refid="structat_1_1_tensor_1a7230f607c0eeb01961065a7eb4f2b999" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>sub_</name></member>
      <member refid="structat_1_1_tensor_1a3741ece64f5e7503632be469112671ba" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>sub_</name></member>
      <member refid="structat_1_1_tensor_1a63766202540b15f41e60064883d1923b" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>sum</name></member>
      <member refid="structat_1_1_tensor_1af3b71b4363235729794fb0751bdb9082" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>sum</name></member>
      <member refid="structat_1_1_tensor_1a3b0ebceb6b2662f1c91b587a24bc9c24" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>sum</name></member>
      <member refid="structat_1_1_tensor_1a4ab481f61e1b8eebd46577a5c439ede2" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>sum</name></member>
      <member refid="structat_1_1_tensor_1a4281f566f3336c70c8db66e4f4b17f87" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>sum</name></member>
      <member refid="structat_1_1_tensor_1ab6e2691e88af84119b6959d95cace3d7" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>svd</name></member>
      <member refid="structat_1_1detail_1_1_tensor_base_impl_1a0a08b33b8c56059599af0ac3db63f41b" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>swap</name></member>
      <member refid="structat_1_1_tensor_1af17982e5ba2164c822a8c0166e5b61a2" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>symeig</name></member>
      <member refid="structat_1_1_tensor_1adc7a921a6fef5bf035bf371ef3903df9" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>t</name></member>
      <member refid="structat_1_1_tensor_1a2c4798fbd3a958e34f0c1465c0829295" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>t_</name></member>
      <member refid="structat_1_1_tensor_1a8f5d6b478cb4df2a5b3c007cb940592f" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>take</name></member>
      <member refid="structat_1_1_tensor_1a270d8cca1b64912747e21b838d139182" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>tan</name></member>
      <member refid="structat_1_1_tensor_1a0dc6eec75db92ffcadea71d3277e7865" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>tan_</name></member>
      <member refid="structat_1_1_tensor_1a764510fd2dc4d035b9961d1dc448ea05" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>tanh</name></member>
      <member refid="structat_1_1_tensor_1a98b1074283ca90370f7ee5dd2fadd2eb" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>tanh_</name></member>
      <member refid="structat_1_1_tensor_1a039978832ec3a6b24f9af266d06b40fc" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>Tensor</name></member>
      <member refid="structat_1_1_tensor_1a215230ad15931dd6d4cf13a0048ce724" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>Tensor</name></member>
      <member refid="structat_1_1_tensor_1a413eca0f4a1371c06984eef6d61a9cb5" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>Tensor</name></member>
      <member refid="structat_1_1_tensor_1a7d6f9940c1f522ce80208146737bb08c" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>Tensor</name></member>
      <member refid="structat_1_1_tensor_1a8336cdb38b3fb2b2c8b72ebf92921dd9" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>Tensor</name></member>
      <member refid="structat_1_1_tensor_1a039978832ec3a6b24f9af266d06b40fc" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>Tensor</name></member>
      <member refid="structat_1_1_tensor_1a215230ad15931dd6d4cf13a0048ce724" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>Tensor</name></member>
      <member refid="structat_1_1_tensor_1a413eca0f4a1371c06984eef6d61a9cb5" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>Tensor</name></member>
      <member refid="structat_1_1_tensor_1a7d6f9940c1f522ce80208146737bb08c" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>Tensor</name></member>
      <member refid="structat_1_1_tensor_1a8336cdb38b3fb2b2c8b72ebf92921dd9" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>Tensor</name></member>
      <member refid="structat_1_1_tensor_1a5bbe33ba47e9f9ff80cf2a7002a8b77d" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>TensorBase</name></member>
      <member refid="structat_1_1_tensor_1a5bbe33ba47e9f9ff80cf2a7002a8b77d" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>TensorBase</name></member>
      <member refid="structat_1_1detail_1_1_tensor_base_impl_1a693cc27c833f78fab0b11fef9e33d110" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>TensorBaseImpl</name></member>
      <member refid="structat_1_1detail_1_1_tensor_base_impl_1a536ae4dee477d6238aad7ea6c0577b61" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>TensorBaseImpl</name></member>
      <member refid="structat_1_1detail_1_1_tensor_base_impl_1a3af33b4a76bf3ac3c8fd2a25dda7bb96" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>TensorBaseImpl</name></member>
      <member refid="structat_1_1detail_1_1_tensor_base_impl_1a3b790184f8440ceae70215d3c8291c15" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>TensorBaseImpl</name></member>
      <member refid="structat_1_1_tensor_1af02d1520be96cf71c531b1eb4b20aa9e" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>to</name></member>
      <member refid="structat_1_1_tensor_1a8b73c49def01e67f7c46e52041ff55fa" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>to</name></member>
      <member refid="structat_1_1_tensor_1a40856e6e6c0406d068f1041e47b54401" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>to</name></member>
      <member refid="structat_1_1_tensor_1af02d1520be96cf71c531b1eb4b20aa9e" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>to</name></member>
      <member refid="structat_1_1_tensor_1a8b73c49def01e67f7c46e52041ff55fa" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>to</name></member>
      <member refid="structat_1_1_tensor_1a40856e6e6c0406d068f1041e47b54401" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>to</name></member>
      <member refid="structat_1_1_tensor_1af5a18b8ae113c4728298e1c34ab27412" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>to_dense</name></member>
      <member refid="structat_1_1_tensor_1a3d27045aef471bf10389aab232fd5012" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>toBackend</name></member>
      <member refid="structat_1_1_tensor_1a3d27045aef471bf10389aab232fd5012" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>toBackend</name></member>
      <member refid="structat_1_1_tensor_1a3dfdd4b7e120fc428be93f028d996b0f" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>topk</name></member>
      <member refid="structat_1_1_tensor_1aec3eab956d4122607d69a13c413a5820" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>toString</name></member>
      <member refid="structat_1_1_tensor_1aec3eab956d4122607d69a13c413a5820" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>toString</name></member>
      <member refid="structat_1_1_tensor_1ad9ac7797b0064558da1b2d918452d695" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>toType</name></member>
      <member refid="structat_1_1_tensor_1aa43d66c764bedf5978c4c5a0b2b477a9" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>toType</name></member>
      <member refid="structat_1_1_tensor_1ad9ac7797b0064558da1b2d918452d695" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>toType</name></member>
      <member refid="structat_1_1_tensor_1aa43d66c764bedf5978c4c5a0b2b477a9" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>toType</name></member>
      <member refid="structat_1_1_tensor_1ab9fed3f59b800b996ec05cc632d81e2b" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>trace</name></member>
      <member refid="structat_1_1_tensor_1ab34d154cd9da86304c2c467461ada0fd" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>transpose</name></member>
      <member refid="structat_1_1_tensor_1a007fb44a7b3c4240c277dc49239521dc" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>transpose_</name></member>
      <member refid="structat_1_1_tensor_1a159c8b3eb86f9adf024403ba97540ef6" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>tril</name></member>
      <member refid="structat_1_1_tensor_1a3e1c912661952ac56f9c434c0556ae50" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>tril_</name></member>
      <member refid="structat_1_1_tensor_1ac9abb51c9d2823917f445c17bd05c1ab" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>triu</name></member>
      <member refid="structat_1_1_tensor_1a06c1637aa6d6c505682f34e103120aeb" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>triu_</name></member>
      <member refid="structat_1_1_tensor_1a8d0e79b8d1e65d410501c123a1359711" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>trtrs</name></member>
      <member refid="structat_1_1_tensor_1a6f827d523694376d7deb734a30a50076" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>trunc</name></member>
      <member refid="structat_1_1_tensor_1a0375e9f48fc6cb3b24151cf16902b449" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>trunc_</name></member>
      <member refid="structat_1_1_tensor_1ad556453a05af0ed569b78f0f5692e02a" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>type</name></member>
      <member refid="structat_1_1_tensor_1ad556453a05af0ed569b78f0f5692e02a" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>type</name></member>
      <member refid="structat_1_1_tensor_1a28d0e64a6619b931913d5980284ca721" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>type_as</name></member>
      <member refid="structat_1_1_tensor_1a3a2a59387f7383e2f5908394d32b4416" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>unbind</name></member>
      <member refid="structat_1_1_tensor_1a08105083bd7c897e76c4400cba457e7c" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>unfold</name></member>
      <member refid="structat_1_1_tensor_1a48639daacc739ce4b57b8af05f0bf942" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>uniform_</name></member>
      <member refid="structat_1_1_tensor_1a0813dead9f99a37c8f7808e4273893b3" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>unsafeGetTensorImpl</name></member>
      <member refid="structat_1_1_tensor_1a0813dead9f99a37c8f7808e4273893b3" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>unsafeGetTensorImpl</name></member>
      <member refid="structat_1_1_tensor_1acc59ad301571518b7e551b2349c365fb" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>unsafeGetTH</name></member>
      <member refid="structat_1_1_tensor_1acc59ad301571518b7e551b2349c365fb" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>unsafeGetTH</name></member>
      <member refid="structat_1_1_tensor_1a48a454772f0b4c2b5d38be662433e6dd" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>unsqueeze</name></member>
      <member refid="structat_1_1_tensor_1aa606413551acd870212c20d9c2d1a4c4" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>unsqueeze_</name></member>
      <member refid="structat_1_1_tensor_1a2b35e4684865dd9b937af2f822e02d9a" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>var</name></member>
      <member refid="structat_1_1_tensor_1af7da0b5d2d9784e53a212159107992bb" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>var</name></member>
      <member refid="structat_1_1_tensor_1acdb581f6090f72a621bc143e91e293e4" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>view</name></member>
      <member refid="structat_1_1_tensor_1a7e7a899530ec006260ed42bac9b57b70" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>view_as</name></member>
      <member refid="structat_1_1_tensor_1a4b7b5402b2b44f067d13e5704081e86d" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>WeakTensor</name></member>
      <member refid="structat_1_1_tensor_1a5d0f1af4c1b63de3d94f6efda18408d6" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>where</name></member>
      <member refid="structat_1_1_tensor_1ae24321f2972600312f02f41533d7fe5f" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>zero_</name></member>
      <member refid="structat_1_1detail_1_1_tensor_base_impl_1ab8ab4a0e6ec611a8571ba03e3151daad" prot="public" virt="non-virtual"><scope>at::Tensor</scope><name>~TensorBaseImpl</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
