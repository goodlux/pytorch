<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="native__test_8cpp" kind="file" language="C++">
    <compoundname>native_test.cpp</compoundname>
    <includes local="yes">catch.hpp</includes>
    <includes refid="_a_ten_8h" local="yes">ATen/ATen.h</includes>
    <includes refid="test__seed_8h" local="yes">test_seed.h</includes>
    <incdepgraph>
      <node id="12603">
        <label>ATen/optional.h</label>
        <link refid="optional_8h_source"/>
        <childnode refid="12604" relation="include">
        </childnode>
        <childnode refid="12605" relation="include">
        </childnode>
        <childnode refid="12606" relation="include">
        </childnode>
        <childnode refid="12607" relation="include">
        </childnode>
        <childnode refid="12608" relation="include">
        </childnode>
        <childnode refid="12609" relation="include">
        </childnode>
        <childnode refid="12610" relation="include">
        </childnode>
      </node>
      <node id="12649">
        <label>ATen/detail/CUDAHooksInterface.h</label>
        <link refid="_c_u_d_a_hooks_interface_8h_source"/>
        <childnode refid="12599" relation="include">
        </childnode>
        <childnode refid="12602" relation="include">
        </childnode>
        <childnode refid="12647" relation="include">
        </childnode>
        <childnode refid="12650" relation="include">
        </childnode>
        <childnode refid="12611" relation="include">
        </childnode>
        <childnode refid="12608" relation="include">
        </childnode>
        <childnode refid="12600" relation="include">
        </childnode>
      </node>
      <node id="12617">
        <label>ATen/Device.h</label>
        <link refid="_device_8h_source"/>
        <childnode refid="12602" relation="include">
        </childnode>
        <childnode refid="12618" relation="include">
        </childnode>
        <childnode refid="12611" relation="include">
        </childnode>
        <childnode refid="12633" relation="include">
        </childnode>
        <childnode refid="12609" relation="include">
        </childnode>
        <childnode refid="12608" relation="include">
        </childnode>
      </node>
      <node id="12616">
        <label>atomic</label>
      </node>
      <node id="12595">
        <label>catch.hpp</label>
      </node>
      <node id="12608">
        <label>functional</label>
      </node>
      <node id="12654">
        <label>ATen/Backtrace.h</label>
        <link refid="_backtrace_8h_source"/>
        <childnode refid="12611" relation="include">
        </childnode>
        <childnode refid="12609" relation="include">
        </childnode>
        <childnode refid="12644" relation="include">
        </childnode>
        <childnode refid="12597" relation="include">
        </childnode>
      </node>
      <node id="12618">
        <label>ATen/ScalarType.h</label>
        <link refid="_scalar_type_8h_source"/>
        <childnode refid="12619" relation="include">
        </childnode>
        <childnode refid="12597" relation="include">
        </childnode>
        <childnode refid="12629" relation="include">
        </childnode>
        <childnode refid="12631" relation="include">
        </childnode>
        <childnode refid="12635" relation="include">
        </childnode>
      </node>
      <node id="12630">
        <label>limits</label>
      </node>
      <node id="12594">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/test/native_test.cpp</label>
        <link refid="native__test_8cpp"/>
        <childnode refid="12595" relation="include">
        </childnode>
        <childnode refid="12596" relation="include">
        </childnode>
        <childnode refid="12677" relation="include">
        </childnode>
      </node>
      <node id="12638">
        <label>assert.h</label>
      </node>
      <node id="12643">
        <label>ATen/Utils.h</label>
        <link refid="aten_2src_2_a_ten_2utils_8h_source"/>
        <childnode refid="12597" relation="include">
        </childnode>
        <childnode refid="12619" relation="include">
        </childnode>
        <childnode refid="12602" relation="include">
        </childnode>
        <childnode refid="12642" relation="include">
        </childnode>
        <childnode refid="12622" relation="include">
        </childnode>
        <childnode refid="12614" relation="include">
        </childnode>
        <childnode refid="12644" relation="include">
        </childnode>
        <childnode refid="12645" relation="include">
        </childnode>
      </node>
      <node id="12625">
        <label>iterator</label>
      </node>
      <node id="12637">
        <label>ATen/Scalar.h</label>
        <link refid="_scalar_8h_source"/>
        <childnode refid="12638" relation="include">
        </childnode>
        <childnode refid="12639" relation="include">
        </childnode>
        <childnode refid="12610" relation="include">
        </childnode>
        <childnode refid="12609" relation="include">
        </childnode>
        <childnode refid="12604" relation="include">
        </childnode>
        <childnode refid="12597" relation="include">
        </childnode>
        <childnode refid="12629" relation="include">
        </childnode>
        <childnode refid="12618" relation="include">
        </childnode>
        <childnode refid="12640" relation="include">
        </childnode>
        <childnode refid="12643" relation="include">
        </childnode>
      </node>
      <node id="12657">
        <label>TH/THStorageFunctions.hpp</label>
      </node>
      <node id="12631">
        <label>cstdint</label>
      </node>
      <node id="12665">
        <label>ATen/Deprecated.h</label>
        <link refid="_deprecated_8h_source"/>
      </node>
      <node id="12639">
        <label>stdint.h</label>
      </node>
      <node id="12676">
        <label>ATen/CUDAGuard.h</label>
        <link refid="_c_u_d_a_guard_8h_source"/>
      </node>
      <node id="12632">
        <label>cmath</label>
      </node>
      <node id="12607">
        <label>cassert</label>
      </node>
      <node id="12648">
        <label>ATen/Context.h</label>
        <link refid="_context_8h_source"/>
        <childnode refid="12597" relation="include">
        </childnode>
        <childnode refid="12598" relation="include">
        </childnode>
        <childnode refid="12647" relation="include">
        </childnode>
        <childnode refid="12646" relation="include">
        </childnode>
        <childnode refid="12643" relation="include">
        </childnode>
        <childnode refid="12602" relation="include">
        </childnode>
        <childnode refid="12649" relation="include">
        </childnode>
        <childnode refid="12655" relation="include">
        </childnode>
        <childnode refid="12600" relation="include">
        </childnode>
        <childnode refid="12652" relation="include">
        </childnode>
        <childnode refid="12631" relation="include">
        </childnode>
      </node>
      <node id="12634">
        <label>Half-inl.h</label>
        <link refid="_half-inl_8h_source"/>
        <childnode refid="12597" relation="include">
        </childnode>
        <childnode refid="12624" relation="include">
        </childnode>
        <childnode refid="12630" relation="include">
        </childnode>
      </node>
      <node id="12610">
        <label>stdexcept</label>
      </node>
      <node id="12671">
        <label>ATen/TensorOperators.h</label>
        <link refid="_tensor_operators_8h_source"/>
        <childnode refid="12637" relation="include">
        </childnode>
        <childnode refid="12658" relation="include">
        </childnode>
        <childnode refid="12646" relation="include">
        </childnode>
        <childnode refid="12609" relation="include">
        </childnode>
        <childnode refid="12610" relation="include">
        </childnode>
      </node>
      <node id="12645">
        <label>numeric</label>
      </node>
      <node id="12641">
        <label>ATen/TensorImpl.h</label>
        <link refid="_tensor_impl_8h_source"/>
        <childnode refid="12616" relation="include">
        </childnode>
        <childnode refid="12600" relation="include">
        </childnode>
        <childnode refid="12615" relation="include">
        </childnode>
        <childnode refid="12618" relation="include">
        </childnode>
        <childnode refid="12603" relation="include">
        </childnode>
      </node>
      <node id="12629">
        <label>ATen/Half.h</label>
        <link refid="_half_8h_source"/>
        <childnode refid="12597" relation="include">
        </childnode>
        <childnode refid="12630" relation="include">
        </childnode>
        <childnode refid="12609" relation="include">
        </childnode>
        <childnode refid="12631" relation="include">
        </childnode>
        <childnode refid="12610" relation="include">
        </childnode>
        <childnode refid="12604" relation="include">
        </childnode>
        <childnode refid="12632" relation="include">
        </childnode>
        <childnode refid="12633" relation="include">
        </childnode>
        <childnode refid="12634" relation="include">
        </childnode>
      </node>
      <node id="12615">
        <label>ATen/Retainable.h</label>
        <link refid="_retainable_8h_source"/>
        <childnode refid="12616" relation="include">
        </childnode>
      </node>
      <node id="12640">
        <label>ATen/TensorBase.h</label>
        <link refid="_tensor_base_8h_source"/>
        <childnode refid="12641" relation="include">
        </childnode>
        <childnode refid="12642" relation="include">
        </childnode>
      </node>
      <node id="12609">
        <label>string</label>
      </node>
      <node id="12674">
        <label>ATen/DimVector.h</label>
        <link refid="_dim_vector_8h_source"/>
        <childnode refid="12620" relation="include">
        </childnode>
        <childnode refid="12639" relation="include">
        </childnode>
      </node>
      <node id="12675">
        <label>ATen/OptionsGuard.h</label>
        <link refid="_options_guard_8h_source"/>
        <childnode refid="12617" relation="include">
        </childnode>
        <childnode refid="12661" relation="include">
        </childnode>
        <childnode refid="12618" relation="include">
        </childnode>
        <childnode refid="12668" relation="include">
        </childnode>
        <childnode refid="12603" relation="include">
        </childnode>
      </node>
      <node id="12599">
        <label>ATen/Allocator.h</label>
        <link refid="_allocator_8h_source"/>
        <childnode refid="12600" relation="include">
        </childnode>
        <childnode refid="12601" relation="include">
        </childnode>
        <childnode refid="12602" relation="include">
        </childnode>
        <childnode refid="12615" relation="include">
        </childnode>
        <childnode refid="12617" relation="include">
        </childnode>
        <childnode refid="12636" relation="include">
        </childnode>
      </node>
      <node id="12655">
        <label>ATen/CUDAStream.h</label>
        <link refid="_c_u_d_a_stream_8h_source"/>
      </node>
      <node id="12667">
        <label>ATen/DeviceGuard.h</label>
        <link refid="_device_guard_8h_source"/>
        <childnode refid="12617" relation="include">
        </childnode>
        <childnode refid="12602" relation="include">
        </childnode>
        <childnode refid="12618" relation="include">
        </childnode>
        <childnode refid="12658" relation="include">
        </childnode>
        <childnode refid="12649" relation="include">
        </childnode>
        <childnode refid="12611" relation="include">
        </childnode>
      </node>
      <node id="12612">
        <label>exception</label>
      </node>
      <node id="12601">
        <label>stddef.h</label>
      </node>
      <node id="12642">
        <label>ATen/UndefinedTensor.h</label>
        <link refid="_undefined_tensor_8h_source"/>
        <childnode refid="12641" relation="include">
        </childnode>
      </node>
      <node id="12673">
        <label>ATen/Dispatch.h</label>
        <link refid="_dispatch_8h_source"/>
        <childnode refid="12602" relation="include">
        </childnode>
        <childnode refid="12629" relation="include">
        </childnode>
        <childnode refid="12646" relation="include">
        </childnode>
      </node>
      <node id="12621">
        <label>AlignOf.h</label>
        <link refid="_align_of_8h_source"/>
        <childnode refid="12611" relation="include">
        </childnode>
      </node>
      <node id="12656">
        <label>ATen/Storage.h</label>
        <link refid="_storage_8h_source"/>
        <childnode refid="12637" relation="include">
        </childnode>
        <childnode refid="12657" relation="include">
        </childnode>
      </node>
      <node id="12613">
        <label>ostream</label>
      </node>
      <node id="12598">
        <label>ATen/CPUGeneral.h</label>
        <link refid="_c_p_u_general_8h_source"/>
        <childnode refid="12597" relation="include">
        </childnode>
      </node>
      <node id="12646">
        <label>ATen/Type.h</label>
      </node>
      <node id="12619">
        <label>ATen/ArrayRef.h</label>
        <link refid="_array_ref_8h_source"/>
        <childnode refid="12602" relation="include">
        </childnode>
        <childnode refid="12620" relation="include">
        </childnode>
        <childnode refid="12627" relation="include">
        </childnode>
        <childnode refid="12625" relation="include">
        </childnode>
        <childnode refid="12628" relation="include">
        </childnode>
      </node>
      <node id="12662">
        <label>ATen/TensorGeometry.h</label>
        <link refid="_tensor_geometry_8h_source"/>
        <childnode refid="12646" relation="include">
        </childnode>
        <childnode refid="12663" relation="include">
        </childnode>
      </node>
      <node id="12659">
        <label>ATen/SparseTensorRef.h</label>
        <link refid="_sparse_tensor_ref_8h_source"/>
      </node>
      <node id="12597">
        <label>ATen/ATenGeneral.h</label>
        <link refid="_a_ten_general_8h_source"/>
      </node>
      <node id="12663">
        <label>ATen/WrapDimUtils.h</label>
        <link refid="_wrap_dim_utils_8h_source"/>
        <childnode refid="12641" relation="include">
        </childnode>
        <childnode refid="12614" relation="include">
        </childnode>
      </node>
      <node id="12660">
        <label>ATen/TensorAccessor.h</label>
        <link refid="_tensor_accessor_8h_source"/>
        <childnode refid="12611" relation="include">
        </childnode>
        <childnode refid="12639" relation="include">
        </childnode>
        <childnode refid="12618" relation="include">
        </childnode>
      </node>
      <node id="12644">
        <label>typeinfo</label>
      </node>
      <node id="12651">
        <label>cstdio</label>
      </node>
      <node id="12636">
        <label>ATen/detail/UniqueVoidPtr.h</label>
        <link refid="_unique_void_ptr_8h_source"/>
        <childnode refid="12600" relation="include">
        </childnode>
        <childnode refid="12597" relation="include">
        </childnode>
      </node>
      <node id="12628">
        <label>vector</label>
      </node>
      <node id="12677">
        <label>test_seed.h</label>
        <link refid="test__seed_8h_source"/>
        <childnode refid="12596" relation="include">
        </childnode>
      </node>
      <node id="12672">
        <label>ATen/TensorMethods.h</label>
      </node>
      <node id="12669">
        <label>THNN/Reduction.h</label>
      </node>
      <node id="12626">
        <label>new</label>
      </node>
      <node id="12604">
        <label>utility</label>
      </node>
      <node id="12627">
        <label>array</label>
      </node>
      <node id="12614">
        <label>sstream</label>
      </node>
      <node id="12664">
        <label>ATen/Functions.h</label>
        <link refid="build_2aten_2src_2_a_ten_2_functions_8h_source"/>
        <childnode refid="12637" relation="include">
        </childnode>
        <childnode refid="12646" relation="include">
        </childnode>
        <childnode refid="12658" relation="include">
        </childnode>
        <childnode refid="12656" relation="include">
        </childnode>
        <childnode refid="12647" relation="include">
        </childnode>
        <childnode refid="12665" relation="include">
        </childnode>
        <childnode refid="12666" relation="include">
        </childnode>
        <childnode refid="12667" relation="include">
        </childnode>
        <childnode refid="12668" relation="include">
        </childnode>
        <childnode refid="12669" relation="include">
        </childnode>
      </node>
      <node id="12666">
        <label>ATen/NativeFunctions.h</label>
      </node>
      <node id="12633">
        <label>iosfwd</label>
      </node>
      <node id="12623">
        <label>cstdlib</label>
      </node>
      <node id="12635">
        <label>iostream</label>
      </node>
      <node id="12611">
        <label>cstddef</label>
      </node>
      <node id="12653">
        <label>unordered_map</label>
      </node>
      <node id="12652">
        <label>mutex</label>
      </node>
      <node id="12596">
        <label>ATen/ATen.h</label>
        <link refid="_a_ten_8h_source"/>
        <childnode refid="12597" relation="include">
        </childnode>
        <childnode refid="12598" relation="include">
        </childnode>
        <childnode refid="12599" relation="include">
        </childnode>
        <childnode refid="12637" relation="include">
        </childnode>
        <childnode refid="12646" relation="include">
        </childnode>
        <childnode refid="12647" relation="include">
        </childnode>
        <childnode refid="12648" relation="include">
        </childnode>
        <childnode refid="12656" relation="include">
        </childnode>
        <childnode refid="12658" relation="include">
        </childnode>
        <childnode refid="12617" relation="include">
        </childnode>
        <childnode refid="12662" relation="include">
        </childnode>
        <childnode refid="12664" relation="include">
        </childnode>
        <childnode refid="12670" relation="include">
        </childnode>
        <childnode refid="12671" relation="include">
        </childnode>
        <childnode refid="12672" relation="include">
        </childnode>
        <childnode refid="12673" relation="include">
        </childnode>
        <childnode refid="12674" relation="include">
        </childnode>
        <childnode refid="12667" relation="include">
        </childnode>
        <childnode refid="12668" relation="include">
        </childnode>
        <childnode refid="12661" relation="include">
        </childnode>
        <childnode refid="12675" relation="include">
        </childnode>
        <childnode refid="12676" relation="include">
        </childnode>
      </node>
      <node id="12650">
        <label>ATen/Registry.h</label>
        <link refid="_registry_8h_source"/>
        <childnode refid="12622" relation="include">
        </childnode>
        <childnode refid="12651" relation="include">
        </childnode>
        <childnode refid="12623" relation="include">
        </childnode>
        <childnode refid="12608" relation="include">
        </childnode>
        <childnode refid="12600" relation="include">
        </childnode>
        <childnode refid="12652" relation="include">
        </childnode>
        <childnode refid="12653" relation="include">
        </childnode>
        <childnode refid="12609" relation="include">
        </childnode>
        <childnode refid="12628" relation="include">
        </childnode>
        <childnode refid="12654" relation="include">
        </childnode>
        <childnode refid="12597" relation="include">
        </childnode>
      </node>
      <node id="12602">
        <label>ATen/Error.h</label>
        <link refid="_error_8h_source"/>
        <childnode refid="12597" relation="include">
        </childnode>
        <childnode refid="12603" relation="include">
        </childnode>
        <childnode refid="12611" relation="include">
        </childnode>
        <childnode refid="12612" relation="include">
        </childnode>
        <childnode refid="12613" relation="include">
        </childnode>
        <childnode refid="12614" relation="include">
        </childnode>
        <childnode refid="12609" relation="include">
        </childnode>
      </node>
      <node id="12668">
        <label>ATen/TensorOptions.h</label>
        <link refid="_tensor_options_8h_source"/>
        <childnode refid="12648" relation="include">
        </childnode>
        <childnode refid="12617" relation="include">
        </childnode>
        <childnode refid="12667" relation="include">
        </childnode>
        <childnode refid="12661" relation="include">
        </childnode>
        <childnode refid="12618" relation="include">
        </childnode>
        <childnode refid="12658" relation="include">
        </childnode>
        <childnode refid="12646" relation="include">
        </childnode>
        <childnode refid="12611" relation="include">
        </childnode>
        <childnode refid="12633" relation="include">
        </childnode>
        <childnode refid="12604" relation="include">
        </childnode>
      </node>
      <node id="12658">
        <label>ATen/Tensor.h</label>
        <link refid="build_2aten_2src_2_a_ten_2tensor_8h_source"/>
        <childnode refid="12647" relation="include">
        </childnode>
        <childnode refid="12637" relation="include">
        </childnode>
        <childnode refid="12618" relation="include">
        </childnode>
        <childnode refid="12659" relation="include">
        </childnode>
        <childnode refid="12656" relation="include">
        </childnode>
        <childnode refid="12660" relation="include">
        </childnode>
        <childnode refid="12640" relation="include">
        </childnode>
        <childnode refid="12641" relation="include">
        </childnode>
        <childnode refid="12643" relation="include">
        </childnode>
        <childnode refid="12617" relation="include">
        </childnode>
        <childnode refid="12661" relation="include">
        </childnode>
        <childnode refid="12603" relation="include">
        </childnode>
      </node>
      <node id="12605">
        <label>type_traits</label>
      </node>
      <node id="12661">
        <label>ATen/Layout.h</label>
        <link refid="_layout_8h_source"/>
        <childnode refid="12618" relation="include">
        </childnode>
        <childnode refid="12602" relation="include">
        </childnode>
        <childnode refid="12635" relation="include">
        </childnode>
      </node>
      <node id="12620">
        <label>ATen/SmallVector.h</label>
        <link refid="_small_vector_8h_source"/>
        <childnode refid="12621" relation="include">
        </childnode>
        <childnode refid="12622" relation="include">
        </childnode>
        <childnode refid="12607" relation="include">
        </childnode>
        <childnode refid="12611" relation="include">
        </childnode>
        <childnode refid="12623" relation="include">
        </childnode>
        <childnode refid="12624" relation="include">
        </childnode>
        <childnode refid="12606" relation="include">
        </childnode>
        <childnode refid="12625" relation="include">
        </childnode>
        <childnode refid="12600" relation="include">
        </childnode>
        <childnode refid="12626" relation="include">
        </childnode>
        <childnode refid="12605" relation="include">
        </childnode>
        <childnode refid="12604" relation="include">
        </childnode>
        <childnode refid="12597" relation="include">
        </childnode>
      </node>
      <node id="12622">
        <label>algorithm</label>
      </node>
      <node id="12647">
        <label>ATen/Generator.h</label>
        <link refid="_generator_8h_source"/>
        <childnode refid="12639" relation="include">
        </childnode>
      </node>
      <node id="12624">
        <label>cstring</label>
      </node>
      <node id="12600">
        <label>memory</label>
      </node>
      <node id="12606">
        <label>initializer_list</label>
      </node>
      <node id="12670">
        <label>ATen/Formatting.h</label>
        <link refid="_formatting_8h_source"/>
        <childnode refid="12635" relation="include">
        </childnode>
        <childnode refid="12646" relation="include">
        </childnode>
        <childnode refid="12637" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="native__test_8cpp_1a656eb5868e824d59f489f910db438420" prot="public" static="no">
        <name>CATCH_CONFIG_MAIN</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/test/native_test.cpp" line="1" column="9" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/test/native_test.cpp" bodystart="1" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="native__test_8cpp_1ad90599850f5b972857a2135d404e7766" prot="public" static="no">
        <name>REQUIRE_EQUAL</name>
        <param><defname>t1</defname></param>
        <param><defname>t2</defname></param>
        <initializer>REQUIRE(t1.equal(t2));</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/test/native_test.cpp" line="9" column="9" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/test/native_test.cpp" bodystart="9" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="native__test_8cpp_1ac7e93bafce4f1ec603bf937420466ac5" prot="public" static="no">
        <name>REQUIRE_ALLCLOSE</name>
        <param><defname>t1</defname></param>
        <param><defname>t2</defname></param>
        <initializer>REQUIRE(t1.is_same_size(t2));    \
  REQUIRE(t1.allclose(t2));</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/test/native_test.cpp" line="12" column="9" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/test/native_test.cpp" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="native__test_8cpp_1a320e102008887b26427cc2a07e8f2e05" prot="public" static="no">
        <name>REQUIRE_ALLCLOSE_TOLERANCES</name>
        <param><defname>t1</defname></param>
        <param><defname>t2</defname></param>
        <param><defname>atol</defname></param>
        <param><defname>rtol</defname></param>
        <initializer>REQUIRE(t1.is_same_size(t2));    \
  REQUIRE(t1.allclose(t2, atol, rtol));</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/test/native_test.cpp" line="16" column="9" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/test/native_test.cpp" bodystart="16" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="native__test_8cpp_1ac66b6423e0be8214440fbc40604a1114" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void requireEqualTensorList</definition>
        <argsstring>(TensorList t1, TensorList t2)</argsstring>
        <name>requireEqualTensorList</name>
        <param>
          <type><ref refid="classat_1_1_array_ref" kindref="compound">TensorList</ref></type>
          <declname>t1</declname>
        </param>
        <param>
          <type><ref refid="classat_1_1_array_ref" kindref="compound">TensorList</ref></type>
          <declname>t2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/test/native_test.cpp" line="20" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/test/native_test.cpp" bodystart="20" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="native__test_8cpp_1a12ed92a52ae1942ab3221ad99d600185" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test</definition>
        <argsstring>(Type &amp;T, Type &amp;AccT)</argsstring>
        <name>test</name>
        <param>
          <type><ref refid="structat_1_1_type" kindref="compound">Type</ref> &amp;</type>
          <declname>T</declname>
        </param>
        <param>
          <type><ref refid="structat_1_1_type" kindref="compound">Type</ref> &amp;</type>
          <declname>AccT</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/test/native_test.cpp" line="27" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/test/native_test.cpp" bodystart="27" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="native__test_8cpp_1a1592dc32bd4acc1f3559588b4aff16cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;native test CPU&quot;, &quot;[cpu]&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;native test CPU&quot;</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
          <array>[cpu]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/test/native_test.cpp" line="181" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/test/native_test.cpp" bodystart="181" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="native__test_8cpp_1ad3eb6d4f436e4ec33223507cb0ddfbe3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;native test CUDA&quot;, &quot;[cuda]&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;native test CUDA&quot;</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
          <array>[cuda]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/test/native_test.cpp" line="187" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/test/native_test.cpp" bodystart="187" bodyend="193"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#define<sp/>CATCH_CONFIG_MAIN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;catch.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ATen/ATen.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;test_seed.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceat" kindref="compound">at</ref>;</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REQUIRE_EQUAL(t1,<sp/>t2)<sp/>\</highlight></codeline>
<codeline lineno="10"><highlight class="preprocessor"><sp/><sp/>REQUIRE(t1.equal(t2));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REQUIRE_ALLCLOSE(t1,<sp/>t2)<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="13"><highlight class="preprocessor"><sp/><sp/>REQUIRE(t1.is_same_size(t2));<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="14"><highlight class="preprocessor"><sp/><sp/>REQUIRE(t1.allclose(t2));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REQUIRE_ALLCLOSE_TOLERANCES(t1,<sp/>t2,<sp/>atol,<sp/>rtol)<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="17"><highlight class="preprocessor"><sp/><sp/>REQUIRE(t1.is_same_size(t2));<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="18"><highlight class="preprocessor"><sp/><sp/>REQUIRE(t1.allclose(t2,<sp/>atol,<sp/>rtol));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>requireEqualTensorList(<ref refid="classat_1_1_array_ref" kindref="compound">TensorList</ref><sp/>t1,<sp/><ref refid="classat_1_1_array_ref" kindref="compound">TensorList</ref><sp/>t2)<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/>REQUIRE(t1.<ref refid="classat_1_1_array_ref_1a7b5593a67d764c4c4443e31fa34211e7" kindref="member">size</ref>()<sp/>==<sp/>t2.<ref refid="classat_1_1_array_ref_1a7b5593a67d764c4c4443e31fa34211e7" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>t1.<ref refid="classat_1_1_array_ref_1a7b5593a67d764c4c4443e31fa34211e7" kindref="member">size</ref>();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE_EQUAL(t1[<sp/>i<sp/>],<sp/>t2[<sp/>i<sp/>]);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="25"><highlight class="normal">}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test(<ref refid="structat_1_1_type" kindref="compound">Type</ref><sp/>&amp;<sp/>T,<sp/><ref refid="structat_1_1_type" kindref="compound">Type</ref><sp/>&amp;<sp/>AccT)<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>randn({3,<sp/>3},<sp/>T);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>SECTION(<sp/></highlight><highlight class="stringliteral">&quot;split:<sp/>test<sp/>method,<sp/>type,<sp/>namespace<sp/>give<sp/>same<sp/>result&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>splitMethod<sp/>=<sp/>t.split(1,<sp/>0);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>splitType<sp/>=<sp/>T.split(t,<sp/>1,<sp/>0);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>splitNs<sp/>=<sp/>at::split(t,<sp/>1,<sp/>0);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>requireEqualTensorList(splitMethod,<sp/>splitType);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>requireEqualTensorList(splitMethod,<sp/>splitNs);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>rebuilding<sp/>with<sp/>cat</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE_EQUAL(at::cat(splitMethod,<sp/>0),<sp/>t);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>SECTION(<sp/></highlight><highlight class="stringliteral">&quot;chunk:<sp/>test<sp/>method,<sp/>type,<sp/>namespace<sp/>give<sp/>same<sp/>result&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>method,<sp/>type,<sp/>namespace<sp/>give<sp/>same<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>chunkMethod<sp/>=<sp/>t.chunk(3,<sp/>0);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>chunkType<sp/>=<sp/>T.chunk(t,<sp/>3,<sp/>0);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>chunkNs<sp/>=<sp/>at::chunk(t,<sp/>3,<sp/>0);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>requireEqualTensorList(chunkMethod,<sp/>chunkType);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>requireEqualTensorList(chunkMethod,<sp/>chunkNs);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>rebuilding<sp/>with<sp/>cat</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE_EQUAL(at::cat(chunkMethod,<sp/>0),<sp/>t);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>stack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>SECTION(<sp/></highlight><highlight class="stringliteral">&quot;stack&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>rand({2,<sp/>3,<sp/>4});</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>rand({2,<sp/>3,<sp/>4});</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z<sp/>=<sp/>rand({2,<sp/>3,<sp/>4});</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int64_t<sp/>dim<sp/>=<sp/>0;<sp/>dim<sp/>&lt;<sp/>4;<sp/>++dim)<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>res<sp/>=<sp/>at::stack({x,<sp/>y,<sp/>z},<sp/>dim);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>res_neg<sp/>=<sp/>at::stack({x,<sp/>y,<sp/>z},<sp/>dim<sp/>-<sp/>4);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int64_t&gt;<sp/>expected_size;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>expected_size.insert(expected_size.end(),<sp/>x.sizes().begin(),<sp/>x.sizes().begin()<sp/>+<sp/>dim);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>expected_size.insert(expected_size.end(),<sp/>3);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>expected_size.insert(expected_size.end(),<sp/>x.sizes().begin()<sp/>+<sp/>dim,<sp/>x.sizes().end());</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>REQUIRE_EQUAL(res,<sp/>res_neg);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>REQUIRE(res.sizes().equals(expected_size));</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>REQUIRE_EQUAL(res.select(dim,<sp/>0),<sp/>x);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>REQUIRE_EQUAL(res.select(dim,<sp/>1),<sp/>y);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>REQUIRE_EQUAL(res.select(dim,<sp/>2),<sp/>z);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>SECTION(<sp/></highlight><highlight class="stringliteral">&quot;size<sp/>/<sp/>stride&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>scalar<sp/>=<sp/>randn({},<sp/>T);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>REQUIRE_THROWS_WITH(scalar.size(0),<sp/></highlight><highlight class="stringliteral">&quot;dimension<sp/>specified<sp/>as<sp/>0<sp/>but<sp/>tensor<sp/>has<sp/>no<sp/>dimensions&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE_THROWS_WITH(scalar.size(-1),<sp/></highlight><highlight class="stringliteral">&quot;dimension<sp/>specified<sp/>as<sp/>-1<sp/>but<sp/>tensor<sp/>has<sp/>no<sp/>dimensions&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE_THROWS_WITH(scalar.stride(0),<sp/></highlight><highlight class="stringliteral">&quot;dimension<sp/>specified<sp/>as<sp/>0<sp/>but<sp/>tensor<sp/>has<sp/>no<sp/>dimensions&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE_THROWS_WITH(scalar.stride(-1),<sp/></highlight><highlight class="stringliteral">&quot;dimension<sp/>specified<sp/>as<sp/>-1<sp/>but<sp/>tensor<sp/>has<sp/>no<sp/>dimensions&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>empty<sp/>=<sp/>randn({0},<sp/>T);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(empty.size(0)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(empty.size(-1)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(empty.stride(0)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(empty.stride(-1)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>matmul</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>SECTION(<sp/></highlight><highlight class="stringliteral">&quot;matmul&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>scalar<sp/>=<sp/>randn({},<sp/>T);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>d1<sp/>=<sp/>randn({3},<sp/>T);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>d2<sp/>=<sp/>randn({2,<sp/>3},<sp/>T);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>0-d</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE_THROWS_WITH(scalar.matmul(d2),<sp/>Catch::StartsWith(</highlight><highlight class="stringliteral">&quot;both<sp/>arguments<sp/>to<sp/>matmul<sp/>need<sp/>to<sp/>be<sp/>at<sp/>least<sp/>1D&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE_THROWS_WITH(d2.matmul(scalar),<sp/>Catch::StartsWith(</highlight><highlight class="stringliteral">&quot;both<sp/>arguments<sp/>to<sp/>matmul<sp/>need<sp/>to<sp/>be<sp/>at<sp/>least<sp/>1D&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1-d</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE_ALLCLOSE(d1.matmul(d1),<sp/>d1.dot(d1));</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE_ALLCLOSE(d2.matmul(d1),<sp/>d2.mv(d1));</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>d1o<sp/>=<sp/>randn({2},<sp/>T);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE_ALLCLOSE(d1o.matmul(d2),<sp/>d1o.unsqueeze(0).mm(d2).squeeze(0));</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2-d</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>d2o<sp/>=<sp/>randn({3,<sp/>5},<sp/>T);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE_ALLCLOSE(d2.matmul(d2o),<sp/>d2.mm(d2o));</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&gt;<sp/>2-d,<sp/>1-d</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>d3<sp/>=<sp/>randn({5,<sp/>2,<sp/>3},<sp/>T);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE_ALLCLOSE(d3.matmul(d1),<sp/>d3.bmm(d1.view({1,<sp/>3,<sp/>1}).expand({5,<sp/>3,<sp/>1})).view({5,<sp/>2}));</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE_ALLCLOSE(d1o.matmul(d3),<sp/>d1o.expand({5,<sp/>1,<sp/>2}).bmm(d3).view({5,<sp/>3}));</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>d5<sp/>=<sp/>randn({3,<sp/>2,<sp/>4,<sp/>2,<sp/>3},<sp/>T);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE_ALLCLOSE(d5.matmul(d1),<sp/>d5.view({24,<sp/>2,<sp/>3}).bmm(d1.view({1,<sp/>3,<sp/>1}).expand({24,<sp/>3,<sp/>1})).view({3,<sp/>2,<sp/>4,<sp/>2}));</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE_ALLCLOSE(d1o.matmul(d5),<sp/>d1o.expand({24,<sp/>1,<sp/>2}).bmm(d5.view({24,<sp/>2,<sp/>3})).view({3,<sp/>2,<sp/>4,<sp/>3}));</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&gt;<sp/>2-d,<sp/>2-d</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>use<sp/>a<sp/>&quot;folding&quot;<sp/>algorithm<sp/>in<sp/>this<sp/>case<sp/>of<sp/>matmul,<sp/>so<sp/>the<sp/>direct<sp/>comparison<sp/>to<sp/>bmm<sp/>doesn&apos;t<sp/>work;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>instead,<sp/>compare<sp/>to<sp/>the<sp/>higher<sp/>precision<sp/>computation<sp/>(technically,<sp/>we<sp/>should<sp/>always<sp/>do<sp/>this).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Tolerances<sp/>are<sp/>selected<sp/>empirically.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>atol<sp/>=<sp/>1e-04;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rtol<sp/>=<sp/>1e-06;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>d2<sp/>=<sp/>randn({3,<sp/>4},<sp/>T);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>d2o<sp/>=<sp/>randn({4,<sp/>2},<sp/>T);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>d5.matmul(d2).toType(AccT);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>d5Acc<sp/>=<sp/>d5.toType(AccT);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>d2Acc<sp/>=<sp/>d2.toType(AccT);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>acc_result<sp/>=<sp/>d5Acc.view({24,<sp/>2,<sp/>3}).bmm(d2Acc.expand({24,<sp/>3,<sp/>4})).view({3,<sp/>2,<sp/>4,<sp/>2,<sp/>4});</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE_ALLCLOSE_TOLERANCES(result,<sp/>acc_result,<sp/>atol,<sp/>rtol);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE_ALLCLOSE(d2o.matmul(d5),<sp/>d2o.expand({24,<sp/>4,<sp/>2}).bmm(d5.view({24,<sp/>2,<sp/>3})).view({3,<sp/>2,<sp/>4,<sp/>4,<sp/>3}));</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&gt;<sp/>2-d,<sp/>&gt;<sp/>2-d</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>d5o<sp/>=<sp/>randn({2,<sp/>1,<sp/>2,<sp/>4,<sp/>3,<sp/>2},<sp/>T);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>d5_bmm_view<sp/>=<sp/>d5.expand({2,<sp/>3,<sp/>2,<sp/>4,<sp/>2,<sp/>3}).contiguous().view({48,<sp/>2,<sp/>3});</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>d5o_bmm_view<sp/>=<sp/>d5o.expand({2,<sp/>3,<sp/>2,<sp/>4,<sp/>3,<sp/>2}).contiguous().view({48,<sp/>3,<sp/>2});</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE_ALLCLOSE(d5.matmul(d5o),<sp/>d5_bmm_view.bmm(d5o_bmm_view).view({2,<sp/>3,<sp/>2,<sp/>4,<sp/>2,<sp/>2}));</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>non-expandable<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>d5wrong<sp/>=<sp/>randn({2,<sp/>4,<sp/>2,<sp/>4,<sp/>3,<sp/>2},<sp/>T);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE_THROWS_WITH(d5.matmul(d5wrong),<sp/>Catch::Contains(</highlight><highlight class="stringliteral">&quot;must<sp/>match<sp/>the<sp/>size&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>_standard_gamma_grad</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>SECTION(<sp/></highlight><highlight class="stringliteral">&quot;_standard_gamma_grad&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>empty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>empty<sp/>=<sp/>ones({0},<sp/>T);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE_EQUAL(empty,<sp/>empty._standard_gamma_grad(empty));</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>scalar<sp/>equals<sp/>one<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>one_scalar<sp/>=<sp/>ones({},<sp/>T).mul(5);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>one_with_dim<sp/>=<sp/>ones({1},<sp/>T).mul(5);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE_ALLCLOSE(one_scalar._standard_gamma_grad(one_scalar),</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>one_with_dim._standard_gamma_grad(one_with_dim).sum());</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>mixing<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>t1<sp/>=<sp/>randn({3,<sp/>4},<sp/>T);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>t2<sp/>=<sp/>randn({3,<sp/>4},<sp/>T).toType(kDouble);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE_THROWS_WITH(t1._standard_gamma_grad(t2),<sp/>Catch::StartsWith(</highlight><highlight class="stringliteral">&quot;expected<sp/>scalar<sp/>type&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>SECTION(<sp/></highlight><highlight class="stringliteral">&quot;where&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>empty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>empty<sp/>=<sp/>ones({0},<sp/>T);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;bT<sp/>=<sp/>T.toScalarType(ScalarType::Byte);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>empty_byte<sp/>=<sp/>ones({0},<sp/>bT);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE_EQUAL(empty,<sp/>at::where(empty_byte,<sp/>empty,<sp/>empty));</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>scalar<sp/>equals<sp/>one<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>x_scalar<sp/>=<sp/>ones({},<sp/>T).mul(5);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>y_scalar<sp/>=<sp/>ones({},<sp/>T).mul(7);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cond_scalar<sp/>=<sp/>zeros({},<sp/>bT);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>x_1d<sp/>=<sp/>x_scalar.unsqueeze(0);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>y_1d<sp/>=<sp/>y_scalar.unsqueeze(0);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cond_1d<sp/>=<sp/>cond_scalar.unsqueeze(0);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE_ALLCLOSE(at::where(cond_scalar,<sp/>x_scalar,<sp/>y_scalar).unsqueeze(0),</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>at::where(cond_1d,<sp/>x_1d,<sp/>y_1d));</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal">}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal">TEST_CASE(<sp/></highlight><highlight class="stringliteral">&quot;native<sp/>test<sp/>CPU&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[cpu]&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>manual_seed(123,<sp/>at::Backend::CPU);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>test(CPU(kFloat),<sp/>CPU(kDouble));</highlight></codeline>
<codeline lineno="185"><highlight class="normal">}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal">TEST_CASE(<sp/></highlight><highlight class="stringliteral">&quot;native<sp/>test<sp/>CUDA&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[cuda]&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>manual_seed(123,<sp/>at::Backend::CUDA);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(at::hasCUDA())<sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>test(CUDA(kFloat),<sp/>CUDA(kDouble));</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/test/native_test.cpp"/>
  </compounddef>
</doxygen>
