<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="aten_2src_2_a_ten_2templates_2tensor_8h" kind="file" language="C++">
    <compoundname>Tensor.h</compoundname>
    <includes refid="_generator_8h" local="yes">ATen/Generator.h</includes>
    <includes refid="_scalar_8h" local="yes">ATen/Scalar.h</includes>
    <includes refid="_scalar_type_8h" local="yes">ATen/ScalarType.h</includes>
    <includes refid="_sparse_tensor_ref_8h" local="yes">ATen/SparseTensorRef.h</includes>
    <includes refid="_storage_8h" local="yes">ATen/Storage.h</includes>
    <includes refid="_tensor_accessor_8h" local="yes">ATen/TensorAccessor.h</includes>
    <includes refid="_tensor_base_8h" local="yes">ATen/TensorBase.h</includes>
    <includes refid="_tensor_impl_8h" local="yes">ATen/TensorImpl.h</includes>
    <includes refid="aten_2src_2_a_ten_2utils_8h" local="yes">ATen/Utils.h</includes>
    <includes refid="_device_8h" local="yes">ATen/Device.h</includes>
    <includes refid="_layout_8h" local="yes">ATen/Layout.h</includes>
    <includes refid="optional_8h" local="yes">ATen/optional.h</includes>
    <incdepgraph>
      <node id="17105">
        <label>ATen/optional.h</label>
        <link refid="optional_8h_source"/>
        <childnode refid="17093" relation="include">
        </childnode>
        <childnode refid="17106" relation="include">
        </childnode>
        <childnode refid="17107" relation="include">
        </childnode>
        <childnode refid="17108" relation="include">
        </childnode>
        <childnode refid="17109" relation="include">
        </childnode>
        <childnode refid="17092" relation="include">
        </childnode>
        <childnode refid="17091" relation="include">
        </childnode>
      </node>
      <node id="17136">
        <label>ATen/Device.h</label>
        <link refid="_device_8h_source"/>
        <childnode refid="17104" relation="include">
        </childnode>
        <childnode refid="17102" relation="include">
        </childnode>
        <childnode refid="17110" relation="include">
        </childnode>
        <childnode refid="17099" relation="include">
        </childnode>
        <childnode refid="17092" relation="include">
        </childnode>
        <childnode refid="17109" relation="include">
        </childnode>
      </node>
      <node id="17126">
        <label>atomic</label>
      </node>
      <node id="17086">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h</label>
        <link refid="aten_2src_2_a_ten_2templates_2tensor_8h"/>
        <childnode refid="17087" relation="include">
        </childnode>
        <childnode refid="17089" relation="include">
        </childnode>
        <childnode refid="17102" relation="include">
        </childnode>
        <childnode refid="17132" relation="include">
        </childnode>
        <childnode refid="17133" relation="include">
        </childnode>
        <childnode refid="17135" relation="include">
        </childnode>
        <childnode refid="17124" relation="include">
        </childnode>
        <childnode refid="17125" relation="include">
        </childnode>
        <childnode refid="17129" relation="include">
        </childnode>
        <childnode refid="17136" relation="include">
        </childnode>
        <childnode refid="17137" relation="include">
        </childnode>
        <childnode refid="17105" relation="include">
        </childnode>
      </node>
      <node id="17109">
        <label>functional</label>
      </node>
      <node id="17102">
        <label>ATen/ScalarType.h</label>
        <link refid="_scalar_type_8h_source"/>
        <childnode refid="17103" relation="include">
        </childnode>
        <childnode refid="17094" relation="include">
        </childnode>
        <childnode refid="17095" relation="include">
        </childnode>
        <childnode refid="17097" relation="include">
        </childnode>
        <childnode refid="17123" relation="include">
        </childnode>
      </node>
      <node id="17096">
        <label>limits</label>
      </node>
      <node id="17090">
        <label>assert.h</label>
      </node>
      <node id="17129">
        <label>ATen/Utils.h</label>
        <link refid="aten_2src_2_a_ten_2utils_8h_source"/>
        <childnode refid="17094" relation="include">
        </childnode>
        <childnode refid="17103" relation="include">
        </childnode>
        <childnode refid="17104" relation="include">
        </childnode>
        <childnode refid="17128" relation="include">
        </childnode>
        <childnode refid="17116" relation="include">
        </childnode>
        <childnode refid="17113" relation="include">
        </childnode>
        <childnode refid="17130" relation="include">
        </childnode>
        <childnode refid="17131" relation="include">
        </childnode>
      </node>
      <node id="17118">
        <label>iterator</label>
      </node>
      <node id="17089">
        <label>ATen/Scalar.h</label>
        <link refid="_scalar_8h_source"/>
        <childnode refid="17090" relation="include">
        </childnode>
        <childnode refid="17088" relation="include">
        </childnode>
        <childnode refid="17091" relation="include">
        </childnode>
        <childnode refid="17092" relation="include">
        </childnode>
        <childnode refid="17093" relation="include">
        </childnode>
        <childnode refid="17094" relation="include">
        </childnode>
        <childnode refid="17095" relation="include">
        </childnode>
        <childnode refid="17102" relation="include">
        </childnode>
        <childnode refid="17124" relation="include">
        </childnode>
        <childnode refid="17129" relation="include">
        </childnode>
      </node>
      <node id="17134">
        <label>TH/THStorageFunctions.hpp</label>
      </node>
      <node id="17097">
        <label>cstdint</label>
      </node>
      <node id="17088">
        <label>stdint.h</label>
      </node>
      <node id="17098">
        <label>cmath</label>
      </node>
      <node id="17108">
        <label>cassert</label>
      </node>
      <node id="17100">
        <label>Half-inl.h</label>
        <link refid="_half-inl_8h_source"/>
        <childnode refid="17094" relation="include">
        </childnode>
        <childnode refid="17101" relation="include">
        </childnode>
        <childnode refid="17096" relation="include">
        </childnode>
      </node>
      <node id="17091">
        <label>stdexcept</label>
      </node>
      <node id="17131">
        <label>numeric</label>
      </node>
      <node id="17125">
        <label>ATen/TensorImpl.h</label>
        <link refid="_tensor_impl_8h_source"/>
        <childnode refid="17126" relation="include">
        </childnode>
        <childnode refid="17119" relation="include">
        </childnode>
        <childnode refid="17127" relation="include">
        </childnode>
        <childnode refid="17102" relation="include">
        </childnode>
        <childnode refid="17105" relation="include">
        </childnode>
      </node>
      <node id="17127">
        <label>ATen/Retainable.h</label>
        <link refid="_retainable_8h_source"/>
        <childnode refid="17126" relation="include">
        </childnode>
      </node>
      <node id="17095">
        <label>ATen/Half.h</label>
        <link refid="_half_8h_source"/>
        <childnode refid="17094" relation="include">
        </childnode>
        <childnode refid="17096" relation="include">
        </childnode>
        <childnode refid="17092" relation="include">
        </childnode>
        <childnode refid="17097" relation="include">
        </childnode>
        <childnode refid="17091" relation="include">
        </childnode>
        <childnode refid="17093" relation="include">
        </childnode>
        <childnode refid="17098" relation="include">
        </childnode>
        <childnode refid="17099" relation="include">
        </childnode>
        <childnode refid="17100" relation="include">
        </childnode>
      </node>
      <node id="17124">
        <label>ATen/TensorBase.h</label>
        <link refid="_tensor_base_8h_source"/>
        <childnode refid="17125" relation="include">
        </childnode>
        <childnode refid="17128" relation="include">
        </childnode>
      </node>
      <node id="17092">
        <label>string</label>
      </node>
      <node id="17111">
        <label>exception</label>
      </node>
      <node id="17128">
        <label>ATen/UndefinedTensor.h</label>
        <link refid="_undefined_tensor_8h_source"/>
        <childnode refid="17125" relation="include">
        </childnode>
      </node>
      <node id="17115">
        <label>AlignOf.h</label>
        <link refid="_align_of_8h_source"/>
        <childnode refid="17110" relation="include">
        </childnode>
      </node>
      <node id="17133">
        <label>ATen/Storage.h</label>
        <link refid="_storage_8h_source"/>
        <childnode refid="17089" relation="include">
        </childnode>
        <childnode refid="17134" relation="include">
        </childnode>
      </node>
      <node id="17112">
        <label>ostream</label>
      </node>
      <node id="17103">
        <label>ATen/ArrayRef.h</label>
        <link refid="_array_ref_8h_source"/>
        <childnode refid="17104" relation="include">
        </childnode>
        <childnode refid="17114" relation="include">
        </childnode>
        <childnode refid="17121" relation="include">
        </childnode>
        <childnode refid="17118" relation="include">
        </childnode>
        <childnode refid="17122" relation="include">
        </childnode>
      </node>
      <node id="17132">
        <label>ATen/SparseTensorRef.h</label>
        <link refid="_sparse_tensor_ref_8h_source"/>
      </node>
      <node id="17094">
        <label>ATen/ATenGeneral.h</label>
        <link refid="_a_ten_general_8h_source"/>
      </node>
      <node id="17135">
        <label>ATen/TensorAccessor.h</label>
        <link refid="_tensor_accessor_8h_source"/>
        <childnode refid="17110" relation="include">
        </childnode>
        <childnode refid="17088" relation="include">
        </childnode>
        <childnode refid="17102" relation="include">
        </childnode>
      </node>
      <node id="17130">
        <label>typeinfo</label>
      </node>
      <node id="17122">
        <label>vector</label>
      </node>
      <node id="17120">
        <label>new</label>
      </node>
      <node id="17093">
        <label>utility</label>
      </node>
      <node id="17121">
        <label>array</label>
      </node>
      <node id="17113">
        <label>sstream</label>
      </node>
      <node id="17099">
        <label>iosfwd</label>
      </node>
      <node id="17117">
        <label>cstdlib</label>
      </node>
      <node id="17123">
        <label>iostream</label>
      </node>
      <node id="17110">
        <label>cstddef</label>
      </node>
      <node id="17104">
        <label>ATen/Error.h</label>
        <link refid="_error_8h_source"/>
        <childnode refid="17094" relation="include">
        </childnode>
        <childnode refid="17105" relation="include">
        </childnode>
        <childnode refid="17110" relation="include">
        </childnode>
        <childnode refid="17111" relation="include">
        </childnode>
        <childnode refid="17112" relation="include">
        </childnode>
        <childnode refid="17113" relation="include">
        </childnode>
        <childnode refid="17092" relation="include">
        </childnode>
      </node>
      <node id="17106">
        <label>type_traits</label>
      </node>
      <node id="17137">
        <label>ATen/Layout.h</label>
        <link refid="_layout_8h_source"/>
        <childnode refid="17102" relation="include">
        </childnode>
        <childnode refid="17104" relation="include">
        </childnode>
        <childnode refid="17123" relation="include">
        </childnode>
      </node>
      <node id="17114">
        <label>ATen/SmallVector.h</label>
        <link refid="_small_vector_8h_source"/>
        <childnode refid="17115" relation="include">
        </childnode>
        <childnode refid="17116" relation="include">
        </childnode>
        <childnode refid="17108" relation="include">
        </childnode>
        <childnode refid="17110" relation="include">
        </childnode>
        <childnode refid="17117" relation="include">
        </childnode>
        <childnode refid="17101" relation="include">
        </childnode>
        <childnode refid="17107" relation="include">
        </childnode>
        <childnode refid="17118" relation="include">
        </childnode>
        <childnode refid="17119" relation="include">
        </childnode>
        <childnode refid="17120" relation="include">
        </childnode>
        <childnode refid="17106" relation="include">
        </childnode>
        <childnode refid="17093" relation="include">
        </childnode>
        <childnode refid="17094" relation="include">
        </childnode>
      </node>
      <node id="17116">
        <label>algorithm</label>
      </node>
      <node id="17087">
        <label>ATen/Generator.h</label>
        <link refid="_generator_8h_source"/>
        <childnode refid="17088" relation="include">
        </childnode>
      </node>
      <node id="17101">
        <label>cstring</label>
      </node>
      <node id="17119">
        <label>memory</label>
      </node>
      <node id="17107">
        <label>initializer_list</label>
      </node>
    </incdepgraph>
    <innerclass refid="structat_1_1_tensor" prot="public">at::Tensor</innerclass>
    <innerclass refid="structat_1_1_weak_tensor" prot="public">at::WeakTensor</innerclass>
    <innernamespace refid="namespaceat">at</innernamespace>
    <innernamespace refid="namespaceat_1_1detail">at::detail</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="aten_2src_2_a_ten_2templates_2tensor_8h_1ab2f6307f866793124e687cff6abee3e1" prot="public" static="no">
        <name>TO_TYPE_DATA</name>
        <param><defname>T</defname></param>
        <param><defname>name</defname></param>
        <param><defname>_</defname></param>
        <initializer>T * to##name##Data() const;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" line="130" column="11" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="aten_2src_2_a_ten_2templates_2tensor_8h_1a301010e894d974a5f09038154cc991ed" prot="public" static="no">
        <name>TO_C_TYPE</name>
        <param><defname>T</defname></param>
        <param><defname>name</defname></param>
        <param><defname>_</defname></param>
        <initializer>T toC##name () const;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h" line="135" column="11"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>${generated_comment}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ATen/Generator.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ATen/Scalar.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ATen/ScalarType.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ATen/SparseTensorRef.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ATen/Storage.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ATen/TensorAccessor.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ATen/TensorBase.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ATen/TensorImpl.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ATen/Utils.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ATen/Device.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ATen/Layout.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ATen/optional.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceat" kindref="compound">at</ref><sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Type;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Tensor;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">TensorOptions;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_data(Tensor&amp;<sp/>tensor,<sp/>Tensor<sp/>new_data);</highlight></codeline>
<codeline lineno="24"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceat" kindref="compound">at</ref><sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tensor<sp/>is<sp/>a<sp/>&quot;generic&quot;<sp/>object<sp/>holding<sp/>a<sp/>pointer<sp/>to<sp/>the<sp/>underlying<sp/>TensorImpl<sp/>object,<sp/>which</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/>has<sp/>an<sp/>embedded<sp/>reference<sp/>count.<sp/>In<sp/>this<sp/>way,<sp/>Tensor<sp/>is<sp/>similar<sp/>to<sp/>boost::intrusive_ptr.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>example:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//<sp/>void<sp/>func(Tensor<sp/>a)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Tensor<sp/>b<sp/>=<sp/>a;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//<sp/>In<sp/>this<sp/>example,<sp/>when<sp/>we<sp/>say<sp/>Tensor<sp/>b<sp/>=<sp/>a,<sp/>we<sp/>are<sp/>creating<sp/>a<sp/>new<sp/>object<sp/>that<sp/>points<sp/>to<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//<sp/>same<sp/>underlying<sp/>TensorImpl,<sp/>and<sp/>bumps<sp/>its<sp/>reference<sp/>count.<sp/>When<sp/>b<sp/>goes<sp/>out<sp/>of<sp/>scope,<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//<sp/>destructor<sp/>decrements<sp/>the<sp/>reference<sp/>count<sp/>by<sp/>calling<sp/>release()<sp/>on<sp/>the<sp/>TensorImpl<sp/>it<sp/>points<sp/>to.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>existing<sp/>constructors,<sp/>operator<sp/>overloads,<sp/>etc.<sp/>take<sp/>care<sp/>to<sp/>implement<sp/>the<sp/>correct<sp/>semantics.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>Tensor<sp/>can<sp/>also<sp/>be<sp/>NULL,<sp/>i.e.<sp/>it<sp/>is<sp/>not<sp/>associated<sp/>with<sp/>any<sp/>underlying<sp/>TensorImpl,<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//<sp/>special<sp/>care<sp/>must<sp/>be<sp/>taken<sp/>to<sp/>handle<sp/>this.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Tensor<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>detail::TensorBase<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>TensorBase<sp/>=<sp/>detail::TensorBase;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>Tensor()<sp/>:<sp/>TensorBase()<sp/>{}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>Tensor(TensorImpl<sp/>*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>retain)<sp/>:<sp/>TensorBase(self,<sp/>retain)<sp/>{}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>Tensor(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TensorBase<sp/>&amp;<sp/>rhs)<sp/>:<sp/>TensorBase(rhs)<sp/>{}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>Tensor(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor<sp/>&amp;<sp/>rhs)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>Tensor(Tensor<sp/>&amp;&amp;<sp/>rhs)<sp/>noexcept<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>reimplemented<sp/>from<sp/>TensorBase<sp/>so<sp/>the<sp/>return<sp/>type<sp/>is<sp/>Tensor<sp/>rather<sp/>than<sp/>TensorBase</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>Tensor<sp/>&amp;<sp/>operator=(Tensor<sp/>&amp;&amp;<sp/>rhs)<sp/>&amp;<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>rhs.swap(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>Tensor<sp/>&amp;<sp/>operator=(Tensor<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>rhs)<sp/>&amp;<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Tensor<sp/>ctor<sp/>retains<sp/>original<sp/>rhs.pImpl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//then<sp/>rhs.pImpl<sp/>is<sp/>swapped<sp/>with<sp/>this-&gt;pImpl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//finally<sp/>Tensor<sp/>dtor<sp/>releases<sp/>rhs.pImpl,<sp/>which<sp/>was<sp/>originally<sp/>this-&gt;pImpl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Tensor(rhs).swap(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Tensor<sp/>&amp;<sp/>operator=(Tensor<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>rhs)<sp/>&amp;&amp;;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>Tensor<sp/>&amp;<sp/>operator=(Scalar<sp/>v)<sp/>&amp;&amp;;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>toString()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pImpl-&gt;toString();</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>IntList<sp/>sizes()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pImpl-&gt;sizes();</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>IntList<sp/>strides()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pImpl-&gt;strides();</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>int64_t<sp/>ndimension()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dim();</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>Type<sp/>&amp;<sp/>type()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pImpl-&gt;type();</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;Storage&gt;<sp/>storage()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pImpl-&gt;storage();</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Tensor<sp/>toType(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Type<sp/>&amp;<sp/>t,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>non_blocking=</highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Tensor<sp/>&amp;<sp/>copy_(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor<sp/>&amp;<sp/>src,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>non_blocking=</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Tensor<sp/>toType(ScalarType<sp/>t)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Tensor<sp/>toBackend(Backend<sp/>b)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>Tensor<sp/><ref refid="structat_1_1_tensor_1af02d1520be96cf71c531b1eb4b20aa9e" kindref="member">to</ref>(Device<sp/><ref refid="structat_1_1_tensor_1ad111f2086ee52a8b4c489033085af9a6" kindref="member">device</ref>,<sp/>ScalarType<sp/><ref refid="structat_1_1_tensor_1acb9e0d281b1fa351141cbc61730db10a" kindref="member">dtype</ref>,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>non_blocking<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>Tensor<sp/><ref refid="structat_1_1_tensor_1af02d1520be96cf71c531b1eb4b20aa9e" kindref="member">to</ref>(ScalarType<sp/><ref refid="structat_1_1_tensor_1acb9e0d281b1fa351141cbc61730db10a" kindref="member">dtype</ref>,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>non_blocking<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>Tensor<sp/><ref refid="structat_1_1_tensor_1af02d1520be96cf71c531b1eb4b20aa9e" kindref="member">to</ref>(Device<sp/><ref refid="structat_1_1_tensor_1ad111f2086ee52a8b4c489033085af9a6" kindref="member">device</ref>,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>non_blocking<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structat_1_1_tensor_1ae5fe03a55a50933e6f2e51c4930ea4cc" kindref="member">is_variable</ref>()<sp/>const<sp/>noexcept;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>Layout<sp/><ref refid="structat_1_1_tensor_1ae354b0becb671916dceec56663fedda1" kindref="member">layout</ref>()<sp/>const<sp/>noexcept;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>ScalarType<sp/><ref refid="structat_1_1_tensor_1acb9e0d281b1fa351141cbc61730db10a" kindref="member">dtype</ref>()<sp/>const<sp/>noexcept;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>Device<sp/><ref refid="structat_1_1_tensor_1ad111f2086ee52a8b4c489033085af9a6" kindref="member">device</ref>()<sp/>const;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>TensorOptions<sp/><ref refid="structat_1_1_tensor_1a7d7c4c2a7b516b004f78940584c4491e" kindref="member">options</ref>()<sp/>const;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>T<sp/>*<sp/>data()<sp/>const;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>unsafeGetTH(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>retain)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pImpl-&gt;unsafeGetTH(retain);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>non-retaining</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>TensorImpl<sp/>*<sp/>unsafeGetTensorImpl()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pImpl;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Purposely<sp/>not<sp/>defined<sp/>here<sp/>to<sp/>avoid<sp/>inlining</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>print()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//toLongData(),<sp/>toFloatData()<sp/>etc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>TO_TYPE_DATA(T,name,_)<sp/>\</highlight></codeline>
<codeline lineno="131"><highlight class="preprocessor"><sp/><sp/>T<sp/>*<sp/>to##name##Data()<sp/>const;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>AT_FORALL_SCALAR_TYPES(TO_TYPE_DATA)</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>TO_TYPE_DATA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>TO_C_TYPE(T,name,_)<sp/>\</highlight></codeline>
<codeline lineno="136"><highlight class="preprocessor"><sp/><sp/>T<sp/>toC##name<sp/>()<sp/>const;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>AT_FORALL_SCALAR_TYPES(TO_C_TYPE)</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="preprocessor">#undef<sp/>TO_C_TYPE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>TensorAccessor&lt;T,N&gt;<sp/>accessor()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert(N<sp/>&gt;<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;accessor<sp/>is<sp/>used<sp/>for<sp/>indexing<sp/>tensor,<sp/>for<sp/>scalars<sp/>use<sp/>*data&lt;T&gt;()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>AT_CHECK(dim()<sp/>==<sp/>N,<sp/></highlight><highlight class="stringliteral">&quot;expected<sp/>&quot;</highlight><highlight class="normal">,<sp/>N,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>dims<sp/>but<sp/>tensor<sp/>has<sp/>&quot;</highlight><highlight class="normal">,<sp/>dim());</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TensorAccessor&lt;T,N&gt;(data&lt;T&gt;(),sizes().data(),strides().data());</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>Tensor<sp/>operator-()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>Tensor&amp;<sp/>operator+=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor<sp/>&amp;<sp/>other);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>Tensor&amp;<sp/>operator+=(Scalar<sp/>other);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>Tensor&amp;<sp/>operator-=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor<sp/>&amp;<sp/>other);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>Tensor&amp;<sp/>operator-=(Scalar<sp/>other);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>Tensor&amp;<sp/>operator*=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor<sp/>&amp;<sp/>other);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>Tensor&amp;<sp/>operator*=(Scalar<sp/>other);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>Tensor&amp;<sp/>operator/=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor<sp/>&amp;<sp/>other);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>Tensor&amp;<sp/>operator/=(Scalar<sp/>other);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>Tensor<sp/>operator[](Scalar<sp/>index)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>Tensor<sp/>operator[](Tensor<sp/>index)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>Tensor<sp/>operator[](int64_t<sp/>index)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>~~~~~<sp/>Autograd<sp/>API<sp/>~~~~~</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>Tensor&amp;<sp/>set_requires_grad(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>requires_grad)<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>pImpl-&gt;set_requires_grad(requires_grad);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceat_1a0ec437861d65a58ca5118c6493967d16" kindref="member">requires_grad</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pImpl-&gt;requires_grad();</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>Tensor&amp;<sp/>grad()<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pImpl-&gt;grad();</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/>grad()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pImpl-&gt;grad();</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>Tensor<sp/>detach()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pImpl-&gt;detach();</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>detach_()<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>pImpl-&gt;detach_();</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structat_1_1_tensor_1a2e70953ca9af09ced061b89433719d06" kindref="member">backward</ref>(</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classat_1_1optional" kindref="compound">at::optional&lt;Tensor&gt;</ref><sp/>gradient<sp/>=<sp/>at::nullopt,</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>keep_graph<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>create_graph<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>detail::set_data(Tensor&amp;<sp/>tensor,<sp/>Tensor<sp/>new_data);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>STOP.<sp/><sp/>Thinking<sp/>of<sp/>adding<sp/>a<sp/>method<sp/>here,<sp/>which<sp/>only<sp/>makes<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>other<sp/>ATen<sp/>methods?<sp/><sp/>Define<sp/>it<sp/>in<sp/>native_functions.yaml.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//example</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Tensor<sp/>*<sp/>add(Tensor<sp/>&amp;<sp/>b);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>${tensor_method_declarations}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>m(F<sp/>func,<sp/>Args&amp;&amp;...<sp/>params)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/>decltype(func(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>std::forward&lt;Args&gt;(params)...))<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>func(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>std::forward&lt;Args&gt;(params)...);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">WeakTensor;</highlight></codeline>
<codeline lineno="205"><highlight class="normal">};</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">WeakTensor<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>detail::WeakTensorBase<sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>WeakTensorBase<sp/>=<sp/>detail::WeakTensorBase;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>WeakTensor()<sp/>:<sp/>WeakTensorBase()<sp/>{}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>WeakTensor(TensorImpl<sp/>*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>retain)<sp/>:<sp/>WeakTensorBase(self,<sp/>retain)<sp/>{}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>WeakTensor(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>WeakTensor<sp/>&amp;<sp/>rhs)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>WeakTensor(WeakTensor<sp/>&amp;&amp;<sp/>rhs)<sp/>noexcept<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>WeakTensor(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/>t)<sp/>:<sp/>WeakTensorBase(t.pImpl,<sp/>true)<sp/>{}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>reimplemented<sp/>from<sp/>TensorBase<sp/>so<sp/>the<sp/>return<sp/>type<sp/>is<sp/>WeakTensor<sp/>rather<sp/>than<sp/>TensorBase</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>WeakTensor<sp/>&amp;<sp/>operator=(WeakTensor<sp/>&amp;&amp;<sp/>rhs)<sp/>&amp;<sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>rhs.swap(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>WeakTensor<sp/>&amp;<sp/>operator=(WeakTensor<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>rhs)<sp/>&amp;<sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Tensor<sp/>ctor<sp/>retains<sp/>original<sp/>rhs.pImpl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//then<sp/>rhs.pImpl<sp/>is<sp/>swapped<sp/>with<sp/>this-&gt;pImpl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//finally<sp/>Tensor<sp/>dtor<sp/>releases<sp/>rhs.pImpl,<sp/>which<sp/>was<sp/>originally<sp/>this-&gt;pImpl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>WeakTensor(rhs).swap(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>WeakTensor<sp/>&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>WeakTensor(t.pImpl,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">).swap(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>non-retaining</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>TensorImpl<sp/>*<sp/>unsafeGetTensorImpl()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pImpl;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>XXX:<sp/>this<sp/>can<sp/>return<sp/>undefined<sp/>tensors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Ideally<sp/>it<sp/>would<sp/>be<sp/>at::optional&lt;Tensor&gt;,<sp/>but<sp/>MSVC<sp/>is<sp/>too<sp/>cool<sp/>for<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>Tensor<sp/>lock()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pImpl-&gt;weak_lock()<sp/>?<sp/>Tensor(pImpl,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>:<sp/>Tensor();</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="normal">};</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_data(Tensor&amp;<sp/>tensor,<sp/>Tensor<sp/>new_data)<sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>tensor.pImpl-&gt;set_data(new_data);</highlight></codeline>
<codeline lineno="248"><highlight class="normal">}</highlight></codeline>
<codeline lineno="249"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>at</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h"/>
  </compounddef>
</doxygen>
