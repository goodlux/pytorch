<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="avx__mathfun_8h" kind="file" language="C++">
    <compoundname>avx_mathfun.h</compoundname>
    <includes refid="native_2cpu_2intrinsics_8h" local="yes">Intrinsics.h</includes>
    <incdepgraph>
      <node id="4733">
        <label>Intrinsics.h</label>
        <link refid="native_2cpu_2intrinsics_8h_source"/>
      </node>
      <node id="4732">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h</label>
        <link refid="avx__mathfun_8h"/>
        <childnode refid="4733" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="unionimm__xmm__union" prot="public">imm_xmm_union</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="avx__mathfun_8h_1ad6057d3c7a7ef1762d442db92721f6b0" prot="public" static="no">
        <name>_PI32AVX_CONST</name>
        <param><defname>Name</defname></param>
        <param><defname>Val</defname></param>
        <initializer>static const ALIGN32_BEG int _pi32avx_##Name[4] = { Val, Val, Val, Val }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="47" column="9" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="avx__mathfun_8h_1a7efd68f1443c3fa1f66c38b0687adc9f" prot="public" static="no">
        <name>_PS256_CONST</name>
        <param><defname>Name</defname></param>
        <param><defname>Val</defname></param>
        <initializer>static const ALIGN32_BEG float _ps256_##Name[8] = { Val, Val, Val, Val, Val, Val, Val, Val }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="57" column="9" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="avx__mathfun_8h_1a550ff513fa785ca962a838ffe0a74649" prot="public" static="no">
        <name>_PI32_CONST256</name>
        <param><defname>Name</defname></param>
        <param><defname>Val</defname></param>
        <initializer>static const ALIGN32_BEG int _pi32_256_##Name[8] = { Val, Val, Val, Val, Val, Val, Val, Val }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="59" column="9" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="avx__mathfun_8h_1a1d259635492c0392b720facecafba1a2" prot="public" static="no">
        <name>_PS256_CONST_TYPE</name>
        <param><defname>Name</defname></param>
        <param><defname>Type</defname></param>
        <param><defname>Val</defname></param>
        <initializer>static const ALIGN32_BEG Type _ps256_##Name[8] = { Val, Val, Val, Val, Val, Val, Val, Val }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="61" column="9" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="avx__mathfun_8h_1ad6a39a8c2a9e16b3d4c7d7cd426de8f0" prot="public" static="no">
        <name>COPY_IMM_TO_XMM</name>
        <param><defname>imm_</defname></param>
        <param><defname>xmm0_</defname></param>
        <param><defname>xmm1_</defname></param>
        <initializer>{    \
    <ref refid="unionimm__xmm__union" kindref="compound">imm_xmm_union</ref> u __attribute__((aligned(32)));  \
    u.imm = imm_;				   \
    xmm0_ = u.xmm[0];                            \
    xmm1_ = u.xmm[1];                            \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="101" column="9" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="avx__mathfun_8h_1a48bd2b98e231a3093c3d32b671d72e69" prot="public" static="no">
        <name>COPY_XMM_TO_IMM</name>
        <param><defname>xmm0_</defname></param>
        <param><defname>xmm1_</defname></param>
        <param><defname>imm_</defname></param>
        <initializer>{                       \
    <ref refid="unionimm__xmm__union" kindref="compound">imm_xmm_union</ref> u __attribute__((aligned(32))); \
    u.xmm[0]=xmm0_; u.xmm[1]=xmm1_; imm_ = u.imm; \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="108" column="9" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="avx__mathfun_8h_1aa44bb50fc88ec84f1fa3bb4e375abd8c" prot="public" static="no">
        <name>AVX2_BITOP_USING_SSE2</name>
        <param><defname>fn</defname></param>
        <initializer>static inline v8si _mm256_##fn(v8si x, int a) \
{ \
  /* use SSE2 instruction to perform the bitop AVX2 */ \
  v4si x1, x2; \
  v8si ret; \
  COPY_IMM_TO_XMM(x, x1, x2); \
  x1 = _mm_##fn(x1,a); \
  x2 = _mm_##fn(x2,a); \
  COPY_XMM_TO_IMM(x1, x2, ret); \
  return(ret); \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="114" column="9" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="avx__mathfun_8h_1a840bcd1153df331e781d230ab436e264" prot="public" static="no">
        <name>AVX2_INTOP_USING_SSE2</name>
        <param><defname>fn</defname></param>
        <initializer>static inline v8si _mm256_##fn(v8si x, v8si y) \
{ \
  /* use SSE2 instructions to perform the AVX2 integer operation */ \
  v4si x1, x2; \
  v4si y1, y2; \
  v8si ret; \
  COPY_IMM_TO_XMM(x, x1, x2); \
  COPY_IMM_TO_XMM(y, y1, y2); \
  x1 = _mm_##fn(x1,y1); \
  x2 = _mm_##fn(x2,y2); \
  COPY_XMM_TO_IMM(x1, x2, ret); \
  return(ret); \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="131" column="9" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="131" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="avx__mathfun_8h_1a6bdddd9e9ff4ed29daf51fb30b4e0782" prot="public" static="no">
        <type>__m256</type>
        <definition>typedef __m256 v8sf</definition>
        <argsstring></argsstring>
        <name>v8sf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="43" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="avx__mathfun_8h_1ac202dee917c685b5b212473cf338a5b4" prot="public" static="no">
        <type>__m256i</type>
        <definition>typedef __m256i v8si</definition>
        <argsstring></argsstring>
        <name>v8si</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="44" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="avx__mathfun_8h_1a6ce9fbdb544d9dc4ce9edd4a16bf690b" prot="public" static="no">
        <type>__m128i</type>
        <definition>typedef __m128i v4si</definition>
        <argsstring></argsstring>
        <name>v4si</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="45" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="avx__mathfun_8h_1aec3358721dd43eedde595aadaf3a9a9a" prot="public" static="no">
        <type>union <ref refid="unionimm__xmm__union" kindref="compound">imm_xmm_union</ref></type>
        <definition>typedef union imm_xmm_union  imm_xmm_union</definition>
        <argsstring></argsstring>
        <name>imm_xmm_union</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="99" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="avx__mathfun_8h_1aa8c97c44d837f225d4afbcd7b29df8b9" prot="public" static="yes" mutable="no">
        <type>const ALIGN32_BEG int</type>
        <definition>const ALIGN32_BEG int _pi32avx_1[4]</definition>
        <argsstring>[4]</argsstring>
        <name>_pi32avx_1</name>
        <initializer>= {  1 ,  1 ,  1 ,  1  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="50" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="avx__mathfun_8h_1a84c1510227c3264a277da060bc89dd60" prot="public" static="yes" mutable="no">
        <type>const ALIGN32_BEG int</type>
        <definition>const ALIGN32_BEG int _pi32avx_inv1[4]</definition>
        <argsstring>[4]</argsstring>
        <name>_pi32avx_inv1</name>
        <initializer>= {  ~1 ,  ~1 ,  ~1 ,  ~1  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="51" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="avx__mathfun_8h_1af6f750b3dc57781ab7e0f690fdf5526a" prot="public" static="yes" mutable="no">
        <type>const ALIGN32_BEG int</type>
        <definition>const ALIGN32_BEG int _pi32avx_2[4]</definition>
        <argsstring>[4]</argsstring>
        <name>_pi32avx_2</name>
        <initializer>= {  2 ,  2 ,  2 ,  2  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="52" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="avx__mathfun_8h_1a84617ec1ae95533e1e9cd42f1a567a71" prot="public" static="yes" mutable="no">
        <type>const ALIGN32_BEG int</type>
        <definition>const ALIGN32_BEG int _pi32avx_4[4]</definition>
        <argsstring>[4]</argsstring>
        <name>_pi32avx_4</name>
        <initializer>= {  4 ,  4 ,  4 ,  4  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="53" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="avx__mathfun_8h_1abc6434221d099c22e48c719499e38f26" prot="public" static="yes" mutable="no">
        <type>const ALIGN32_BEG float</type>
        <definition>const ALIGN32_BEG float _ps256_1[8]</definition>
        <argsstring>[8]</argsstring>
        <name>_ps256_1</name>
        <initializer>= {  1.0f ,  1.0f ,  1.0f ,  1.0f ,  1.0f ,  1.0f ,  1.0f ,  1.0f  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="64" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="avx__mathfun_8h_1ae26d69b84784029ebb7dfd9d55f84891" prot="public" static="yes" mutable="no">
        <type>const ALIGN32_BEG float</type>
        <definition>const ALIGN32_BEG float _ps256_0p5[8]</definition>
        <argsstring>[8]</argsstring>
        <name>_ps256_0p5</name>
        <initializer>= {  0.5f ,  0.5f ,  0.5f ,  0.5f ,  0.5f ,  0.5f ,  0.5f ,  0.5f  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="65" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="avx__mathfun_8h_1ae3348cfbc9f9f3eeb1bc2397685e9966" prot="public" static="yes" mutable="no">
        <type>const ALIGN32_BEG int</type>
        <definition>const ALIGN32_BEG int _ps256_min_norm_pos[8]</definition>
        <argsstring>[8]</argsstring>
        <name>_ps256_min_norm_pos</name>
        <initializer>= {  0x00800000 ,  0x00800000 ,  0x00800000 ,  0x00800000 ,  0x00800000 ,  0x00800000 ,  0x00800000 ,  0x00800000  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="67" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="avx__mathfun_8h_1aaeeaaa19b703f149bd977bdbf8d4cdf7" prot="public" static="yes" mutable="no">
        <type>const ALIGN32_BEG int</type>
        <definition>const ALIGN32_BEG int _ps256_mant_mask[8]</definition>
        <argsstring>[8]</argsstring>
        <name>_ps256_mant_mask</name>
        <initializer>= {  0x7f800000 ,  0x7f800000 ,  0x7f800000 ,  0x7f800000 ,  0x7f800000 ,  0x7f800000 ,  0x7f800000 ,  0x7f800000  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="68" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="avx__mathfun_8h_1ab46cd1f8c4da4a6521e73ba458c5617a" prot="public" static="yes" mutable="no">
        <type>const ALIGN32_BEG int</type>
        <definition>const ALIGN32_BEG int _ps256_inv_mant_mask[8]</definition>
        <argsstring>[8]</argsstring>
        <name>_ps256_inv_mant_mask</name>
        <initializer>= {  ~0x7f800000 ,  ~0x7f800000 ,  ~0x7f800000 ,  ~0x7f800000 ,  ~0x7f800000 ,  ~0x7f800000 ,  ~0x7f800000 ,  ~0x7f800000  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="69" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="avx__mathfun_8h_1ac55cf6637ae384bf13a3a9e9b2dca7a0" prot="public" static="yes" mutable="no">
        <type>const ALIGN32_BEG int</type>
        <definition>const ALIGN32_BEG int _ps256_sign_mask[8]</definition>
        <argsstring>[8]</argsstring>
        <name>_ps256_sign_mask</name>
        <initializer>= {  (int)0x80000000 ,  (int)0x80000000 ,  (int)0x80000000 ,  (int)0x80000000 ,  (int)0x80000000 ,  (int)0x80000000 ,  (int)0x80000000 ,  (int)0x80000000  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="71" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="avx__mathfun_8h_1aae7681373d48c32188d1972aeae035d9" prot="public" static="yes" mutable="no">
        <type>const ALIGN32_BEG int</type>
        <definition>const ALIGN32_BEG int _ps256_inv_sign_mask[8]</definition>
        <argsstring>[8]</argsstring>
        <name>_ps256_inv_sign_mask</name>
        <initializer>= {  ~0x80000000 ,  ~0x80000000 ,  ~0x80000000 ,  ~0x80000000 ,  ~0x80000000 ,  ~0x80000000 ,  ~0x80000000 ,  ~0x80000000  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="72" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="avx__mathfun_8h_1a9a03849d99e73c70a3e75dc75500ce40" prot="public" static="yes" mutable="no">
        <type>const ALIGN32_BEG int</type>
        <definition>const ALIGN32_BEG int _pi32_256_0[8]</definition>
        <argsstring>[8]</argsstring>
        <name>_pi32_256_0</name>
        <initializer>= {  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0 ,  0  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="74" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="avx__mathfun_8h_1a60ce30d8818ff480004b7734b9894d08" prot="public" static="yes" mutable="no">
        <type>const ALIGN32_BEG int</type>
        <definition>const ALIGN32_BEG int _pi32_256_1[8]</definition>
        <argsstring>[8]</argsstring>
        <name>_pi32_256_1</name>
        <initializer>= {  1 ,  1 ,  1 ,  1 ,  1 ,  1 ,  1 ,  1  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="75" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="avx__mathfun_8h_1aa95d5243f1ee38f37095e9d57e4cce77" prot="public" static="yes" mutable="no">
        <type>const ALIGN32_BEG int</type>
        <definition>const ALIGN32_BEG int _pi32_256_inv1[8]</definition>
        <argsstring>[8]</argsstring>
        <name>_pi32_256_inv1</name>
        <initializer>= {  ~1 ,  ~1 ,  ~1 ,  ~1 ,  ~1 ,  ~1 ,  ~1 ,  ~1  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="76" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="avx__mathfun_8h_1aaff9663a925ba59e926d771add81a4d4" prot="public" static="yes" mutable="no">
        <type>const ALIGN32_BEG int</type>
        <definition>const ALIGN32_BEG int _pi32_256_2[8]</definition>
        <argsstring>[8]</argsstring>
        <name>_pi32_256_2</name>
        <initializer>= {  2 ,  2 ,  2 ,  2 ,  2 ,  2 ,  2 ,  2  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="77" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="avx__mathfun_8h_1a082e9b0187420f95a49bf774fd3f3450" prot="public" static="yes" mutable="no">
        <type>const ALIGN32_BEG int</type>
        <definition>const ALIGN32_BEG int _pi32_256_4[8]</definition>
        <argsstring>[8]</argsstring>
        <name>_pi32_256_4</name>
        <initializer>= {  4 ,  4 ,  4 ,  4 ,  4 ,  4 ,  4 ,  4  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="78" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="avx__mathfun_8h_1a34bf9d7d29e020a8f8c4e0de51df6b88" prot="public" static="yes" mutable="no">
        <type>const ALIGN32_BEG int</type>
        <definition>const ALIGN32_BEG int _pi32_256_0x7f[8]</definition>
        <argsstring>[8]</argsstring>
        <name>_pi32_256_0x7f</name>
        <initializer>= {  0x7f ,  0x7f ,  0x7f ,  0x7f ,  0x7f ,  0x7f ,  0x7f ,  0x7f  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="79" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="avx__mathfun_8h_1a6fe8a9cb728e972a646d4d2ca6272167" prot="public" static="yes" mutable="no">
        <type>const ALIGN32_BEG float</type>
        <definition>const ALIGN32_BEG float _ps256_cephes_SQRTHF[8]</definition>
        <argsstring>[8]</argsstring>
        <name>_ps256_cephes_SQRTHF</name>
        <initializer>= {  0.707106781186547524 ,  0.707106781186547524 ,  0.707106781186547524 ,  0.707106781186547524 ,  0.707106781186547524 ,  0.707106781186547524 ,  0.707106781186547524 ,  0.707106781186547524  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="81" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="avx__mathfun_8h_1a36243cede2dd5b33286762da91a83f37" prot="public" static="yes" mutable="no">
        <type>const ALIGN32_BEG float</type>
        <definition>const ALIGN32_BEG float _ps256_cephes_log_p0[8]</definition>
        <argsstring>[8]</argsstring>
        <name>_ps256_cephes_log_p0</name>
        <initializer>= {  7.0376836292E-2 ,  7.0376836292E-2 ,  7.0376836292E-2 ,  7.0376836292E-2 ,  7.0376836292E-2 ,  7.0376836292E-2 ,  7.0376836292E-2 ,  7.0376836292E-2  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="82" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="avx__mathfun_8h_1a591e86b19b1618c3384a0db49f05839e" prot="public" static="yes" mutable="no">
        <type>const ALIGN32_BEG float</type>
        <definition>const ALIGN32_BEG float _ps256_cephes_log_p1[8]</definition>
        <argsstring>[8]</argsstring>
        <name>_ps256_cephes_log_p1</name>
        <initializer>= {  - 1.1514610310E-1 ,  - 1.1514610310E-1 ,  - 1.1514610310E-1 ,  - 1.1514610310E-1 ,  - 1.1514610310E-1 ,  - 1.1514610310E-1 ,  - 1.1514610310E-1 ,  - 1.1514610310E-1  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="83" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="avx__mathfun_8h_1aaf540596d62523e68e4840d2a10b72da" prot="public" static="yes" mutable="no">
        <type>const ALIGN32_BEG float</type>
        <definition>const ALIGN32_BEG float _ps256_cephes_log_p2[8]</definition>
        <argsstring>[8]</argsstring>
        <name>_ps256_cephes_log_p2</name>
        <initializer>= {  1.1676998740E-1 ,  1.1676998740E-1 ,  1.1676998740E-1 ,  1.1676998740E-1 ,  1.1676998740E-1 ,  1.1676998740E-1 ,  1.1676998740E-1 ,  1.1676998740E-1  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="84" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="avx__mathfun_8h_1a499cb3ae426d99da70cef4710763d33e" prot="public" static="yes" mutable="no">
        <type>const ALIGN32_BEG float</type>
        <definition>const ALIGN32_BEG float _ps256_cephes_log_p3[8]</definition>
        <argsstring>[8]</argsstring>
        <name>_ps256_cephes_log_p3</name>
        <initializer>= {  - 1.2420140846E-1 ,  - 1.2420140846E-1 ,  - 1.2420140846E-1 ,  - 1.2420140846E-1 ,  - 1.2420140846E-1 ,  - 1.2420140846E-1 ,  - 1.2420140846E-1 ,  - 1.2420140846E-1  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="85" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="avx__mathfun_8h_1aedbfb16c1269ce179986a243a35a6865" prot="public" static="yes" mutable="no">
        <type>const ALIGN32_BEG float</type>
        <definition>const ALIGN32_BEG float _ps256_cephes_log_p4[8]</definition>
        <argsstring>[8]</argsstring>
        <name>_ps256_cephes_log_p4</name>
        <initializer>= {  + 1.4249322787E-1 ,  + 1.4249322787E-1 ,  + 1.4249322787E-1 ,  + 1.4249322787E-1 ,  + 1.4249322787E-1 ,  + 1.4249322787E-1 ,  + 1.4249322787E-1 ,  + 1.4249322787E-1  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="86" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="avx__mathfun_8h_1a0dca251517e7c1ea31894ddcb4dce6c0" prot="public" static="yes" mutable="no">
        <type>const ALIGN32_BEG float</type>
        <definition>const ALIGN32_BEG float _ps256_cephes_log_p5[8]</definition>
        <argsstring>[8]</argsstring>
        <name>_ps256_cephes_log_p5</name>
        <initializer>= {  - 1.6668057665E-1 ,  - 1.6668057665E-1 ,  - 1.6668057665E-1 ,  - 1.6668057665E-1 ,  - 1.6668057665E-1 ,  - 1.6668057665E-1 ,  - 1.6668057665E-1 ,  - 1.6668057665E-1  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="87" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="avx__mathfun_8h_1a960b39397f42ecbacf227b3c528d2bb3" prot="public" static="yes" mutable="no">
        <type>const ALIGN32_BEG float</type>
        <definition>const ALIGN32_BEG float _ps256_cephes_log_p6[8]</definition>
        <argsstring>[8]</argsstring>
        <name>_ps256_cephes_log_p6</name>
        <initializer>= {  + 2.0000714765E-1 ,  + 2.0000714765E-1 ,  + 2.0000714765E-1 ,  + 2.0000714765E-1 ,  + 2.0000714765E-1 ,  + 2.0000714765E-1 ,  + 2.0000714765E-1 ,  + 2.0000714765E-1  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="88" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="avx__mathfun_8h_1ad14508e1a1fbfd791ce8104f548fca3e" prot="public" static="yes" mutable="no">
        <type>const ALIGN32_BEG float</type>
        <definition>const ALIGN32_BEG float _ps256_cephes_log_p7[8]</definition>
        <argsstring>[8]</argsstring>
        <name>_ps256_cephes_log_p7</name>
        <initializer>= {  - 2.4999993993E-1 ,  - 2.4999993993E-1 ,  - 2.4999993993E-1 ,  - 2.4999993993E-1 ,  - 2.4999993993E-1 ,  - 2.4999993993E-1 ,  - 2.4999993993E-1 ,  - 2.4999993993E-1  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="89" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="avx__mathfun_8h_1a83b26e08f25066be8a9275a7724fd920" prot="public" static="yes" mutable="no">
        <type>const ALIGN32_BEG float</type>
        <definition>const ALIGN32_BEG float _ps256_cephes_log_p8[8]</definition>
        <argsstring>[8]</argsstring>
        <name>_ps256_cephes_log_p8</name>
        <initializer>= {  + 3.3333331174E-1 ,  + 3.3333331174E-1 ,  + 3.3333331174E-1 ,  + 3.3333331174E-1 ,  + 3.3333331174E-1 ,  + 3.3333331174E-1 ,  + 3.3333331174E-1 ,  + 3.3333331174E-1  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="90" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="avx__mathfun_8h_1ab05e06be84e31b2d5badf6070eece7c8" prot="public" static="yes" mutable="no">
        <type>const ALIGN32_BEG float</type>
        <definition>const ALIGN32_BEG float _ps256_cephes_log_q1[8]</definition>
        <argsstring>[8]</argsstring>
        <name>_ps256_cephes_log_q1</name>
        <initializer>= {  -2.12194440e-4 ,  -2.12194440e-4 ,  -2.12194440e-4 ,  -2.12194440e-4 ,  -2.12194440e-4 ,  -2.12194440e-4 ,  -2.12194440e-4 ,  -2.12194440e-4  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="91" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="avx__mathfun_8h_1a1474c124441b5baa13dc931ac6f61f13" prot="public" static="yes" mutable="no">
        <type>const ALIGN32_BEG float</type>
        <definition>const ALIGN32_BEG float _ps256_cephes_log_q2[8]</definition>
        <argsstring>[8]</argsstring>
        <name>_ps256_cephes_log_q2</name>
        <initializer>= {  0.693359375 ,  0.693359375 ,  0.693359375 ,  0.693359375 ,  0.693359375 ,  0.693359375 ,  0.693359375 ,  0.693359375  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="92" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="avx__mathfun_8h_1ad5f9d1e152997bc634d20c8ca8a8a6e9" prot="public" static="yes" mutable="no">
        <type>const ALIGN32_BEG float</type>
        <definition>const ALIGN32_BEG float _ps256_exp_hi[8]</definition>
        <argsstring>[8]</argsstring>
        <name>_ps256_exp_hi</name>
        <initializer>= {  88.3762626647949f ,  88.3762626647949f ,  88.3762626647949f ,  88.3762626647949f ,  88.3762626647949f ,  88.3762626647949f ,  88.3762626647949f ,  88.3762626647949f  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="231" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="231" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="avx__mathfun_8h_1a37f46b3e8cfb6272bd1d354384e6515c" prot="public" static="yes" mutable="no">
        <type>const ALIGN32_BEG float</type>
        <definition>const ALIGN32_BEG float _ps256_exp_lo[8]</definition>
        <argsstring>[8]</argsstring>
        <name>_ps256_exp_lo</name>
        <initializer>= {  -88.3762626647949f ,  -88.3762626647949f ,  -88.3762626647949f ,  -88.3762626647949f ,  -88.3762626647949f ,  -88.3762626647949f ,  -88.3762626647949f ,  -88.3762626647949f  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="232" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="232" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="avx__mathfun_8h_1aff77585010618144c9e2f50248e1569d" prot="public" static="yes" mutable="no">
        <type>const ALIGN32_BEG float</type>
        <definition>const ALIGN32_BEG float _ps256_cephes_LOG2EF[8]</definition>
        <argsstring>[8]</argsstring>
        <name>_ps256_cephes_LOG2EF</name>
        <initializer>= {  1.44269504088896341 ,  1.44269504088896341 ,  1.44269504088896341 ,  1.44269504088896341 ,  1.44269504088896341 ,  1.44269504088896341 ,  1.44269504088896341 ,  1.44269504088896341  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="234" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="234" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="avx__mathfun_8h_1addc2c72d438527b32fb150c6e5133c1c" prot="public" static="yes" mutable="no">
        <type>const ALIGN32_BEG float</type>
        <definition>const ALIGN32_BEG float _ps256_cephes_exp_C1[8]</definition>
        <argsstring>[8]</argsstring>
        <name>_ps256_cephes_exp_C1</name>
        <initializer>= {  0.693359375 ,  0.693359375 ,  0.693359375 ,  0.693359375 ,  0.693359375 ,  0.693359375 ,  0.693359375 ,  0.693359375  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="235" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="235" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="avx__mathfun_8h_1a1b6a110ef3aee718aa68a72ceacb6b0f" prot="public" static="yes" mutable="no">
        <type>const ALIGN32_BEG float</type>
        <definition>const ALIGN32_BEG float _ps256_cephes_exp_C2[8]</definition>
        <argsstring>[8]</argsstring>
        <name>_ps256_cephes_exp_C2</name>
        <initializer>= {  -2.12194440e-4 ,  -2.12194440e-4 ,  -2.12194440e-4 ,  -2.12194440e-4 ,  -2.12194440e-4 ,  -2.12194440e-4 ,  -2.12194440e-4 ,  -2.12194440e-4  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="236" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="236" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="avx__mathfun_8h_1a0c09244a910ae9c411047f6df60f8764" prot="public" static="yes" mutable="no">
        <type>const ALIGN32_BEG float</type>
        <definition>const ALIGN32_BEG float _ps256_cephes_exp_p0[8]</definition>
        <argsstring>[8]</argsstring>
        <name>_ps256_cephes_exp_p0</name>
        <initializer>= {  1.9875691500E-4 ,  1.9875691500E-4 ,  1.9875691500E-4 ,  1.9875691500E-4 ,  1.9875691500E-4 ,  1.9875691500E-4 ,  1.9875691500E-4 ,  1.9875691500E-4  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="238" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="238" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="avx__mathfun_8h_1a19dc19c191de140a0a3c1ee8fd4f5596" prot="public" static="yes" mutable="no">
        <type>const ALIGN32_BEG float</type>
        <definition>const ALIGN32_BEG float _ps256_cephes_exp_p1[8]</definition>
        <argsstring>[8]</argsstring>
        <name>_ps256_cephes_exp_p1</name>
        <initializer>= {  1.3981999507E-3 ,  1.3981999507E-3 ,  1.3981999507E-3 ,  1.3981999507E-3 ,  1.3981999507E-3 ,  1.3981999507E-3 ,  1.3981999507E-3 ,  1.3981999507E-3  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="239" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="239" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="avx__mathfun_8h_1a1fb07fc0ae543960c0cd675eed386c93" prot="public" static="yes" mutable="no">
        <type>const ALIGN32_BEG float</type>
        <definition>const ALIGN32_BEG float _ps256_cephes_exp_p2[8]</definition>
        <argsstring>[8]</argsstring>
        <name>_ps256_cephes_exp_p2</name>
        <initializer>= {  8.3334519073E-3 ,  8.3334519073E-3 ,  8.3334519073E-3 ,  8.3334519073E-3 ,  8.3334519073E-3 ,  8.3334519073E-3 ,  8.3334519073E-3 ,  8.3334519073E-3  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="240" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="240" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="avx__mathfun_8h_1a8b11a8f82b40494c1dc180336e7e175a" prot="public" static="yes" mutable="no">
        <type>const ALIGN32_BEG float</type>
        <definition>const ALIGN32_BEG float _ps256_cephes_exp_p3[8]</definition>
        <argsstring>[8]</argsstring>
        <name>_ps256_cephes_exp_p3</name>
        <initializer>= {  4.1665795894E-2 ,  4.1665795894E-2 ,  4.1665795894E-2 ,  4.1665795894E-2 ,  4.1665795894E-2 ,  4.1665795894E-2 ,  4.1665795894E-2 ,  4.1665795894E-2  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="241" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="241" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="avx__mathfun_8h_1acd7c11937b0ff1a4907bab232477084e" prot="public" static="yes" mutable="no">
        <type>const ALIGN32_BEG float</type>
        <definition>const ALIGN32_BEG float _ps256_cephes_exp_p4[8]</definition>
        <argsstring>[8]</argsstring>
        <name>_ps256_cephes_exp_p4</name>
        <initializer>= {  1.6666665459E-1 ,  1.6666665459E-1 ,  1.6666665459E-1 ,  1.6666665459E-1 ,  1.6666665459E-1 ,  1.6666665459E-1 ,  1.6666665459E-1 ,  1.6666665459E-1  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="242" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="242" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="avx__mathfun_8h_1a29fa629822babebf94ad3a543977c315" prot="public" static="yes" mutable="no">
        <type>const ALIGN32_BEG float</type>
        <definition>const ALIGN32_BEG float _ps256_cephes_exp_p5[8]</definition>
        <argsstring>[8]</argsstring>
        <name>_ps256_cephes_exp_p5</name>
        <initializer>= {  5.0000001201E-1 ,  5.0000001201E-1 ,  5.0000001201E-1 ,  5.0000001201E-1 ,  5.0000001201E-1 ,  5.0000001201E-1 ,  5.0000001201E-1 ,  5.0000001201E-1  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="243" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="243" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="avx__mathfun_8h_1a5a5e0233c63e0a1ee6831fbd562cd782" prot="public" static="yes" mutable="no">
        <type>const ALIGN32_BEG float</type>
        <definition>const ALIGN32_BEG float _ps256_minus_cephes_DP1[8]</definition>
        <argsstring>[8]</argsstring>
        <name>_ps256_minus_cephes_DP1</name>
        <initializer>= {  -0.78515625 ,  -0.78515625 ,  -0.78515625 ,  -0.78515625 ,  -0.78515625 ,  -0.78515625 ,  -0.78515625 ,  -0.78515625  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="301" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="301" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="avx__mathfun_8h_1a4685c05d7bb9ef9bcd820a11d8f524e7" prot="public" static="yes" mutable="no">
        <type>const ALIGN32_BEG float</type>
        <definition>const ALIGN32_BEG float _ps256_minus_cephes_DP2[8]</definition>
        <argsstring>[8]</argsstring>
        <name>_ps256_minus_cephes_DP2</name>
        <initializer>= {  -2.4187564849853515625e-4 ,  -2.4187564849853515625e-4 ,  -2.4187564849853515625e-4 ,  -2.4187564849853515625e-4 ,  -2.4187564849853515625e-4 ,  -2.4187564849853515625e-4 ,  -2.4187564849853515625e-4 ,  -2.4187564849853515625e-4  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="302" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="302" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="avx__mathfun_8h_1a598f435956e51a4a2009dc4368802858" prot="public" static="yes" mutable="no">
        <type>const ALIGN32_BEG float</type>
        <definition>const ALIGN32_BEG float _ps256_minus_cephes_DP3[8]</definition>
        <argsstring>[8]</argsstring>
        <name>_ps256_minus_cephes_DP3</name>
        <initializer>= {  -3.77489497744594108e-8 ,  -3.77489497744594108e-8 ,  -3.77489497744594108e-8 ,  -3.77489497744594108e-8 ,  -3.77489497744594108e-8 ,  -3.77489497744594108e-8 ,  -3.77489497744594108e-8 ,  -3.77489497744594108e-8  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="303" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="303" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="avx__mathfun_8h_1a8b6cb45c76f4d9cd22f8d6364b51289b" prot="public" static="yes" mutable="no">
        <type>const ALIGN32_BEG float</type>
        <definition>const ALIGN32_BEG float _ps256_sincof_p0[8]</definition>
        <argsstring>[8]</argsstring>
        <name>_ps256_sincof_p0</name>
        <initializer>= {  -1.9515295891E-4 ,  -1.9515295891E-4 ,  -1.9515295891E-4 ,  -1.9515295891E-4 ,  -1.9515295891E-4 ,  -1.9515295891E-4 ,  -1.9515295891E-4 ,  -1.9515295891E-4  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="304" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="304" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="avx__mathfun_8h_1a2550be22ab8e55cbb0b7f5d142b127c0" prot="public" static="yes" mutable="no">
        <type>const ALIGN32_BEG float</type>
        <definition>const ALIGN32_BEG float _ps256_sincof_p1[8]</definition>
        <argsstring>[8]</argsstring>
        <name>_ps256_sincof_p1</name>
        <initializer>= {  8.3321608736E-3 ,  8.3321608736E-3 ,  8.3321608736E-3 ,  8.3321608736E-3 ,  8.3321608736E-3 ,  8.3321608736E-3 ,  8.3321608736E-3 ,  8.3321608736E-3  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="305" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="305" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="avx__mathfun_8h_1afa6f97551201d9bac07071ff46da7f66" prot="public" static="yes" mutable="no">
        <type>const ALIGN32_BEG float</type>
        <definition>const ALIGN32_BEG float _ps256_sincof_p2[8]</definition>
        <argsstring>[8]</argsstring>
        <name>_ps256_sincof_p2</name>
        <initializer>= {  -1.6666654611E-1 ,  -1.6666654611E-1 ,  -1.6666654611E-1 ,  -1.6666654611E-1 ,  -1.6666654611E-1 ,  -1.6666654611E-1 ,  -1.6666654611E-1 ,  -1.6666654611E-1  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="306" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="306" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="avx__mathfun_8h_1ad0c6261b4d14042ae8865cce44c3f020" prot="public" static="yes" mutable="no">
        <type>const ALIGN32_BEG float</type>
        <definition>const ALIGN32_BEG float _ps256_coscof_p0[8]</definition>
        <argsstring>[8]</argsstring>
        <name>_ps256_coscof_p0</name>
        <initializer>= {  2.443315711809948E-005 ,  2.443315711809948E-005 ,  2.443315711809948E-005 ,  2.443315711809948E-005 ,  2.443315711809948E-005 ,  2.443315711809948E-005 ,  2.443315711809948E-005 ,  2.443315711809948E-005  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="307" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="307" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="avx__mathfun_8h_1a0ae153d3883e703e0234f45366d56023" prot="public" static="yes" mutable="no">
        <type>const ALIGN32_BEG float</type>
        <definition>const ALIGN32_BEG float _ps256_coscof_p1[8]</definition>
        <argsstring>[8]</argsstring>
        <name>_ps256_coscof_p1</name>
        <initializer>= {  -1.388731625493765E-003 ,  -1.388731625493765E-003 ,  -1.388731625493765E-003 ,  -1.388731625493765E-003 ,  -1.388731625493765E-003 ,  -1.388731625493765E-003 ,  -1.388731625493765E-003 ,  -1.388731625493765E-003  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="308" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="308" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="avx__mathfun_8h_1acac3370265dc4cfa8cba93e09b67dae2" prot="public" static="yes" mutable="no">
        <type>const ALIGN32_BEG float</type>
        <definition>const ALIGN32_BEG float _ps256_coscof_p2[8]</definition>
        <argsstring>[8]</argsstring>
        <name>_ps256_coscof_p2</name>
        <initializer>= {  4.166664568298827E-002 ,  4.166664568298827E-002 ,  4.166664568298827E-002 ,  4.166664568298827E-002 ,  4.166664568298827E-002 ,  4.166664568298827E-002 ,  4.166664568298827E-002 ,  4.166664568298827E-002  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="309" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="309" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="avx__mathfun_8h_1ac68dafedd4eeb5d7b8d15a18adc9d494" prot="public" static="yes" mutable="no">
        <type>const ALIGN32_BEG float</type>
        <definition>const ALIGN32_BEG float _ps256_cephes_FOPI[8]</definition>
        <argsstring>[8]</argsstring>
        <name>_ps256_cephes_FOPI</name>
        <initializer>= {  1.27323954473516 ,  1.27323954473516 ,  1.27323954473516 ,  1.27323954473516 ,  1.27323954473516 ,  1.27323954473516 ,  1.27323954473516 ,  1.27323954473516  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="310" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="310" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="avx__mathfun_8h_1a152b5ff17859ef8b2ae8172e71dc6f9c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>v8si</type>
        <definition>static v8si _mm256_slli_epi32</definition>
        <argsstring>(v8si x, int a)</argsstring>
        <name>_mm256_slli_epi32</name>
        <param>
          <type>v8si</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="128" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="128" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="avx__mathfun_8h_1adaa1fef26405e496b7fbacce4608baca" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>v8si</type>
        <definition>static v8si _mm256_srli_epi32</definition>
        <argsstring>(v8si x, int a)</argsstring>
        <name>_mm256_srli_epi32</name>
        <param>
          <type>v8si</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="129" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="129" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="avx__mathfun_8h_1af05b843a4e83b01eebb171b9846e600b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>v8si</type>
        <definition>static v8si _mm256_and_si128</definition>
        <argsstring>(v8si x, v8si y)</argsstring>
        <name>_mm256_and_si128</name>
        <param>
          <type>v8si</type>
          <declname>x</declname>
        </param>
        <param>
          <type>v8si</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="147" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="147" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="avx__mathfun_8h_1a88a2deabd4af9fb3337190d95de33645" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>v8si</type>
        <definition>static v8si _mm256_andnot_si128</definition>
        <argsstring>(v8si x, v8si y)</argsstring>
        <name>_mm256_andnot_si128</name>
        <param>
          <type>v8si</type>
          <declname>x</declname>
        </param>
        <param>
          <type>v8si</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="148" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="avx__mathfun_8h_1a7c6a3695129e5cd158f98e0d931bb6b8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>v8si</type>
        <definition>static v8si _mm256_cmpeq_epi32</definition>
        <argsstring>(v8si x, v8si y)</argsstring>
        <name>_mm256_cmpeq_epi32</name>
        <param>
          <type>v8si</type>
          <declname>x</declname>
        </param>
        <param>
          <type>v8si</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="149" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="avx__mathfun_8h_1a7130d91672bf27f779be8ed19819c3d4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>v8si</type>
        <definition>static v8si _mm256_sub_epi32</definition>
        <argsstring>(v8si x, v8si y)</argsstring>
        <name>_mm256_sub_epi32</name>
        <param>
          <type>v8si</type>
          <declname>x</declname>
        </param>
        <param>
          <type>v8si</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="150" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="150" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="avx__mathfun_8h_1ae147d61210cf91147e3d10ae244b0189" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>v8si</type>
        <definition>static v8si _mm256_add_epi32</definition>
        <argsstring>(v8si x, v8si y)</argsstring>
        <name>_mm256_add_epi32</name>
        <param>
          <type>v8si</type>
          <declname>x</declname>
        </param>
        <param>
          <type>v8si</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="151" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="151" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="avx__mathfun_8h_1a5524d1281112e2761d9d47143ac27897" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>v8sf</type>
        <definition>v8sf log256_ps</definition>
        <argsstring>(v8sf x)</argsstring>
        <name>log256_ps</name>
        <param>
          <type>v8sf</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="159" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="159" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="avx__mathfun_8h_1a4349eb1da2b20c31de6607897eec5fdf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>v8sf</type>
        <definition>v8sf exp256_ps</definition>
        <argsstring>(v8sf x)</argsstring>
        <name>exp256_ps</name>
        <param>
          <type>v8sf</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="245" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="245" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="avx__mathfun_8h_1a0f669cf40835d4cbba60b7f8a8fdd4ba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>v8sf</type>
        <definition>v8sf sin256_ps</definition>
        <argsstring>(v8sf x)</argsstring>
        <name>sin256_ps</name>
        <param>
          <type>v8sf</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="325" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="325" bodyend="449"/>
      </memberdef>
      <memberdef kind="function" id="avx__mathfun_8h_1a870022cd69b5316c486f99cbfdd904be" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>v8sf</type>
        <definition>v8sf cos256_ps</definition>
        <argsstring>(v8sf x)</argsstring>
        <name>cos256_ps</name>
        <param>
          <type>v8sf</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="452" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="452" bodyend="565"/>
      </memberdef>
      <memberdef kind="function" id="avx__mathfun_8h_1a9406a54db401737539ff6de663474f7b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void sincos256_ps</definition>
        <argsstring>(v8sf x, v8sf *s, v8sf *c)</argsstring>
        <name>sincos256_ps</name>
        <param>
          <type>v8sf</type>
          <declname>x</declname>
        </param>
        <param>
          <type>v8sf *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>v8sf *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" line="569" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h" bodystart="569" bodyend="715"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/><sp/>AVX<sp/>implementation<sp/>of<sp/>sin,<sp/>cos,<sp/>sincos,<sp/>exp<sp/>and<sp/>log</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/><sp/>Based<sp/>on<sp/>&quot;sse_mathfun.h&quot;,<sp/>by<sp/>Julien<sp/>Pommier</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/><sp/>http://gruntthepeon.free.fr/ssemath/</highlight></codeline>
<codeline lineno="7"><highlight class="comment"></highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/><sp/><sp/>Copyright<sp/>(C)<sp/>2012<sp/>Giovanni<sp/>Garberoglio</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/><sp/><sp/>Interdisciplinary<sp/>Laboratory<sp/>for<sp/>Computational<sp/>Science<sp/>(LISC)</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/><sp/><sp/>Fondazione<sp/>Bruno<sp/>Kessler<sp/>and<sp/>University<sp/>of<sp/>Trento</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/><sp/><sp/>via<sp/>Sommarive,<sp/>18</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/><sp/><sp/>I-38123<sp/>Trento<sp/>(Italy)</highlight></codeline>
<codeline lineno="13"><highlight class="comment"></highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/><sp/>This<sp/>software<sp/>is<sp/>provided<sp/>&apos;as-is&apos;,<sp/>without<sp/>any<sp/>express<sp/>or<sp/>implied</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/><sp/>warranty.<sp/><sp/>In<sp/>no<sp/>event<sp/>will<sp/>the<sp/>authors<sp/>be<sp/>held<sp/>liable<sp/>for<sp/>any<sp/>damages</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/><sp/>arising<sp/>from<sp/>the<sp/>use<sp/>of<sp/>this<sp/>software.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"></highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/><sp/>Permission<sp/>is<sp/>granted<sp/>to<sp/>anyone<sp/>to<sp/>use<sp/>this<sp/>software<sp/>for<sp/>any<sp/>purpose,</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/><sp/>including<sp/>commercial<sp/>applications,<sp/>and<sp/>to<sp/>alter<sp/>it<sp/>and<sp/>redistribute<sp/>it</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/><sp/>freely,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>restrictions:</highlight></codeline>
<codeline lineno="21"><highlight class="comment"></highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/><sp/>1.<sp/>The<sp/>origin<sp/>of<sp/>this<sp/>software<sp/>must<sp/>not<sp/>be<sp/>misrepresented;<sp/>you<sp/>must<sp/>not</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>claim<sp/>that<sp/>you<sp/>wrote<sp/>the<sp/>original<sp/>software.<sp/>If<sp/>you<sp/>use<sp/>this<sp/>software</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>in<sp/>a<sp/>product,<sp/>an<sp/>acknowledgment<sp/>in<sp/>the<sp/>product<sp/>documentation<sp/>would<sp/>be</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>appreciated<sp/>but<sp/>is<sp/>not<sp/>required.</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/><sp/>2.<sp/>Altered<sp/>source<sp/>versions<sp/>must<sp/>be<sp/>plainly<sp/>marked<sp/>as<sp/>such,<sp/>and<sp/>must<sp/>not<sp/>be</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>misrepresented<sp/>as<sp/>being<sp/>the<sp/>original<sp/>software.</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/><sp/>3.<sp/>This<sp/>notice<sp/>may<sp/>not<sp/>be<sp/>removed<sp/>or<sp/>altered<sp/>from<sp/>any<sp/>source<sp/>distribution.</highlight></codeline>
<codeline lineno="29"><highlight class="comment"></highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/><sp/>(this<sp/>is<sp/>the<sp/>zlib<sp/>license)</highlight></codeline>
<codeline lineno="31"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Intrinsics.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>yes<sp/>I<sp/>know,<sp/>the<sp/>top<sp/>of<sp/>this<sp/>file<sp/>is<sp/>quite<sp/>ugly<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__GNUC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>ALIGN32_BEG<sp/>__attribute__((aligned(32)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(_WIN32)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>ALIGN32_BEG<sp/>__declspec(align(32))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>__m128<sp/>is<sp/>ugly<sp/>to<sp/>write<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>__m256<sp/><sp/>v8sf;<sp/></highlight><highlight class="comment">//<sp/>vector<sp/>of<sp/>8<sp/>float<sp/>(avx)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>__m256i<sp/>v8si;<sp/></highlight><highlight class="comment">//<sp/>vector<sp/>of<sp/>8<sp/>int<sp/><sp/><sp/>(avx)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>__m128i<sp/>v4si;<sp/></highlight><highlight class="comment">//<sp/>vector<sp/>of<sp/>8<sp/>int<sp/><sp/><sp/>(avx)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_PI32AVX_CONST(Name,<sp/>Val)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="48"><highlight class="preprocessor"><sp/><sp/>static<sp/>const<sp/>ALIGN32_BEG<sp/>int<sp/>_pi32avx_##Name[4]<sp/>=<sp/>{<sp/>Val,<sp/>Val,<sp/>Val,<sp/>Val<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal">_PI32AVX_CONST(1,<sp/>1);</highlight></codeline>
<codeline lineno="51"><highlight class="normal">_PI32AVX_CONST(inv1,<sp/>~1);</highlight></codeline>
<codeline lineno="52"><highlight class="normal">_PI32AVX_CONST(2,<sp/>2);</highlight></codeline>
<codeline lineno="53"><highlight class="normal">_PI32AVX_CONST(4,<sp/>4);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>declare<sp/>some<sp/>AVX<sp/>constants<sp/>--<sp/>why<sp/>can&apos;t<sp/>I<sp/>figure<sp/>a<sp/>better<sp/>way<sp/>to<sp/>do<sp/>that?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_PS256_CONST(Name,<sp/>Val)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="58"><highlight class="preprocessor"><sp/><sp/>static<sp/>const<sp/>ALIGN32_BEG<sp/>float<sp/>_ps256_##Name[8]<sp/>=<sp/>{<sp/>Val,<sp/>Val,<sp/>Val,<sp/>Val,<sp/>Val,<sp/>Val,<sp/>Val,<sp/>Val<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_PI32_CONST256(Name,<sp/>Val)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="60"><highlight class="preprocessor"><sp/><sp/>static<sp/>const<sp/>ALIGN32_BEG<sp/>int<sp/>_pi32_256_##Name[8]<sp/>=<sp/>{<sp/>Val,<sp/>Val,<sp/>Val,<sp/>Val,<sp/>Val,<sp/>Val,<sp/>Val,<sp/>Val<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_PS256_CONST_TYPE(Name,<sp/>Type,<sp/>Val)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="62"><highlight class="preprocessor"><sp/><sp/>static<sp/>const<sp/>ALIGN32_BEG<sp/>Type<sp/>_ps256_##Name[8]<sp/>=<sp/>{<sp/>Val,<sp/>Val,<sp/>Val,<sp/>Val,<sp/>Val,<sp/>Val,<sp/>Val,<sp/>Val<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal">_PS256_CONST(1<sp/><sp/>,<sp/>1.0f);</highlight></codeline>
<codeline lineno="65"><highlight class="normal">_PS256_CONST(0p5,<sp/>0.5f);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>the<sp/>smallest<sp/>non<sp/>denormalized<sp/>float<sp/>number<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal">_PS256_CONST_TYPE(min_norm_pos,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>0x00800000);</highlight></codeline>
<codeline lineno="68"><highlight class="normal">_PS256_CONST_TYPE(mant_mask,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>0x7f800000);</highlight></codeline>
<codeline lineno="69"><highlight class="normal">_PS256_CONST_TYPE(inv_mant_mask,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>~0x7f800000);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal">_PS256_CONST_TYPE(sign_mask,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)0x80000000);</highlight></codeline>
<codeline lineno="72"><highlight class="normal">_PS256_CONST_TYPE(inv_sign_mask,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>~0x80000000);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal">_PI32_CONST256(0,<sp/>0);</highlight></codeline>
<codeline lineno="75"><highlight class="normal">_PI32_CONST256(1,<sp/>1);</highlight></codeline>
<codeline lineno="76"><highlight class="normal">_PI32_CONST256(inv1,<sp/>~1);</highlight></codeline>
<codeline lineno="77"><highlight class="normal">_PI32_CONST256(2,<sp/>2);</highlight></codeline>
<codeline lineno="78"><highlight class="normal">_PI32_CONST256(4,<sp/>4);</highlight></codeline>
<codeline lineno="79"><highlight class="normal">_PI32_CONST256(0x7f,<sp/>0x7f);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal">_PS256_CONST(cephes_SQRTHF,<sp/>0.707106781186547524);</highlight></codeline>
<codeline lineno="82"><highlight class="normal">_PS256_CONST(cephes_log_p0,<sp/>7.0376836292E-2);</highlight></codeline>
<codeline lineno="83"><highlight class="normal">_PS256_CONST(cephes_log_p1,<sp/>-<sp/>1.1514610310E-1);</highlight></codeline>
<codeline lineno="84"><highlight class="normal">_PS256_CONST(cephes_log_p2,<sp/>1.1676998740E-1);</highlight></codeline>
<codeline lineno="85"><highlight class="normal">_PS256_CONST(cephes_log_p3,<sp/>-<sp/>1.2420140846E-1);</highlight></codeline>
<codeline lineno="86"><highlight class="normal">_PS256_CONST(cephes_log_p4,<sp/>+<sp/>1.4249322787E-1);</highlight></codeline>
<codeline lineno="87"><highlight class="normal">_PS256_CONST(cephes_log_p5,<sp/>-<sp/>1.6668057665E-1);</highlight></codeline>
<codeline lineno="88"><highlight class="normal">_PS256_CONST(cephes_log_p6,<sp/>+<sp/>2.0000714765E-1);</highlight></codeline>
<codeline lineno="89"><highlight class="normal">_PS256_CONST(cephes_log_p7,<sp/>-<sp/>2.4999993993E-1);</highlight></codeline>
<codeline lineno="90"><highlight class="normal">_PS256_CONST(cephes_log_p8,<sp/>+<sp/>3.3333331174E-1);</highlight></codeline>
<codeline lineno="91"><highlight class="normal">_PS256_CONST(cephes_log_q1,<sp/>-2.12194440e-4);</highlight></codeline>
<codeline lineno="92"><highlight class="normal">_PS256_CONST(cephes_log_q2,<sp/>0.693359375);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__AVX2__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96" refid="unionimm__xmm__union" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal"><ref refid="unionimm__xmm__union" kindref="compound">imm_xmm_union</ref><sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>v8si<sp/>imm;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>v4si<sp/>xmm[2];</highlight></codeline>
<codeline lineno="99"><highlight class="normal">}<sp/><ref refid="unionimm__xmm__union" kindref="compound">imm_xmm_union</ref>;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>COPY_IMM_TO_XMM(imm_,<sp/>xmm0_,<sp/>xmm1_)<sp/>{<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="102"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>imm_xmm_union<sp/>u<sp/>__attribute__((aligned(32)));<sp/><sp/>\</highlight></codeline>
<codeline lineno="103"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>u.imm<sp/>=<sp/>imm_;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="104"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>xmm0_<sp/>=<sp/>u.xmm[0];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="105"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>xmm1_<sp/>=<sp/>u.xmm[1];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="106"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>COPY_XMM_TO_IMM(xmm0_,<sp/>xmm1_,<sp/>imm_)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="109"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>imm_xmm_union<sp/>u<sp/>__attribute__((aligned(32)));<sp/>\</highlight></codeline>
<codeline lineno="110"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>u.xmm[0]=xmm0_;<sp/>u.xmm[1]=xmm1_;<sp/>imm_<sp/>=<sp/>u.imm;<sp/>\</highlight></codeline>
<codeline lineno="111"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AVX2_BITOP_USING_SSE2(fn)<sp/>\</highlight></codeline>
<codeline lineno="115"><highlight class="preprocessor">static<sp/>inline<sp/>v8si<sp/>_mm256_##fn(v8si<sp/>x,<sp/>int<sp/>a)<sp/>\</highlight></codeline>
<codeline lineno="116"><highlight class="preprocessor">{<sp/>\</highlight></codeline>
<codeline lineno="117"><highlight class="preprocessor"><sp/><sp/></highlight><highlight class="comment">/*<sp/>use<sp/>SSE2<sp/>instruction<sp/>to<sp/>perform<sp/>the<sp/>bitop<sp/>AVX2<sp/>*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="118"><highlight class="preprocessor"><sp/><sp/>v4si<sp/>x1,<sp/>x2;<sp/>\</highlight></codeline>
<codeline lineno="119"><highlight class="preprocessor"><sp/><sp/>v8si<sp/>ret;<sp/>\</highlight></codeline>
<codeline lineno="120"><highlight class="preprocessor"><sp/><sp/>COPY_IMM_TO_XMM(x,<sp/>x1,<sp/>x2);<sp/>\</highlight></codeline>
<codeline lineno="121"><highlight class="preprocessor"><sp/><sp/>x1<sp/>=<sp/>_mm_##fn(x1,a);<sp/>\</highlight></codeline>
<codeline lineno="122"><highlight class="preprocessor"><sp/><sp/>x2<sp/>=<sp/>_mm_##fn(x2,a);<sp/>\</highlight></codeline>
<codeline lineno="123"><highlight class="preprocessor"><sp/><sp/>COPY_XMM_TO_IMM(x1,<sp/>x2,<sp/>ret);<sp/>\</highlight></codeline>
<codeline lineno="124"><highlight class="preprocessor"><sp/><sp/>return(ret);<sp/>\</highlight></codeline>
<codeline lineno="125"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="preprocessor">#warning<sp/>&quot;Using<sp/>SSE2<sp/>to<sp/>perform<sp/>AVX2<sp/>bitshift<sp/>ops&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal">AVX2_BITOP_USING_SSE2(slli_epi32)</highlight></codeline>
<codeline lineno="129"><highlight class="normal">AVX2_BITOP_USING_SSE2(srli_epi32)</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AVX2_INTOP_USING_SSE2(fn)<sp/>\</highlight></codeline>
<codeline lineno="132"><highlight class="preprocessor">static<sp/>inline<sp/>v8si<sp/>_mm256_##fn(v8si<sp/>x,<sp/>v8si<sp/>y)<sp/>\</highlight></codeline>
<codeline lineno="133"><highlight class="preprocessor">{<sp/>\</highlight></codeline>
<codeline lineno="134"><highlight class="preprocessor"><sp/><sp/></highlight><highlight class="comment">/*<sp/>use<sp/>SSE2<sp/>instructions<sp/>to<sp/>perform<sp/>the<sp/>AVX2<sp/>integer<sp/>operation<sp/>*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="135"><highlight class="preprocessor"><sp/><sp/>v4si<sp/>x1,<sp/>x2;<sp/>\</highlight></codeline>
<codeline lineno="136"><highlight class="preprocessor"><sp/><sp/>v4si<sp/>y1,<sp/>y2;<sp/>\</highlight></codeline>
<codeline lineno="137"><highlight class="preprocessor"><sp/><sp/>v8si<sp/>ret;<sp/>\</highlight></codeline>
<codeline lineno="138"><highlight class="preprocessor"><sp/><sp/>COPY_IMM_TO_XMM(x,<sp/>x1,<sp/>x2);<sp/>\</highlight></codeline>
<codeline lineno="139"><highlight class="preprocessor"><sp/><sp/>COPY_IMM_TO_XMM(y,<sp/>y1,<sp/>y2);<sp/>\</highlight></codeline>
<codeline lineno="140"><highlight class="preprocessor"><sp/><sp/>x1<sp/>=<sp/>_mm_##fn(x1,y1);<sp/>\</highlight></codeline>
<codeline lineno="141"><highlight class="preprocessor"><sp/><sp/>x2<sp/>=<sp/>_mm_##fn(x2,y2);<sp/>\</highlight></codeline>
<codeline lineno="142"><highlight class="preprocessor"><sp/><sp/>COPY_XMM_TO_IMM(x1,<sp/>x2,<sp/>ret);<sp/>\</highlight></codeline>
<codeline lineno="143"><highlight class="preprocessor"><sp/><sp/>return(ret);<sp/>\</highlight></codeline>
<codeline lineno="144"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="preprocessor">#warning<sp/>&quot;Using<sp/>SSE2<sp/>to<sp/>perform<sp/>AVX2<sp/>integer<sp/>ops&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal">AVX2_INTOP_USING_SSE2(and_si128)</highlight></codeline>
<codeline lineno="148"><highlight class="normal">AVX2_INTOP_USING_SSE2(andnot_si128)</highlight></codeline>
<codeline lineno="149"><highlight class="normal">AVX2_INTOP_USING_SSE2(cmpeq_epi32)</highlight></codeline>
<codeline lineno="150"><highlight class="normal">AVX2_INTOP_USING_SSE2(sub_epi32)</highlight></codeline>
<codeline lineno="151"><highlight class="normal">AVX2_INTOP_USING_SSE2(add_epi32)</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>__AVX2__<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>natural<sp/>logarithm<sp/>computed<sp/>for<sp/>8<sp/>simultaneous<sp/>float</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/><sp/><sp/>return<sp/>NaN<sp/>for<sp/>x<sp/>&lt;=<sp/>0</highlight></codeline>
<codeline lineno="158"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>v8sf<sp/>log256_ps(v8sf<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>v8si<sp/>imm0;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>v8sf<sp/>one<sp/>=<sp/>*(v8sf*)_ps256_1;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//v8sf<sp/>invalid_mask<sp/>=<sp/>_mm256_cmple_ps(x,<sp/>_mm256_setzero_ps());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>v8sf<sp/>invalid_mask<sp/>=<sp/>_mm256_cmp_ps(x,<sp/>_mm256_setzero_ps(),<sp/>_CMP_LE_OS);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>x<sp/>=<sp/>_mm256_max_ps(x,<sp/>*(v8sf*)_ps256_min_norm_pos);<sp/><sp/></highlight><highlight class="comment">/*<sp/>cut<sp/>off<sp/>denormalized<sp/>stuff<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>can<sp/>be<sp/>done<sp/>with<sp/>AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>imm0<sp/>=<sp/>_mm256_srli_epi32(_mm256_castps_si256(x),<sp/>23);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>keep<sp/>only<sp/>the<sp/>fractional<sp/>part<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>x<sp/>=<sp/>_mm256_and_ps(x,<sp/>*(v8sf*)_ps256_inv_mant_mask);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>x<sp/>=<sp/>_mm256_or_ps(x,<sp/>*(v8sf*)_ps256_0p5);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>again<sp/>another<sp/>AVX2<sp/>instruction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>imm0<sp/>=<sp/>_mm256_sub_epi32(imm0,<sp/>*(v8si*)_pi32_256_0x7f);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>v8sf<sp/>e<sp/>=<sp/>_mm256_cvtepi32_ps(imm0);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>e<sp/>=<sp/>_mm256_add_ps(e,<sp/>one);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>part2:</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>if(<sp/>x<sp/>&lt;<sp/>SQRTHF<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e<sp/>-=<sp/>1;</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>x<sp/>+<sp/>x<sp/>-<sp/>1.0;</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>x<sp/>=<sp/>x<sp/>-<sp/>1.0;<sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//v8sf<sp/>mask<sp/>=<sp/>_mm256_cmplt_ps(x,<sp/>*(v8sf*)_ps256_cephes_SQRTHF);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>v8sf<sp/>mask<sp/>=<sp/>_mm256_cmp_ps(x,<sp/>*(v8sf*)_ps256_cephes_SQRTHF,<sp/>_CMP_LT_OS);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>v8sf<sp/>tmp<sp/>=<sp/>_mm256_and_ps(x,<sp/>mask);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>x<sp/>=<sp/>_mm256_sub_ps(x,<sp/>one);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>e<sp/>=<sp/>_mm256_sub_ps(e,<sp/>_mm256_and_ps(one,<sp/>mask));</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>x<sp/>=<sp/>_mm256_add_ps(x,<sp/>tmp);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>v8sf<sp/>z<sp/>=<sp/>_mm256_mul_ps(x,x);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>v8sf<sp/>y<sp/>=<sp/>*(v8sf*)_ps256_cephes_log_p0;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_mul_ps(y,<sp/>x);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_add_ps(y,<sp/>*(v8sf*)_ps256_cephes_log_p1);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_mul_ps(y,<sp/>x);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_add_ps(y,<sp/>*(v8sf*)_ps256_cephes_log_p2);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_mul_ps(y,<sp/>x);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_add_ps(y,<sp/>*(v8sf*)_ps256_cephes_log_p3);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_mul_ps(y,<sp/>x);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_add_ps(y,<sp/>*(v8sf*)_ps256_cephes_log_p4);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_mul_ps(y,<sp/>x);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_add_ps(y,<sp/>*(v8sf*)_ps256_cephes_log_p5);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_mul_ps(y,<sp/>x);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_add_ps(y,<sp/>*(v8sf*)_ps256_cephes_log_p6);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_mul_ps(y,<sp/>x);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_add_ps(y,<sp/>*(v8sf*)_ps256_cephes_log_p7);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_mul_ps(y,<sp/>x);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_add_ps(y,<sp/>*(v8sf*)_ps256_cephes_log_p8);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_mul_ps(y,<sp/>x);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_mul_ps(y,<sp/>z);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>tmp<sp/>=<sp/>_mm256_mul_ps(e,<sp/>*(v8sf*)_ps256_cephes_log_q1);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_add_ps(y,<sp/>tmp);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>tmp<sp/>=<sp/>_mm256_mul_ps(z,<sp/>*(v8sf*)_ps256_0p5);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_sub_ps(y,<sp/>tmp);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>tmp<sp/>=<sp/>_mm256_mul_ps(e,<sp/>*(v8sf*)_ps256_cephes_log_q2);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>x<sp/>=<sp/>_mm256_add_ps(x,<sp/>y);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>x<sp/>=<sp/>_mm256_add_ps(x,<sp/>tmp);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>x<sp/>=<sp/>_mm256_or_ps(x,<sp/>invalid_mask);<sp/></highlight><highlight class="comment">//<sp/>negative<sp/>arg<sp/>will<sp/>be<sp/>NAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal">_PS256_CONST(exp_hi,<sp/><sp/><sp/><sp/>88.3762626647949f);</highlight></codeline>
<codeline lineno="232"><highlight class="normal">_PS256_CONST(exp_lo,<sp/><sp/><sp/><sp/>-88.3762626647949f);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal">_PS256_CONST(cephes_LOG2EF,<sp/>1.44269504088896341);</highlight></codeline>
<codeline lineno="235"><highlight class="normal">_PS256_CONST(cephes_exp_C1,<sp/>0.693359375);</highlight></codeline>
<codeline lineno="236"><highlight class="normal">_PS256_CONST(cephes_exp_C2,<sp/>-2.12194440e-4);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal">_PS256_CONST(cephes_exp_p0,<sp/>1.9875691500E-4);</highlight></codeline>
<codeline lineno="239"><highlight class="normal">_PS256_CONST(cephes_exp_p1,<sp/>1.3981999507E-3);</highlight></codeline>
<codeline lineno="240"><highlight class="normal">_PS256_CONST(cephes_exp_p2,<sp/>8.3334519073E-3);</highlight></codeline>
<codeline lineno="241"><highlight class="normal">_PS256_CONST(cephes_exp_p3,<sp/>4.1665795894E-2);</highlight></codeline>
<codeline lineno="242"><highlight class="normal">_PS256_CONST(cephes_exp_p4,<sp/>1.6666665459E-1);</highlight></codeline>
<codeline lineno="243"><highlight class="normal">_PS256_CONST(cephes_exp_p5,<sp/>5.0000001201E-1);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>v8sf<sp/>exp256_ps(v8sf<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>v8sf<sp/>tmp<sp/>=<sp/>_mm256_setzero_ps(),<sp/>fx;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>v8si<sp/>imm0;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>v8sf<sp/>one<sp/>=<sp/>*(v8sf*)_ps256_1;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>x<sp/>=<sp/>_mm256_min_ps(x,<sp/>*(v8sf*)_ps256_exp_hi);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>x<sp/>=<sp/>_mm256_max_ps(x,<sp/>*(v8sf*)_ps256_exp_lo);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>express<sp/>exp(x)<sp/>as<sp/>exp(g<sp/>+<sp/>n*log(2))<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>fx<sp/>=<sp/>_mm256_mul_ps(x,<sp/>*(v8sf*)_ps256_cephes_LOG2EF);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>fx<sp/>=<sp/>_mm256_add_ps(fx,<sp/>*(v8sf*)_ps256_0p5);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>how<sp/>to<sp/>perform<sp/>a<sp/>floorf<sp/>with<sp/>SSE:<sp/>just<sp/>below<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//imm0<sp/>=<sp/>_mm256_cvttps_epi32(fx);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//tmp<sp/><sp/>=<sp/>_mm256_cvtepi32_ps(imm0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>tmp<sp/>=<sp/>_mm256_floor_ps(fx);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>greater,<sp/>substract<sp/>1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//v8sf<sp/>mask<sp/>=<sp/>_mm256_cmpgt_ps(tmp,<sp/>fx);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/>v8sf<sp/>mask<sp/>=<sp/>_mm256_cmp_ps(tmp,<sp/>fx,<sp/>_CMP_GT_OS);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>mask<sp/>=<sp/>_mm256_and_ps(mask,<sp/>one);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/>fx<sp/>=<sp/>_mm256_sub_ps(tmp,<sp/>mask);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/>tmp<sp/>=<sp/>_mm256_mul_ps(fx,<sp/>*(v8sf*)_ps256_cephes_exp_C1);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>v8sf<sp/>z<sp/>=<sp/>_mm256_mul_ps(fx,<sp/>*(v8sf*)_ps256_cephes_exp_C2);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/>x<sp/>=<sp/>_mm256_sub_ps(x,<sp/>tmp);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/>x<sp/>=<sp/>_mm256_sub_ps(x,<sp/>z);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>z<sp/>=<sp/>_mm256_mul_ps(x,x);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>v8sf<sp/>y<sp/>=<sp/>*(v8sf*)_ps256_cephes_exp_p0;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_mul_ps(y,<sp/>x);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_add_ps(y,<sp/>*(v8sf*)_ps256_cephes_exp_p1);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_mul_ps(y,<sp/>x);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_add_ps(y,<sp/>*(v8sf*)_ps256_cephes_exp_p2);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_mul_ps(y,<sp/>x);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_add_ps(y,<sp/>*(v8sf*)_ps256_cephes_exp_p3);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_mul_ps(y,<sp/>x);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_add_ps(y,<sp/>*(v8sf*)_ps256_cephes_exp_p4);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_mul_ps(y,<sp/>x);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_add_ps(y,<sp/>*(v8sf*)_ps256_cephes_exp_p5);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_mul_ps(y,<sp/>z);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_add_ps(y,<sp/>x);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_add_ps(y,<sp/>one);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>build<sp/>2^n<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>imm0<sp/>=<sp/>_mm256_cvttps_epi32(fx);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>another<sp/>two<sp/>AVX2<sp/>instructions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>imm0<sp/>=<sp/>_mm256_add_epi32(imm0,<sp/>*(v8si*)_pi32_256_0x7f);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>imm0<sp/>=<sp/>_mm256_slli_epi32(imm0,<sp/>23);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>v8sf<sp/>pow2n<sp/>=<sp/>_mm256_castsi256_ps(imm0);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_mul_ps(y,<sp/>pow2n);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>y;</highlight></codeline>
<codeline lineno="299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal">_PS256_CONST(minus_cephes_DP1,<sp/>-0.78515625);</highlight></codeline>
<codeline lineno="302"><highlight class="normal">_PS256_CONST(minus_cephes_DP2,<sp/>-2.4187564849853515625e-4);</highlight></codeline>
<codeline lineno="303"><highlight class="normal">_PS256_CONST(minus_cephes_DP3,<sp/>-3.77489497744594108e-8);</highlight></codeline>
<codeline lineno="304"><highlight class="normal">_PS256_CONST(sincof_p0,<sp/>-1.9515295891E-4);</highlight></codeline>
<codeline lineno="305"><highlight class="normal">_PS256_CONST(sincof_p1,<sp/><sp/>8.3321608736E-3);</highlight></codeline>
<codeline lineno="306"><highlight class="normal">_PS256_CONST(sincof_p2,<sp/>-1.6666654611E-1);</highlight></codeline>
<codeline lineno="307"><highlight class="normal">_PS256_CONST(coscof_p0,<sp/><sp/>2.443315711809948E-005);</highlight></codeline>
<codeline lineno="308"><highlight class="normal">_PS256_CONST(coscof_p1,<sp/>-1.388731625493765E-003);</highlight></codeline>
<codeline lineno="309"><highlight class="normal">_PS256_CONST(coscof_p2,<sp/><sp/>4.166664568298827E-002);</highlight></codeline>
<codeline lineno="310"><highlight class="normal">_PS256_CONST(cephes_FOPI,<sp/>1.27323954473516);<sp/></highlight><highlight class="comment">//<sp/>4<sp/>/<sp/>M_PI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>evaluation<sp/>of<sp/>8<sp/>sines<sp/>at<sp/>onces<sp/>using<sp/>AVX<sp/>intrisics</highlight></codeline>
<codeline lineno="314"><highlight class="comment"></highlight></codeline>
<codeline lineno="315"><highlight class="comment"><sp/><sp/><sp/>The<sp/>code<sp/>is<sp/>the<sp/>exact<sp/>rewriting<sp/>of<sp/>the<sp/>cephes<sp/>sinf<sp/>function.</highlight></codeline>
<codeline lineno="316"><highlight class="comment"><sp/><sp/><sp/>Precision<sp/>is<sp/>excellent<sp/>as<sp/>long<sp/>as<sp/>x<sp/>&lt;<sp/>8192<sp/>(I<sp/>did<sp/>not<sp/>bother<sp/>to</highlight></codeline>
<codeline lineno="317"><highlight class="comment"><sp/><sp/><sp/>take<sp/>into<sp/>account<sp/>the<sp/>special<sp/>handling<sp/>they<sp/>have<sp/>for<sp/>greater<sp/>values</highlight></codeline>
<codeline lineno="318"><highlight class="comment"><sp/><sp/><sp/>--<sp/>it<sp/>does<sp/>not<sp/>return<sp/>garbage<sp/>for<sp/>arguments<sp/>over<sp/>8192,<sp/>though,<sp/>but</highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/><sp/><sp/>the<sp/>extra<sp/>precision<sp/>is<sp/>missing).</highlight></codeline>
<codeline lineno="320"><highlight class="comment"></highlight></codeline>
<codeline lineno="321"><highlight class="comment"><sp/><sp/><sp/>Note<sp/>that<sp/>it<sp/>is<sp/>such<sp/>that<sp/>sinf((float)M_PI)<sp/>=<sp/>8.74e-8,<sp/>which<sp/>is<sp/>the</highlight></codeline>
<codeline lineno="322"><highlight class="comment"><sp/><sp/><sp/>surprising<sp/>but<sp/>correct<sp/>result.</highlight></codeline>
<codeline lineno="323"><highlight class="comment"></highlight></codeline>
<codeline lineno="324"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>v8sf<sp/>sin256_ps(v8sf<sp/>x)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>any<sp/>x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/>v8sf<sp/>xmm1,<sp/>xmm2<sp/>=<sp/>_mm256_setzero_ps(),<sp/>xmm3,<sp/>sign_bit,<sp/>y;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/>v8si<sp/>imm0,<sp/>imm2;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__AVX2__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/>v4si<sp/>imm0_1,<sp/>imm0_2;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>v4si<sp/>imm2_1,<sp/>imm2_2;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/>sign_bit<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>take<sp/>the<sp/>absolute<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/>x<sp/>=<sp/>_mm256_and_ps(x,<sp/>*(v8sf*)_ps256_inv_sign_mask);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>extract<sp/>the<sp/>sign<sp/>bit<sp/>(upper<sp/>one)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/>sign_bit<sp/>=<sp/>_mm256_and_ps(sign_bit,<sp/>*(v8sf*)_ps256_sign_mask);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>scale<sp/>by<sp/>4/Pi<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_mul_ps(x,<sp/>*(v8sf*)_ps256_cephes_FOPI);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="344"><highlight class="comment"><sp/><sp/><sp/><sp/>Here<sp/>we<sp/>start<sp/>a<sp/>series<sp/>of<sp/>integer<sp/>operations,<sp/>which<sp/>are<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="345"><highlight class="comment"><sp/><sp/><sp/><sp/>realm<sp/>of<sp/>AVX2.</highlight></codeline>
<codeline lineno="346"><highlight class="comment"><sp/><sp/><sp/><sp/>If<sp/>we<sp/>don&apos;t<sp/>have<sp/>AVX,<sp/>let&apos;s<sp/>perform<sp/>them<sp/>using<sp/>SSE2<sp/>directives</highlight></codeline>
<codeline lineno="347"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__AVX2__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>store<sp/>the<sp/>integer<sp/>part<sp/>of<sp/>y<sp/>in<sp/>mm0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/>imm2<sp/>=<sp/>_mm256_cvttps_epi32(y);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>j=(j+1)<sp/>&amp;<sp/>(~1)<sp/>(see<sp/>the<sp/>cephes<sp/>sources)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>another<sp/>two<sp/>AVX2<sp/>instruction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>imm2<sp/>=<sp/>_mm256_add_epi32(imm2,<sp/>*(v8si*)_pi32_256_1);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>imm2<sp/>=<sp/>_mm256_and_si256(imm2,<sp/>*(v8si*)_pi32_256_inv1);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_cvtepi32_ps(imm2);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>the<sp/>swap<sp/>sign<sp/>flag<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/>imm0<sp/>=<sp/>_mm256_and_si256(imm2,<sp/>*(v8si*)_pi32_256_4);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/>imm0<sp/>=<sp/>_mm256_slli_epi32(imm0,<sp/>29);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>the<sp/>polynom<sp/>selection<sp/>mask</highlight></codeline>
<codeline lineno="362"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>there<sp/>is<sp/>one<sp/>polynom<sp/>for<sp/>0<sp/>&lt;=<sp/>x<sp/>&lt;=<sp/>Pi/4</highlight></codeline>
<codeline lineno="363"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>and<sp/>another<sp/>one<sp/>for<sp/>Pi/4&lt;x&lt;=Pi/2</highlight></codeline>
<codeline lineno="364"><highlight class="comment"></highlight></codeline>
<codeline lineno="365"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Both<sp/>branches<sp/>will<sp/>be<sp/>computed.</highlight></codeline>
<codeline lineno="366"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>imm2<sp/>=<sp/>_mm256_and_si256(imm2,<sp/>*(v8si*)_pi32_256_2);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/>imm2<sp/>=<sp/>_mm256_cmpeq_epi32(imm2,*(v8si*)_pi32_256_0);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>we<sp/>use<sp/>SSE2<sp/>routines<sp/>to<sp/>perform<sp/>the<sp/>integer<sp/>ops<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>COPY_IMM_TO_XMM(_mm256_cvttps_epi32(y),imm2_1,imm2_2);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/>imm2_1<sp/>=<sp/>_mm_add_epi32(imm2_1,<sp/>*(v4si*)_pi32avx_1);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/>imm2_2<sp/>=<sp/>_mm_add_epi32(imm2_2,<sp/>*(v4si*)_pi32avx_1);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/>imm2_1<sp/>=<sp/>_mm_and_si128(imm2_1,<sp/>*(v4si*)_pi32avx_inv1);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/>imm2_2<sp/>=<sp/>_mm_and_si128(imm2_2,<sp/>*(v4si*)_pi32avx_inv1);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/>COPY_XMM_TO_IMM(imm2_1,imm2_2,imm2);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_cvtepi32_ps(imm2);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>imm0_1<sp/>=<sp/>_mm_and_si128(imm2_1,<sp/>*(v4si*)_pi32avx_4);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>imm0_2<sp/>=<sp/>_mm_and_si128(imm2_2,<sp/>*(v4si*)_pi32avx_4);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/>imm0_1<sp/>=<sp/>_mm_slli_epi32(imm0_1,<sp/>29);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/>imm0_2<sp/>=<sp/>_mm_slli_epi32(imm0_2,<sp/>29);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>COPY_XMM_TO_IMM(imm0_1,<sp/>imm0_2,<sp/>imm0);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>imm2_1<sp/>=<sp/>_mm_and_si128(imm2_1,<sp/>*(v4si*)_pi32avx_2);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/>imm2_2<sp/>=<sp/>_mm_and_si128(imm2_2,<sp/>*(v4si*)_pi32avx_2);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/>imm2_1<sp/>=<sp/>_mm_cmpeq_epi32(imm2_1,<sp/>_mm_setzero_si128());</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/>imm2_2<sp/>=<sp/>_mm_cmpeq_epi32(imm2_2,<sp/>_mm_setzero_si128());</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/>COPY_XMM_TO_IMM(imm2_1,<sp/>imm2_2,<sp/>imm2);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/>v8sf<sp/>swap_sign_bit<sp/>=<sp/>_mm256_castsi256_ps(imm0);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>v8sf<sp/>poly_mask<sp/>=<sp/>_mm256_castsi256_ps(imm2);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/>sign_bit<sp/>=<sp/>_mm256_xor_ps(sign_bit,<sp/>swap_sign_bit);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>magic<sp/>pass:<sp/>&quot;Extended<sp/>precision<sp/>modular<sp/>arithmetic&quot;</highlight></codeline>
<codeline lineno="404"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>((x<sp/>-<sp/>y<sp/>*<sp/>DP1)<sp/>-<sp/>y<sp/>*<sp/>DP2)<sp/>-<sp/>y<sp/>*<sp/>DP3;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/>xmm1<sp/>=<sp/>*(v8sf*)_ps256_minus_cephes_DP1;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>xmm2<sp/>=<sp/>*(v8sf*)_ps256_minus_cephes_DP2;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/>xmm3<sp/>=<sp/>*(v8sf*)_ps256_minus_cephes_DP3;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/>xmm1<sp/>=<sp/>_mm256_mul_ps(y,<sp/>xmm1);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/>xmm2<sp/>=<sp/>_mm256_mul_ps(y,<sp/>xmm2);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/>xmm3<sp/>=<sp/>_mm256_mul_ps(y,<sp/>xmm3);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/>x<sp/>=<sp/>_mm256_add_ps(x,<sp/>xmm1);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/>x<sp/>=<sp/>_mm256_add_ps(x,<sp/>xmm2);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/>x<sp/>=<sp/>_mm256_add_ps(x,<sp/>xmm3);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Evaluate<sp/>the<sp/>first<sp/>polynom<sp/><sp/>(0<sp/>&lt;=<sp/>x<sp/>&lt;=<sp/>Pi/4)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>*(v8sf*)_ps256_coscof_p0;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/>v8sf<sp/>z<sp/>=<sp/>_mm256_mul_ps(x,x);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_mul_ps(y,<sp/>z);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_add_ps(y,<sp/>*(v8sf*)_ps256_coscof_p1);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_mul_ps(y,<sp/>z);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_add_ps(y,<sp/>*(v8sf*)_ps256_coscof_p2);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_mul_ps(y,<sp/>z);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_mul_ps(y,<sp/>z);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/>v8sf<sp/>tmp<sp/>=<sp/>_mm256_mul_ps(z,<sp/>*(v8sf*)_ps256_0p5);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_sub_ps(y,<sp/>tmp);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_add_ps(y,<sp/>*(v8sf*)_ps256_1);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Evaluate<sp/>the<sp/>second<sp/>polynom<sp/><sp/>(Pi/4<sp/>&lt;=<sp/>x<sp/>&lt;=<sp/>0)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/>v8sf<sp/>y2<sp/>=<sp/>*(v8sf*)_ps256_sincof_p0;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/>y2<sp/>=<sp/>_mm256_mul_ps(y2,<sp/>z);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/>y2<sp/>=<sp/>_mm256_add_ps(y2,<sp/>*(v8sf*)_ps256_sincof_p1);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/>y2<sp/>=<sp/>_mm256_mul_ps(y2,<sp/>z);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/>y2<sp/>=<sp/>_mm256_add_ps(y2,<sp/>*(v8sf*)_ps256_sincof_p2);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/>y2<sp/>=<sp/>_mm256_mul_ps(y2,<sp/>z);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/>y2<sp/>=<sp/>_mm256_mul_ps(y2,<sp/>x);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/>y2<sp/>=<sp/>_mm256_add_ps(y2,<sp/>x);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>select<sp/>the<sp/>correct<sp/>result<sp/>from<sp/>the<sp/>two<sp/>polynoms<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/>xmm3<sp/>=<sp/>poly_mask;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/>y2<sp/>=<sp/>_mm256_and_ps(xmm3,<sp/>y2);<sp/></highlight><highlight class="comment">//,<sp/>xmm3);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_andnot_ps(xmm3,<sp/>y);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_add_ps(y,y2);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>update<sp/>the<sp/>sign<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_xor_ps(y,<sp/>sign_bit);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>y;</highlight></codeline>
<codeline lineno="449"><highlight class="normal">}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>almost<sp/>the<sp/>same<sp/>as<sp/>sin_ps<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>v8sf<sp/>cos256_ps(v8sf<sp/>x)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>any<sp/>x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/>v8sf<sp/>xmm1,<sp/>xmm2<sp/>=<sp/>_mm256_setzero_ps(),<sp/>xmm3,<sp/>y;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/>v8si<sp/>imm0,<sp/>imm2;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__AVX2__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/>v4si<sp/>imm0_1,<sp/>imm0_2;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/>v4si<sp/>imm2_1,<sp/>imm2_2;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>take<sp/>the<sp/>absolute<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/>x<sp/>=<sp/>_mm256_and_ps(x,<sp/>*(v8sf*)_ps256_inv_sign_mask);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>scale<sp/>by<sp/>4/Pi<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_mul_ps(x,<sp/>*(v8sf*)_ps256_cephes_FOPI);</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__AVX2__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>store<sp/>the<sp/>integer<sp/>part<sp/>of<sp/>y<sp/>in<sp/>mm0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/>imm2<sp/>=<sp/>_mm256_cvttps_epi32(y);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>j=(j+1)<sp/>&amp;<sp/>(~1)<sp/>(see<sp/>the<sp/>cephes<sp/>sources)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/>imm2<sp/>=<sp/>_mm256_add_epi32(imm2,<sp/>*(v8si*)_pi32_256_1);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/>imm2<sp/>=<sp/>_mm256_and_si256(imm2,<sp/>*(v8si*)_pi32_256_inv1);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_cvtepi32_ps(imm2);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/>imm2<sp/>=<sp/>_mm256_sub_epi32(imm2,<sp/>*(v8si*)_pi32_256_2);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>the<sp/>swap<sp/>sign<sp/>flag<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/>imm0<sp/>=<sp/><sp/>_mm256_andnot_si256(imm2,<sp/>*(v8si*)_pi32_256_4);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/>imm0<sp/>=<sp/>_mm256_slli_epi32(imm0,<sp/>29);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>the<sp/>polynom<sp/>selection<sp/>mask<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/>imm2<sp/>=<sp/>_mm256_and_si256(imm2,<sp/>*(v8si*)_pi32_256_2);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/>imm2<sp/>=<sp/>_mm256_cmpeq_epi32(imm2,<sp/>*(v8si*)_pi32_256_0);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>we<sp/>use<sp/>SSE2<sp/>routines<sp/>to<sp/>perform<sp/>the<sp/>integer<sp/>ops<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/>COPY_IMM_TO_XMM(_mm256_cvttps_epi32(y),imm2_1,imm2_2);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/>imm2_1<sp/>=<sp/>_mm_add_epi32(imm2_1,<sp/>*(v4si*)_pi32avx_1);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/>imm2_2<sp/>=<sp/>_mm_add_epi32(imm2_2,<sp/>*(v4si*)_pi32avx_1);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/>imm2_1<sp/>=<sp/>_mm_and_si128(imm2_1,<sp/>*(v4si*)_pi32avx_inv1);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/>imm2_2<sp/>=<sp/>_mm_and_si128(imm2_2,<sp/>*(v4si*)_pi32avx_inv1);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/>COPY_XMM_TO_IMM(imm2_1,imm2_2,imm2);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_cvtepi32_ps(imm2);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/>imm2_1<sp/>=<sp/>_mm_sub_epi32(imm2_1,<sp/>*(v4si*)_pi32avx_2);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/>imm2_2<sp/>=<sp/>_mm_sub_epi32(imm2_2,<sp/>*(v4si*)_pi32avx_2);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/>imm0_1<sp/>=<sp/>_mm_andnot_si128(imm2_1,<sp/>*(v4si*)_pi32avx_4);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/>imm0_2<sp/>=<sp/>_mm_andnot_si128(imm2_2,<sp/>*(v4si*)_pi32avx_4);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/>imm0_1<sp/>=<sp/>_mm_slli_epi32(imm0_1,<sp/>29);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/>imm0_2<sp/>=<sp/>_mm_slli_epi32(imm0_2,<sp/>29);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/>COPY_XMM_TO_IMM(imm0_1,<sp/>imm0_2,<sp/>imm0);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/>imm2_1<sp/>=<sp/>_mm_and_si128(imm2_1,<sp/>*(v4si*)_pi32avx_2);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/>imm2_2<sp/>=<sp/>_mm_and_si128(imm2_2,<sp/>*(v4si*)_pi32avx_2);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/>imm2_1<sp/>=<sp/>_mm_cmpeq_epi32(imm2_1,<sp/>_mm_setzero_si128());</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/>imm2_2<sp/>=<sp/>_mm_cmpeq_epi32(imm2_2,<sp/>_mm_setzero_si128());</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/>COPY_XMM_TO_IMM(imm2_1,<sp/>imm2_2,<sp/>imm2);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/>v8sf<sp/>sign_bit<sp/>=<sp/>_mm256_castsi256_ps(imm0);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/>v8sf<sp/>poly_mask<sp/>=<sp/>_mm256_castsi256_ps(imm2);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>magic<sp/>pass:<sp/>&quot;Extended<sp/>precision<sp/>modular<sp/>arithmetic&quot;</highlight></codeline>
<codeline lineno="520"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>((x<sp/>-<sp/>y<sp/>*<sp/>DP1)<sp/>-<sp/>y<sp/>*<sp/>DP2)<sp/>-<sp/>y<sp/>*<sp/>DP3;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/>xmm1<sp/>=<sp/>*(v8sf*)_ps256_minus_cephes_DP1;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/>xmm2<sp/>=<sp/>*(v8sf*)_ps256_minus_cephes_DP2;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/>xmm3<sp/>=<sp/>*(v8sf*)_ps256_minus_cephes_DP3;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/>xmm1<sp/>=<sp/>_mm256_mul_ps(y,<sp/>xmm1);</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/>xmm2<sp/>=<sp/>_mm256_mul_ps(y,<sp/>xmm2);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/>xmm3<sp/>=<sp/>_mm256_mul_ps(y,<sp/>xmm3);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/>x<sp/>=<sp/>_mm256_add_ps(x,<sp/>xmm1);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/>x<sp/>=<sp/>_mm256_add_ps(x,<sp/>xmm2);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/>x<sp/>=<sp/>_mm256_add_ps(x,<sp/>xmm3);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Evaluate<sp/>the<sp/>first<sp/>polynom<sp/><sp/>(0<sp/>&lt;=<sp/>x<sp/>&lt;=<sp/>Pi/4)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>*(v8sf*)_ps256_coscof_p0;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/>v8sf<sp/>z<sp/>=<sp/>_mm256_mul_ps(x,x);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_mul_ps(y,<sp/>z);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_add_ps(y,<sp/>*(v8sf*)_ps256_coscof_p1);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_mul_ps(y,<sp/>z);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_add_ps(y,<sp/>*(v8sf*)_ps256_coscof_p2);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_mul_ps(y,<sp/>z);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_mul_ps(y,<sp/>z);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/>v8sf<sp/>tmp<sp/>=<sp/>_mm256_mul_ps(z,<sp/>*(v8sf*)_ps256_0p5);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_sub_ps(y,<sp/>tmp);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_add_ps(y,<sp/>*(v8sf*)_ps256_1);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Evaluate<sp/>the<sp/>second<sp/>polynom<sp/><sp/>(Pi/4<sp/>&lt;=<sp/>x<sp/>&lt;=<sp/>0)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/>v8sf<sp/>y2<sp/>=<sp/>*(v8sf*)_ps256_sincof_p0;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/>y2<sp/>=<sp/>_mm256_mul_ps(y2,<sp/>z);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/>y2<sp/>=<sp/>_mm256_add_ps(y2,<sp/>*(v8sf*)_ps256_sincof_p1);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/>y2<sp/>=<sp/>_mm256_mul_ps(y2,<sp/>z);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/>y2<sp/>=<sp/>_mm256_add_ps(y2,<sp/>*(v8sf*)_ps256_sincof_p2);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/>y2<sp/>=<sp/>_mm256_mul_ps(y2,<sp/>z);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/>y2<sp/>=<sp/>_mm256_mul_ps(y2,<sp/>x);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/>y2<sp/>=<sp/>_mm256_add_ps(y2,<sp/>x);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>select<sp/>the<sp/>correct<sp/>result<sp/>from<sp/>the<sp/>two<sp/>polynoms<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/>xmm3<sp/>=<sp/>poly_mask;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/>y2<sp/>=<sp/>_mm256_and_ps(xmm3,<sp/>y2);<sp/></highlight><highlight class="comment">//,<sp/>xmm3);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_andnot_ps(xmm3,<sp/>y);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_add_ps(y,y2);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>update<sp/>the<sp/>sign<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_xor_ps(y,<sp/>sign_bit);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>y;</highlight></codeline>
<codeline lineno="565"><highlight class="normal">}</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>since<sp/>sin256_ps<sp/>and<sp/>cos256_ps<sp/>are<sp/>almost<sp/>identical,<sp/>sincos256_ps<sp/>could<sp/>replace<sp/>both<sp/>of<sp/>them..</highlight></codeline>
<codeline lineno="568"><highlight class="comment"><sp/><sp/><sp/>it<sp/>is<sp/>almost<sp/>as<sp/>fast,<sp/>and<sp/>gives<sp/>you<sp/>a<sp/>free<sp/>cosine<sp/>with<sp/>your<sp/>sine<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>sincos256_ps(v8sf<sp/>x,<sp/>v8sf<sp/>*s,<sp/>v8sf<sp/>*c)<sp/>{</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/>v8sf<sp/>xmm1,<sp/>xmm2,<sp/>xmm3<sp/>=<sp/>_mm256_setzero_ps(),<sp/>sign_bit_sin,<sp/>y;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/>v8si<sp/>imm0,<sp/>imm2,<sp/>imm4;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__AVX2__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/>v4si<sp/>imm0_1,<sp/>imm0_2;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/>v4si<sp/>imm2_1,<sp/>imm2_2;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/>v4si<sp/>imm4_1,<sp/>imm4_2;</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/>sign_bit_sin<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>take<sp/>the<sp/>absolute<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/>x<sp/>=<sp/>_mm256_and_ps(x,<sp/>*(v8sf*)_ps256_inv_sign_mask);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>extract<sp/>the<sp/>sign<sp/>bit<sp/>(upper<sp/>one)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/>sign_bit_sin<sp/>=<sp/>_mm256_and_ps(sign_bit_sin,<sp/>*(v8sf*)_ps256_sign_mask);</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>scale<sp/>by<sp/>4/Pi<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_mul_ps(x,<sp/>*(v8sf*)_ps256_cephes_FOPI);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__AVX2__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>store<sp/>the<sp/>integer<sp/>part<sp/>of<sp/>y<sp/>in<sp/>imm2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/>imm2<sp/>=<sp/>_mm256_cvttps_epi32(y);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>j=(j+1)<sp/>&amp;<sp/>(~1)<sp/>(see<sp/>the<sp/>cephes<sp/>sources)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/>imm2<sp/>=<sp/>_mm256_add_epi32(imm2,<sp/>*(v8si*)_pi32_256_1);</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/>imm2<sp/>=<sp/>_mm256_and_si256(imm2,<sp/>*(v8si*)_pi32_256_inv1);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_cvtepi32_ps(imm2);</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/>imm4<sp/>=<sp/>imm2;</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>the<sp/>swap<sp/>sign<sp/>flag<sp/>for<sp/>the<sp/>sine<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/>imm0<sp/>=<sp/>_mm256_and_si256(imm2,<sp/>*(v8si*)_pi32_256_4);</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/>imm0<sp/>=<sp/>_mm256_slli_epi32(imm0,<sp/>29);</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//v8sf<sp/>swap_sign_bit_sin<sp/>=<sp/>_mm256_castsi256_ps(imm0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>the<sp/>polynom<sp/>selection<sp/>mask<sp/>for<sp/>the<sp/>sine*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/>imm2<sp/>=<sp/>_mm256_and_si256(imm2,<sp/>*(v8si*)_pi32_256_2);</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/>imm2<sp/>=<sp/>_mm256_cmpeq_epi32(imm2,<sp/>*(v8si*)_pi32_256_0);</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//v8sf<sp/>poly_mask<sp/>=<sp/>_mm256_castsi256_ps(imm2);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>we<sp/>use<sp/>SSE2<sp/>routines<sp/>to<sp/>perform<sp/>the<sp/>integer<sp/>ops<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/>COPY_IMM_TO_XMM(_mm256_cvttps_epi32(y),imm2_1,imm2_2);</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/>imm2_1<sp/>=<sp/>_mm_add_epi32(imm2_1,<sp/>*(v4si*)_pi32avx_1);</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/>imm2_2<sp/>=<sp/>_mm_add_epi32(imm2_2,<sp/>*(v4si*)_pi32avx_1);</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/>imm2_1<sp/>=<sp/>_mm_and_si128(imm2_1,<sp/>*(v4si*)_pi32avx_inv1);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/>imm2_2<sp/>=<sp/>_mm_and_si128(imm2_2,<sp/>*(v4si*)_pi32avx_inv1);</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/>COPY_XMM_TO_IMM(imm2_1,imm2_2,imm2);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_cvtepi32_ps(imm2);</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/>imm4_1<sp/>=<sp/>imm2_1;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/>imm4_2<sp/>=<sp/>imm2_2;</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/>imm0_1<sp/>=<sp/>_mm_and_si128(imm2_1,<sp/>*(v4si*)_pi32avx_4);</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/>imm0_2<sp/>=<sp/>_mm_and_si128(imm2_2,<sp/>*(v4si*)_pi32avx_4);</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/>imm0_1<sp/>=<sp/>_mm_slli_epi32(imm0_1,<sp/>29);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/>imm0_2<sp/>=<sp/>_mm_slli_epi32(imm0_2,<sp/>29);</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/>COPY_XMM_TO_IMM(imm0_1,<sp/>imm0_2,<sp/>imm0);</highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/>imm2_1<sp/>=<sp/>_mm_and_si128(imm2_1,<sp/>*(v4si*)_pi32avx_2);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/>imm2_2<sp/>=<sp/>_mm_and_si128(imm2_2,<sp/>*(v4si*)_pi32avx_2);</highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/>imm2_1<sp/>=<sp/>_mm_cmpeq_epi32(imm2_1,<sp/>_mm_setzero_si128());</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/>imm2_2<sp/>=<sp/>_mm_cmpeq_epi32(imm2_2,<sp/>_mm_setzero_si128());</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/>COPY_XMM_TO_IMM(imm2_1,<sp/>imm2_2,<sp/>imm2);</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/>v8sf<sp/>swap_sign_bit_sin<sp/>=<sp/>_mm256_castsi256_ps(imm0);</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/>v8sf<sp/>poly_mask<sp/>=<sp/>_mm256_castsi256_ps(imm2);</highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>magic<sp/>pass:<sp/>&quot;Extended<sp/>precision<sp/>modular<sp/>arithmetic&quot;</highlight></codeline>
<codeline lineno="645"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>((x<sp/>-<sp/>y<sp/>*<sp/>DP1)<sp/>-<sp/>y<sp/>*<sp/>DP2)<sp/>-<sp/>y<sp/>*<sp/>DP3;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/>xmm1<sp/>=<sp/>*(v8sf*)_ps256_minus_cephes_DP1;</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/>xmm2<sp/>=<sp/>*(v8sf*)_ps256_minus_cephes_DP2;</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/>xmm3<sp/>=<sp/>*(v8sf*)_ps256_minus_cephes_DP3;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/>xmm1<sp/>=<sp/>_mm256_mul_ps(y,<sp/>xmm1);</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/>xmm2<sp/>=<sp/>_mm256_mul_ps(y,<sp/>xmm2);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/>xmm3<sp/>=<sp/>_mm256_mul_ps(y,<sp/>xmm3);</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/>x<sp/>=<sp/>_mm256_add_ps(x,<sp/>xmm1);</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/>x<sp/>=<sp/>_mm256_add_ps(x,<sp/>xmm2);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/>x<sp/>=<sp/>_mm256_add_ps(x,<sp/>xmm3);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__AVX2__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/>imm4<sp/>=<sp/>_mm256_sub_epi32(imm4,<sp/>*(v8si*)_pi32_256_2);</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/>imm4<sp/>=<sp/><sp/>_mm256_andnot_si256(imm4,<sp/>*(v8si*)_pi32_256_4);</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/>imm4<sp/>=<sp/>_mm256_slli_epi32(imm4,<sp/>29);</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/>imm4_1<sp/>=<sp/>_mm_sub_epi32(imm4_1,<sp/>*(v4si*)_pi32avx_2);</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/>imm4_2<sp/>=<sp/>_mm_sub_epi32(imm4_2,<sp/>*(v4si*)_pi32avx_2);</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/>imm4_1<sp/>=<sp/>_mm_andnot_si128(imm4_1,<sp/>*(v4si*)_pi32avx_4);</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/>imm4_2<sp/>=<sp/>_mm_andnot_si128(imm4_2,<sp/>*(v4si*)_pi32avx_4);</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/>imm4_1<sp/>=<sp/>_mm_slli_epi32(imm4_1,<sp/>29);</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/>imm4_2<sp/>=<sp/>_mm_slli_epi32(imm4_2,<sp/>29);</highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/>COPY_XMM_TO_IMM(imm4_1,<sp/>imm4_2,<sp/>imm4);</highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/>v8sf<sp/>sign_bit_cos<sp/>=<sp/>_mm256_castsi256_ps(imm4);</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/>sign_bit_sin<sp/>=<sp/>_mm256_xor_ps(sign_bit_sin,<sp/>swap_sign_bit_sin);</highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Evaluate<sp/>the<sp/>first<sp/>polynom<sp/><sp/>(0<sp/>&lt;=<sp/>x<sp/>&lt;=<sp/>Pi/4)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/>v8sf<sp/>z<sp/>=<sp/>_mm256_mul_ps(x,x);</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>*(v8sf*)_ps256_coscof_p0;</highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_mul_ps(y,<sp/>z);</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_add_ps(y,<sp/>*(v8sf*)_ps256_coscof_p1);</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_mul_ps(y,<sp/>z);</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_add_ps(y,<sp/>*(v8sf*)_ps256_coscof_p2);</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_mul_ps(y,<sp/>z);</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_mul_ps(y,<sp/>z);</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/>v8sf<sp/>tmp<sp/>=<sp/>_mm256_mul_ps(z,<sp/>*(v8sf*)_ps256_0p5);</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_sub_ps(y,<sp/>tmp);</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_add_ps(y,<sp/>*(v8sf*)_ps256_1);</highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Evaluate<sp/>the<sp/>second<sp/>polynom<sp/><sp/>(Pi/4<sp/>&lt;=<sp/>x<sp/>&lt;=<sp/>0)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/>v8sf<sp/>y2<sp/>=<sp/>*(v8sf*)_ps256_sincof_p0;</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/>y2<sp/>=<sp/>_mm256_mul_ps(y2,<sp/>z);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/>y2<sp/>=<sp/>_mm256_add_ps(y2,<sp/>*(v8sf*)_ps256_sincof_p1);</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/>y2<sp/>=<sp/>_mm256_mul_ps(y2,<sp/>z);</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/>y2<sp/>=<sp/>_mm256_add_ps(y2,<sp/>*(v8sf*)_ps256_sincof_p2);</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/>y2<sp/>=<sp/>_mm256_mul_ps(y2,<sp/>z);</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/>y2<sp/>=<sp/>_mm256_mul_ps(y2,<sp/>x);</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/>y2<sp/>=<sp/>_mm256_add_ps(y2,<sp/>x);</highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>select<sp/>the<sp/>correct<sp/>result<sp/>from<sp/>the<sp/>two<sp/>polynoms<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/>xmm3<sp/>=<sp/>poly_mask;</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/>v8sf<sp/>ysin2<sp/>=<sp/>_mm256_and_ps(xmm3,<sp/>y2);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/>v8sf<sp/>ysin1<sp/>=<sp/>_mm256_andnot_ps(xmm3,<sp/>y);</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/>y2<sp/>=<sp/>_mm256_sub_ps(y2,ysin2);</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>_mm256_sub_ps(y,<sp/>ysin1);</highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/>xmm1<sp/>=<sp/>_mm256_add_ps(ysin1,ysin2);</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/>xmm2<sp/>=<sp/>_mm256_add_ps(y,y2);</highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>update<sp/>the<sp/>sign<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/>*s<sp/>=<sp/>_mm256_xor_ps(xmm1,<sp/>sign_bit_sin);</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/>*c<sp/>=<sp/>_mm256_xor_ps(xmm2,<sp/>sign_bit_cos);</highlight></codeline>
<codeline lineno="715"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/avx_mathfun.h"/>
  </compounddef>
</doxygen>
