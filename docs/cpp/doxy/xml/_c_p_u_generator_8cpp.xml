<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="_c_p_u_generator_8cpp" kind="file" language="C++">
    <compoundname>CPUGenerator.cpp</compoundname>
    <includes local="yes">ATen/CPUGenerator.h</includes>
    <incdepgraph>
      <node id="1456">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/CPUGenerator.cpp</label>
        <link refid="_c_p_u_generator_8cpp"/>
        <childnode refid="1457" relation="include">
        </childnode>
      </node>
      <node id="1457">
        <label>ATen/CPUGenerator.h</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceat">at</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="_c_p_u_generator_8cpp_1a685c57fdc4a174e48f1c212b9763a0ac" prot="public" static="no">
        <name>const_generator_cast</name>
        <param><defname>generator</defname></param>
        <initializer>dynamic_cast&lt;const CPUGenerator&amp;&gt;(generator)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/CPUGenerator.cpp" line="3" column="9" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/CPUGenerator.cpp" bodystart="3" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;ATen/CPUGenerator.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>const_generator_cast(generator)<sp/>\</highlight></codeline>
<codeline lineno="4"><highlight class="preprocessor"><sp/><sp/>dynamic_cast&lt;const<sp/>CPUGenerator&amp;&gt;(generator)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceat" kindref="compound">at</ref><sp/>{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal">CPUGenerator::CPUGenerator(Context<sp/>*<sp/>context_)</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/>:<sp/>context(context_),<sp/>generator(THGenerator_new())</highlight></codeline>
<codeline lineno="10"><highlight class="normal">{}</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal">CPUGenerator::~CPUGenerator()<sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(generator)</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>THGenerator_free(generator);</highlight></codeline>
<codeline lineno="15"><highlight class="normal">}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal">CPUGenerator&amp;<sp/>CPUGenerator::copy(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Generator&amp;<sp/>from)<sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/>THGenerator_copy(generator,<sp/>const_generator_cast(from).generator);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20"><highlight class="normal">}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal">CPUGenerator&amp;<sp/>CPUGenerator::free()<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/>THGenerator_free(generator);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="25"><highlight class="normal">}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal">uint64_t<sp/>CPUGenerator::seed()<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>THRandom_seed(generator);</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal">uint64_t<sp/>CPUGenerator::initialSeed()<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>THRandom_initialSeed(generator);</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal">CPUGenerator&amp;<sp/>CPUGenerator::manualSeed(uint64_t<sp/>seed)<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>THRandom_manualSeed(generator,<sp/>seed);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="38"><highlight class="normal">}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal">CPUGenerator&amp;<sp/>CPUGenerator::manualSeedAll(uint64_t<sp/>seed)<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>There&apos;s<sp/>only<sp/>one<sp/>CPU<sp/>generator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>manualSeed(seed);</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>CPUGenerator::unsafeGetTH()<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>generator;</highlight></codeline>
<codeline lineno="47"><highlight class="normal">}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>at</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/CPUGenerator.cpp"/>
  </compounddef>
</doxygen>
