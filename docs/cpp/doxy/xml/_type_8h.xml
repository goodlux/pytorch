<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="_type_8h" kind="file" language="C++">
    <compoundname>Type.h</compoundname>
    <includes refid="_allocator_8h" local="yes">ATen/Allocator.h</includes>
    <includes refid="_array_ref_8h" local="yes">ATen/ArrayRef.h</includes>
    <includes refid="_a_ten_general_8h" local="yes">ATen/ATenGeneral.h</includes>
    <includes refid="_generator_8h" local="yes">ATen/Generator.h</includes>
    <includes refid="_half_8h" local="yes">ATen/Half.h</includes>
    <includes refid="_scalar_8h" local="yes">ATen/Scalar.h</includes>
    <includes refid="_scalar_type_8h" local="yes">ATen/ScalarType.h</includes>
    <includes refid="_sparse_tensor_ref_8h" local="yes">ATen/SparseTensorRef.h</includes>
    <includes refid="build_2aten_2src_2_a_ten_2tensor_8h" local="yes">ATen/Tensor.h</includes>
    <includes refid="_deprecated_8h" local="yes">ATen/Deprecated.h</includes>
    <includes refid="_layout_8h" local="yes">ATen/Layout.h</includes>
    <includes local="yes">THNN/Reduction.h</includes>
    <includes local="no">array</includes>
    <includes local="no">cstddef</includes>
    <includes local="no">functional</includes>
    <includes local="no">limits</includes>
    <includes local="no">memory</includes>
    <incdepgraph>
      <node id="10631">
        <label>ATen/optional.h</label>
        <link refid="optional_8h_source"/>
        <childnode refid="10632" relation="include">
        </childnode>
        <childnode refid="10633" relation="include">
        </childnode>
        <childnode refid="10634" relation="include">
        </childnode>
        <childnode refid="10635" relation="include">
        </childnode>
        <childnode refid="10636" relation="include">
        </childnode>
        <childnode refid="10637" relation="include">
        </childnode>
        <childnode refid="10638" relation="include">
        </childnode>
      </node>
      <node id="10645">
        <label>ATen/Device.h</label>
        <link refid="_device_8h_source"/>
        <childnode refid="10629" relation="include">
        </childnode>
        <childnode refid="10646" relation="include">
        </childnode>
        <childnode refid="10639" relation="include">
        </childnode>
        <childnode refid="10661" relation="include">
        </childnode>
        <childnode refid="10637" relation="include">
        </childnode>
        <childnode refid="10636" relation="include">
        </childnode>
      </node>
      <node id="10644">
        <label>atomic</label>
      </node>
      <node id="10636">
        <label>functional</label>
      </node>
      <node id="10646">
        <label>ATen/ScalarType.h</label>
        <link refid="_scalar_type_8h_source"/>
        <childnode refid="10647" relation="include">
        </childnode>
        <childnode refid="10630" relation="include">
        </childnode>
        <childnode refid="10657" relation="include">
        </childnode>
        <childnode refid="10659" relation="include">
        </childnode>
        <childnode refid="10663" relation="include">
        </childnode>
      </node>
      <node id="10658">
        <label>limits</label>
      </node>
      <node id="10668">
        <label>assert.h</label>
      </node>
      <node id="10672">
        <label>ATen/Utils.h</label>
        <link refid="aten_2src_2_a_ten_2utils_8h_source"/>
        <childnode refid="10630" relation="include">
        </childnode>
        <childnode refid="10647" relation="include">
        </childnode>
        <childnode refid="10629" relation="include">
        </childnode>
        <childnode refid="10671" relation="include">
        </childnode>
        <childnode refid="10650" relation="include">
        </childnode>
        <childnode refid="10642" relation="include">
        </childnode>
        <childnode refid="10673" relation="include">
        </childnode>
        <childnode refid="10674" relation="include">
        </childnode>
      </node>
      <node id="10653">
        <label>iterator</label>
      </node>
      <node id="10667">
        <label>ATen/Scalar.h</label>
        <link refid="_scalar_8h_source"/>
        <childnode refid="10668" relation="include">
        </childnode>
        <childnode refid="10666" relation="include">
        </childnode>
        <childnode refid="10638" relation="include">
        </childnode>
        <childnode refid="10637" relation="include">
        </childnode>
        <childnode refid="10632" relation="include">
        </childnode>
        <childnode refid="10630" relation="include">
        </childnode>
        <childnode refid="10657" relation="include">
        </childnode>
        <childnode refid="10646" relation="include">
        </childnode>
        <childnode refid="10669" relation="include">
        </childnode>
        <childnode refid="10672" relation="include">
        </childnode>
      </node>
      <node id="10678">
        <label>TH/THStorageFunctions.hpp</label>
      </node>
      <node id="10659">
        <label>cstdint</label>
      </node>
      <node id="10681">
        <label>ATen/Deprecated.h</label>
        <link refid="_deprecated_8h_source"/>
      </node>
      <node id="10666">
        <label>stdint.h</label>
      </node>
      <node id="10660">
        <label>cmath</label>
      </node>
      <node id="10635">
        <label>cassert</label>
      </node>
      <node id="10662">
        <label>Half-inl.h</label>
        <link refid="_half-inl_8h_source"/>
        <childnode refid="10630" relation="include">
        </childnode>
        <childnode refid="10652" relation="include">
        </childnode>
        <childnode refid="10658" relation="include">
        </childnode>
      </node>
      <node id="10638">
        <label>stdexcept</label>
      </node>
      <node id="10674">
        <label>numeric</label>
      </node>
      <node id="10670">
        <label>ATen/TensorImpl.h</label>
        <link refid="_tensor_impl_8h_source"/>
        <childnode refid="10644" relation="include">
        </childnode>
        <childnode refid="10627" relation="include">
        </childnode>
        <childnode refid="10643" relation="include">
        </childnode>
        <childnode refid="10646" relation="include">
        </childnode>
        <childnode refid="10631" relation="include">
        </childnode>
      </node>
      <node id="10657">
        <label>ATen/Half.h</label>
        <link refid="_half_8h_source"/>
        <childnode refid="10630" relation="include">
        </childnode>
        <childnode refid="10658" relation="include">
        </childnode>
        <childnode refid="10637" relation="include">
        </childnode>
        <childnode refid="10659" relation="include">
        </childnode>
        <childnode refid="10638" relation="include">
        </childnode>
        <childnode refid="10632" relation="include">
        </childnode>
        <childnode refid="10660" relation="include">
        </childnode>
        <childnode refid="10661" relation="include">
        </childnode>
        <childnode refid="10662" relation="include">
        </childnode>
      </node>
      <node id="10643">
        <label>ATen/Retainable.h</label>
        <link refid="_retainable_8h_source"/>
        <childnode refid="10644" relation="include">
        </childnode>
      </node>
      <node id="10669">
        <label>ATen/TensorBase.h</label>
        <link refid="_tensor_base_8h_source"/>
        <childnode refid="10670" relation="include">
        </childnode>
        <childnode refid="10671" relation="include">
        </childnode>
      </node>
      <node id="10637">
        <label>string</label>
      </node>
      <node id="10626">
        <label>ATen/Allocator.h</label>
        <link refid="_allocator_8h_source"/>
        <childnode refid="10627" relation="include">
        </childnode>
        <childnode refid="10628" relation="include">
        </childnode>
        <childnode refid="10629" relation="include">
        </childnode>
        <childnode refid="10643" relation="include">
        </childnode>
        <childnode refid="10645" relation="include">
        </childnode>
        <childnode refid="10664" relation="include">
        </childnode>
      </node>
      <node id="10640">
        <label>exception</label>
      </node>
      <node id="10628">
        <label>stddef.h</label>
      </node>
      <node id="10671">
        <label>ATen/UndefinedTensor.h</label>
        <link refid="_undefined_tensor_8h_source"/>
        <childnode refid="10670" relation="include">
        </childnode>
      </node>
      <node id="10649">
        <label>AlignOf.h</label>
        <link refid="_align_of_8h_source"/>
        <childnode refid="10639" relation="include">
        </childnode>
      </node>
      <node id="10677">
        <label>ATen/Storage.h</label>
        <link refid="_storage_8h_source"/>
        <childnode refid="10667" relation="include">
        </childnode>
        <childnode refid="10678" relation="include">
        </childnode>
      </node>
      <node id="10641">
        <label>ostream</label>
      </node>
      <node id="10647">
        <label>ATen/ArrayRef.h</label>
        <link refid="_array_ref_8h_source"/>
        <childnode refid="10629" relation="include">
        </childnode>
        <childnode refid="10648" relation="include">
        </childnode>
        <childnode refid="10655" relation="include">
        </childnode>
        <childnode refid="10653" relation="include">
        </childnode>
        <childnode refid="10656" relation="include">
        </childnode>
      </node>
      <node id="10675">
        <label>ATen/SparseTensorRef.h</label>
        <link refid="_sparse_tensor_ref_8h_source"/>
      </node>
      <node id="10630">
        <label>ATen/ATenGeneral.h</label>
        <link refid="_a_ten_general_8h_source"/>
      </node>
      <node id="10679">
        <label>ATen/TensorAccessor.h</label>
        <link refid="_tensor_accessor_8h_source"/>
        <childnode refid="10639" relation="include">
        </childnode>
        <childnode refid="10666" relation="include">
        </childnode>
        <childnode refid="10646" relation="include">
        </childnode>
      </node>
      <node id="10673">
        <label>typeinfo</label>
      </node>
      <node id="10664">
        <label>ATen/detail/UniqueVoidPtr.h</label>
        <link refid="_unique_void_ptr_8h_source"/>
        <childnode refid="10627" relation="include">
        </childnode>
        <childnode refid="10630" relation="include">
        </childnode>
      </node>
      <node id="10656">
        <label>vector</label>
      </node>
      <node id="10682">
        <label>THNN/Reduction.h</label>
      </node>
      <node id="10654">
        <label>new</label>
      </node>
      <node id="10632">
        <label>utility</label>
      </node>
      <node id="10655">
        <label>array</label>
      </node>
      <node id="10642">
        <label>sstream</label>
      </node>
      <node id="10661">
        <label>iosfwd</label>
      </node>
      <node id="10651">
        <label>cstdlib</label>
      </node>
      <node id="10663">
        <label>iostream</label>
      </node>
      <node id="10625">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Type.h</label>
        <link refid="_type_8h"/>
        <childnode refid="10626" relation="include">
        </childnode>
        <childnode refid="10647" relation="include">
        </childnode>
        <childnode refid="10630" relation="include">
        </childnode>
        <childnode refid="10665" relation="include">
        </childnode>
        <childnode refid="10657" relation="include">
        </childnode>
        <childnode refid="10667" relation="include">
        </childnode>
        <childnode refid="10646" relation="include">
        </childnode>
        <childnode refid="10675" relation="include">
        </childnode>
        <childnode refid="10676" relation="include">
        </childnode>
        <childnode refid="10681" relation="include">
        </childnode>
        <childnode refid="10680" relation="include">
        </childnode>
        <childnode refid="10682" relation="include">
        </childnode>
        <childnode refid="10655" relation="include">
        </childnode>
        <childnode refid="10639" relation="include">
        </childnode>
        <childnode refid="10636" relation="include">
        </childnode>
        <childnode refid="10658" relation="include">
        </childnode>
        <childnode refid="10627" relation="include">
        </childnode>
      </node>
      <node id="10639">
        <label>cstddef</label>
      </node>
      <node id="10629">
        <label>ATen/Error.h</label>
        <link refid="_error_8h_source"/>
        <childnode refid="10630" relation="include">
        </childnode>
        <childnode refid="10631" relation="include">
        </childnode>
        <childnode refid="10639" relation="include">
        </childnode>
        <childnode refid="10640" relation="include">
        </childnode>
        <childnode refid="10641" relation="include">
        </childnode>
        <childnode refid="10642" relation="include">
        </childnode>
        <childnode refid="10637" relation="include">
        </childnode>
      </node>
      <node id="10676">
        <label>ATen/Tensor.h</label>
        <link refid="build_2aten_2src_2_a_ten_2tensor_8h_source"/>
        <childnode refid="10665" relation="include">
        </childnode>
        <childnode refid="10667" relation="include">
        </childnode>
        <childnode refid="10646" relation="include">
        </childnode>
        <childnode refid="10675" relation="include">
        </childnode>
        <childnode refid="10677" relation="include">
        </childnode>
        <childnode refid="10679" relation="include">
        </childnode>
        <childnode refid="10669" relation="include">
        </childnode>
        <childnode refid="10670" relation="include">
        </childnode>
        <childnode refid="10672" relation="include">
        </childnode>
        <childnode refid="10645" relation="include">
        </childnode>
        <childnode refid="10680" relation="include">
        </childnode>
        <childnode refid="10631" relation="include">
        </childnode>
      </node>
      <node id="10633">
        <label>type_traits</label>
      </node>
      <node id="10680">
        <label>ATen/Layout.h</label>
        <link refid="_layout_8h_source"/>
        <childnode refid="10646" relation="include">
        </childnode>
        <childnode refid="10629" relation="include">
        </childnode>
        <childnode refid="10663" relation="include">
        </childnode>
      </node>
      <node id="10648">
        <label>ATen/SmallVector.h</label>
        <link refid="_small_vector_8h_source"/>
        <childnode refid="10649" relation="include">
        </childnode>
        <childnode refid="10650" relation="include">
        </childnode>
        <childnode refid="10635" relation="include">
        </childnode>
        <childnode refid="10639" relation="include">
        </childnode>
        <childnode refid="10651" relation="include">
        </childnode>
        <childnode refid="10652" relation="include">
        </childnode>
        <childnode refid="10634" relation="include">
        </childnode>
        <childnode refid="10653" relation="include">
        </childnode>
        <childnode refid="10627" relation="include">
        </childnode>
        <childnode refid="10654" relation="include">
        </childnode>
        <childnode refid="10633" relation="include">
        </childnode>
        <childnode refid="10632" relation="include">
        </childnode>
        <childnode refid="10630" relation="include">
        </childnode>
      </node>
      <node id="10650">
        <label>algorithm</label>
      </node>
      <node id="10665">
        <label>ATen/Generator.h</label>
        <link refid="_generator_8h_source"/>
        <childnode refid="10666" relation="include">
        </childnode>
      </node>
      <node id="10652">
        <label>cstring</label>
      </node>
      <node id="10627">
        <label>memory</label>
      </node>
      <node id="10634">
        <label>initializer_list</label>
      </node>
    </incdepgraph>
    <innerclass refid="structat_1_1_type" prot="public">at::Type</innerclass>
    <innernamespace refid="namespaceat">at</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>${generated_comment}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ATen/Allocator.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ATen/ArrayRef.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ATen/ATenGeneral.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ATen/Generator.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ATen/Half.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ATen/Scalar.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ATen/ScalarType.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ATen/SparseTensorRef.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ATen/Tensor.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ATen/Deprecated.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ATen/Layout.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;THNN/Reduction.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;array&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstddef&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>solve<sp/>the<sp/>conflict<sp/>of<sp/>s_addr<sp/>in<sp/>inaddr.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>s_addr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>s_addr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceat" kindref="compound">at</ref><sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Context;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Allocator;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Generator;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Storage;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>noop_deleter(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/>{}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>TypeID<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>${type_ids}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>Undefined,</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>NumOptions</highlight></codeline>
<codeline lineno="44"><highlight class="normal">};</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="structat_1_1_type" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">AT_API<sp/><ref refid="structat_1_1_type" kindref="compound">Type</ref><sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structat_1_1_type" kindref="compound">Type</ref>(<ref refid="classat_1_1_context" kindref="compound">Context</ref>*<sp/>context,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_variable,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_undefined)</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>context(context),<sp/>is_variable_(is_variable),<sp/>is_undefined_(is_undefined)<sp/>{}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="structat_1_1_type" kindref="compound">Type</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>ScalarType<sp/>scalarType()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>Backend<sp/>backend()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>Layout<sp/><ref refid="namespaceat_1a77ae26eb5b3908e51a7cd9b6bb69d265" kindref="member">layout</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>layout_from_backend(backend());<sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_cuda()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_sparse()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_distributed()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_variable()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>is_variable_;<sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_undefined()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>is_undefined_;<sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>registerCPU(<ref refid="classat_1_1_context" kindref="compound">Context</ref><sp/>*<sp/>context);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;Storage&gt;<sp/>storage()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;Storage&gt;<sp/>storage(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;Storage&gt;<sp/>storageFromBlob(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>data,<sp/>int64_t<sp/>size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)&gt;<sp/>&amp;<sp/>deleter=noop_deleter)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;Storage&gt;<sp/>storageWithAllocator(int64_t<sp/>size,<sp/><ref refid="structat_1_1_allocator" kindref="compound">Allocator</ref>*<sp/>allocator)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;Generator&gt;<sp/>generator()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref><sp/>unsafeTensorFromTH(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>th_pointer,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>retain)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;Storage&gt;<sp/>unsafeStorageFromTH(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>th_pointer,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>retain)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>toString()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>elementSizeInBytes()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="structat_1_1_type" kindref="compound">Type</ref><sp/>&amp;<sp/>toBackend(Backend<sp/>b)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="structat_1_1_type" kindref="compound">Type</ref><sp/>&amp;<sp/>toScalarType(ScalarType<sp/>s)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><ref refid="structat_1_1_type" kindref="compound">Type</ref><sp/>&amp;<sp/>toSparse()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;toBackend(at::toSparse(this-&gt;backend()));</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><ref refid="structat_1_1_type" kindref="compound">Type</ref><sp/>&amp;<sp/>toDense()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;toBackend(at::toDense(this-&gt;backend()));</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><ref refid="classat_1_1_context" kindref="compound">Context</ref>&amp;<sp/>get_context()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*context;<sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>contingious<sp/>IDs<sp/>for<sp/>all<sp/>types<sp/>in<sp/>the<sp/>system</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>external<sp/>dispatch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>TypeID<sp/>ID()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref><sp/>copy(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref><sp/>&amp;<sp/>src,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>non_blocking=</highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref><sp/>&amp;<sp/>copy_(<ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref><sp/>&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref><sp/>&amp;<sp/>src,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>non_blocking=</highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref><sp/>&amp;<sp/>s_copy_(<ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref><sp/>&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref><sp/>&amp;<sp/>src,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>non_blocking)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref><sp/>&amp;<sp/>_s_copy_from(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref><sp/>&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref><sp/>&amp;<sp/>dst,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>non_blocking)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref><sp/>tensorFromBlob(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>data,<sp/><ref refid="classat_1_1_array_ref" kindref="compound">IntList</ref><sp/>sizes,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)&gt;<sp/>&amp;<sp/>deleter=noop_deleter)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref><sp/>tensorFromBlob(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>data,<sp/><ref refid="classat_1_1_array_ref" kindref="compound">IntList</ref><sp/>sizes,<sp/><ref refid="classat_1_1_array_ref" kindref="compound">IntList</ref><sp/>strides,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)&gt;<sp/>&amp;<sp/>deleter=noop_deleter)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref><sp/>tensorWithAllocator(<ref refid="classat_1_1_array_ref" kindref="compound">IntList</ref><sp/>sizes,<sp/><ref refid="structat_1_1_allocator" kindref="compound">Allocator</ref>*<sp/>allocator)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref><sp/>tensorWithAllocator(<ref refid="classat_1_1_array_ref" kindref="compound">IntList</ref><sp/>sizes,<sp/><ref refid="classat_1_1_array_ref" kindref="compound">IntList</ref><sp/>strides,<sp/><ref refid="structat_1_1_allocator" kindref="compound">Allocator</ref>*<sp/>allocator)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref><sp/>scalarTensor(<ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref><sp/>s)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structat_1_1_type" kindref="compound">Type</ref>&amp;<sp/>other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structat_1_1_type" kindref="compound">Type</ref>&amp;<sp/>other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>example</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>virtual<sp/>Tensor<sp/>*<sp/>add(Tensor<sp/>&amp;<sp/>a,<sp/>Tensor<sp/>&amp;<sp/>b)<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>${type_method_declarations}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><ref refid="classat_1_1_context" kindref="compound">Context</ref>*<sp/>context;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_variable_;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_undefined_;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal">};</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106" refid="structat_1_1_tensor_1ae5fe03a55a50933e6f2e51c4930ea4cc" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structat_1_1_tensor_1ae5fe03a55a50933e6f2e51c4930ea4cc" kindref="member">Tensor::is_variable</ref>()<sp/>const<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type().is_variable();</highlight></codeline>
<codeline lineno="108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110" refid="structat_1_1_tensor_1acb9e0d281b1fa351141cbc61730db10a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>ScalarType<sp/><ref refid="structat_1_1_tensor_1acb9e0d281b1fa351141cbc61730db10a" kindref="member">Tensor::dtype</ref>()<sp/>const<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type().scalarType();</highlight></codeline>
<codeline lineno="112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114" refid="structat_1_1_tensor_1ae354b0becb671916dceec56663fedda1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Layout<sp/><ref refid="structat_1_1_tensor_1ae354b0becb671916dceec56663fedda1" kindref="member">Tensor::layout</ref>()<sp/>const<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type().layout();</highlight></codeline>
<codeline lineno="116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118" refid="structat_1_1_tensor_1ad111f2086ee52a8b4c489033085af9a6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structat_1_1_device" kindref="compound">Device</ref><sp/><ref refid="structat_1_1_tensor_1ad111f2086ee52a8b4c489033085af9a6" kindref="member">Tensor::device</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structat_1_1_device" kindref="compound">Device</ref>(type().backend(),<sp/>type().is_cuda()<sp/>?<sp/>get_device()<sp/>:<sp/>-1);</highlight></codeline>
<codeline lineno="120"><highlight class="normal">}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>at</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Type.h"/>
  </compounddef>
</doxygen>
