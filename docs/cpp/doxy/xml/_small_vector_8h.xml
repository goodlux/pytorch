<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="_small_vector_8h" kind="file" language="C++">
    <compoundname>SmallVector.h</compoundname>
    <includes refid="_align_of_8h" local="yes">AlignOf.h</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">cassert</includes>
    <includes local="no">cstddef</includes>
    <includes local="no">cstdlib</includes>
    <includes local="no">cstring</includes>
    <includes local="no">initializer_list</includes>
    <includes local="no">iterator</includes>
    <includes local="no">memory</includes>
    <includes local="no">new</includes>
    <includes local="no">type_traits</includes>
    <includes local="no">utility</includes>
    <includes refid="_a_ten_general_8h" local="no">ATen/ATenGeneral.h</includes>
    <includedby refid="_array_ref_8h" local="no">/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/ArrayRef.h</includedby>
    <includedby refid="_dim_vector_8h" local="yes">/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/DimVector.h</includedby>
    <includedby refid="_small_vector_8cpp" local="yes">/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.cpp</includedby>
    <incdepgraph>
      <node id="9633">
        <label>iterator</label>
      </node>
      <node id="9629">
        <label>cassert</label>
      </node>
      <node id="9626">
        <label>AlignOf.h</label>
        <link refid="_align_of_8h_source"/>
        <childnode refid="9627" relation="include">
        </childnode>
      </node>
      <node id="9638">
        <label>ATen/ATenGeneral.h</label>
        <link refid="_a_ten_general_8h_source"/>
      </node>
      <node id="9635">
        <label>new</label>
      </node>
      <node id="9637">
        <label>utility</label>
      </node>
      <node id="9630">
        <label>cstdlib</label>
      </node>
      <node id="9627">
        <label>cstddef</label>
      </node>
      <node id="9636">
        <label>type_traits</label>
      </node>
      <node id="9625">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.h</label>
        <link refid="_small_vector_8h"/>
        <childnode refid="9626" relation="include">
        </childnode>
        <childnode refid="9628" relation="include">
        </childnode>
        <childnode refid="9629" relation="include">
        </childnode>
        <childnode refid="9627" relation="include">
        </childnode>
        <childnode refid="9630" relation="include">
        </childnode>
        <childnode refid="9631" relation="include">
        </childnode>
        <childnode refid="9632" relation="include">
        </childnode>
        <childnode refid="9633" relation="include">
        </childnode>
        <childnode refid="9634" relation="include">
        </childnode>
        <childnode refid="9635" relation="include">
        </childnode>
        <childnode refid="9636" relation="include">
        </childnode>
        <childnode refid="9637" relation="include">
        </childnode>
        <childnode refid="9638" relation="include">
        </childnode>
      </node>
      <node id="9628">
        <label>algorithm</label>
      </node>
      <node id="9631">
        <label>cstring</label>
      </node>
      <node id="9634">
        <label>memory</label>
      </node>
      <node id="9632">
        <label>initializer_list</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="9710">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/detail/CUDAHooksInterface.h</label>
        <link refid="_c_u_d_a_hooks_interface_8h_source"/>
        <childnode refid="9711" relation="include">
        </childnode>
        <childnode refid="9716" relation="include">
        </childnode>
        <childnode refid="9693" relation="include">
        </childnode>
      </node>
      <node id="9707">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/Device.h</label>
        <link refid="_device_8h_source"/>
        <childnode refid="9661" relation="include">
        </childnode>
        <childnode refid="9663" relation="include">
        </childnode>
        <childnode refid="9650" relation="include">
        </childnode>
        <childnode refid="9708" relation="include">
        </childnode>
        <childnode refid="9652" relation="include">
        </childnode>
        <childnode refid="9693" relation="include">
        </childnode>
        <childnode refid="9696" relation="include">
        </childnode>
        <childnode refid="9717" relation="include">
        </childnode>
        <childnode refid="9695" relation="include">
        </childnode>
      </node>
      <node id="9657">
        <label>/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/modules/rnn.h</label>
        <link refid="rnn_8h_source"/>
        <childnode refid="9643" relation="include">
        </childnode>
      </node>
      <node id="9681">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/UnaryOpsKernel.h</label>
        <link refid="_unary_ops_kernel_8h_source"/>
      </node>
      <node id="9723">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/ScalarTypeUtils.h</label>
        <link refid="_scalar_type_utils_8h_source"/>
      </node>
      <node id="9717">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Tensor.h</label>
        <link refid="aten_2src_2_a_ten_2templates_2tensor_8h_source"/>
      </node>
      <node id="9649">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/ScalarType.h</label>
        <link refid="_scalar_type_8h_source"/>
        <childnode refid="9650" relation="include">
        </childnode>
        <childnode refid="9706" relation="include">
        </childnode>
        <childnode refid="9707" relation="include">
        </childnode>
        <childnode refid="9693" relation="include">
        </childnode>
        <childnode refid="9718" relation="include">
        </childnode>
        <childnode refid="9719" relation="include">
        </childnode>
        <childnode refid="9696" relation="include">
        </childnode>
        <childnode refid="9720" relation="include">
        </childnode>
        <childnode refid="9723" relation="include">
        </childnode>
        <childnode refid="9697" relation="include">
        </childnode>
        <childnode refid="9717" relation="include">
        </childnode>
        <childnode refid="9703" relation="include">
        </childnode>
        <childnode refid="9724" relation="include">
        </childnode>
        <childnode refid="9725" relation="include">
        </childnode>
        <childnode refid="9695" relation="include">
        </childnode>
      </node>
      <node id="9645">
        <label>/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/torch.h</label>
        <link refid="torch_8h_source"/>
      </node>
      <node id="9700">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SparseTensorImpl.h</label>
        <link refid="_sparse_tensor_impl_8h_source"/>
        <childnode refid="9686" relation="include">
        </childnode>
      </node>
      <node id="9671">
        <label>/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/tensor.h</label>
        <link refid="torch_2csrc_2api_2include_2torch_2tensor_8h_source"/>
        <childnode refid="9654" relation="include">
        </childnode>
        <childnode refid="9672" relation="include">
        </childnode>
        <childnode refid="9674" relation="include">
        </childnode>
        <childnode refid="9653" relation="include">
        </childnode>
        <childnode refid="9661" relation="include">
        </childnode>
        <childnode refid="9655" relation="include">
        </childnode>
        <childnode refid="9642" relation="include">
        </childnode>
        <childnode refid="9656" relation="include">
        </childnode>
        <childnode refid="9658" relation="include">
        </childnode>
        <childnode refid="9659" relation="include">
        </childnode>
        <childnode refid="9660" relation="include">
        </childnode>
        <childnode refid="9657" relation="include">
        </childnode>
        <childnode refid="9662" relation="include">
        </childnode>
        <childnode refid="9663" relation="include">
        </childnode>
        <childnode refid="9675" relation="include">
        </childnode>
        <childnode refid="9664" relation="include">
        </childnode>
        <childnode refid="9673" relation="include">
        </childnode>
        <childnode refid="9670" relation="include">
        </childnode>
        <childnode refid="9666" relation="include">
        </childnode>
        <childnode refid="9646" relation="include">
        </childnode>
        <childnode refid="9645" relation="include">
        </childnode>
      </node>
      <node id="9655">
        <label>/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/modules/batchnorm.h</label>
        <link refid="batchnorm_8h_source"/>
        <childnode refid="9643" relation="include">
        </childnode>
      </node>
      <node id="9728">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/Utils.h</label>
        <link refid="aten_2src_2_a_ten_2utils_8h_source"/>
        <childnode refid="9650" relation="include">
        </childnode>
        <childnode refid="9729" relation="include">
        </childnode>
        <childnode refid="9711" relation="include">
        </childnode>
        <childnode refid="9730" relation="include">
        </childnode>
        <childnode refid="9648" relation="include">
        </childnode>
        <childnode refid="9720" relation="include">
        </childnode>
        <childnode refid="9717" relation="include">
        </childnode>
        <childnode refid="9705" relation="include">
        </childnode>
      </node>
      <node id="9720">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/Scalar.h</label>
        <link refid="_scalar_8h_source"/>
        <childnode refid="9650" relation="include">
        </childnode>
        <childnode refid="9651" relation="include">
        </childnode>
        <childnode refid="9652" relation="include">
        </childnode>
        <childnode refid="9721" relation="include">
        </childnode>
        <childnode refid="9722" relation="include">
        </childnode>
        <childnode refid="9694" relation="include">
        </childnode>
        <childnode refid="9717" relation="include">
        </childnode>
        <childnode refid="9702" relation="include">
        </childnode>
        <childnode refid="9703" relation="include">
        </childnode>
        <childnode refid="9704" relation="include">
        </childnode>
      </node>
      <node id="9730">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/cpu/vec256/vec256_base.h</label>
        <link refid="vec256__base_8h_source"/>
        <childnode refid="9731" relation="include">
        </childnode>
        <childnode refid="9733" relation="include">
        </childnode>
        <childnode refid="9734" relation="include">
        </childnode>
        <childnode refid="9735" relation="include">
        </childnode>
      </node>
      <node id="9683">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cuda/CuFFTUtils.h</label>
        <link refid="_cu_f_f_t_utils_8h_source"/>
        <childnode refid="9682" relation="include">
        </childnode>
      </node>
      <node id="9670">
        <label>/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/optim/sgd.h</label>
        <link refid="sgd_8h_source"/>
        <childnode refid="9665" relation="include">
        </childnode>
      </node>
      <node id="9673">
        <label>/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/optim/optimizer.h</label>
        <link refid="optimizer_8h_source"/>
        <childnode refid="9664" relation="include">
        </childnode>
        <childnode refid="9667" relation="include">
        </childnode>
        <childnode refid="9668" relation="include">
        </childnode>
        <childnode refid="9669" relation="include">
        </childnode>
        <childnode refid="9670" relation="include">
        </childnode>
        <childnode refid="9665" relation="include">
        </childnode>
      </node>
      <node id="9689">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/cpu/vml.h</label>
        <link refid="vml_8h_source"/>
      </node>
      <node id="9709">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/cuda/PinnedMemoryAllocator.h</label>
        <link refid="_pinned_memory_allocator_8h_source"/>
      </node>
      <node id="9701">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/TensorDerived.h</label>
        <link refid="_tensor_derived_8h_source"/>
      </node>
      <node id="9711">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/Context.h</label>
        <link refid="_context_8h_source"/>
        <childnode refid="9652" relation="include">
        </childnode>
        <childnode refid="9712" relation="include">
        </childnode>
        <childnode refid="9713" relation="include">
        </childnode>
        <childnode refid="9701" relation="include">
        </childnode>
        <childnode refid="9714" relation="include">
        </childnode>
        <childnode refid="9695" relation="include">
        </childnode>
        <childnode refid="9715" relation="include">
        </childnode>
      </node>
      <node id="9704">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/TensorOperators.h</label>
        <link refid="_tensor_operators_8h_source"/>
        <childnode refid="9652" relation="include">
        </childnode>
        <childnode refid="9697" relation="include">
        </childnode>
      </node>
      <node id="9662">
        <label>/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/modules/sequential.h</label>
        <link refid="sequential_8h_source"/>
        <childnode refid="9643" relation="include">
        </childnode>
      </node>
      <node id="9712">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/cuda/CUDAContext.h</label>
        <link refid="_c_u_d_a_context_8h_source"/>
        <childnode refid="9647" relation="include">
        </childnode>
        <childnode refid="9676" relation="include">
        </childnode>
        <childnode refid="9682" relation="include">
        </childnode>
      </node>
      <node id="9725">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/TensorImpl.h</label>
        <link refid="_tensor_impl_8h_source"/>
        <childnode refid="9650" relation="include">
        </childnode>
        <childnode refid="9700" relation="include">
        </childnode>
        <childnode refid="9717" relation="include">
        </childnode>
        <childnode refid="9701" relation="include">
        </childnode>
        <childnode refid="9726" relation="include">
        </childnode>
        <childnode refid="9727" relation="include">
        </childnode>
        <childnode refid="9736" relation="include">
        </childnode>
        <childnode refid="9738" relation="include">
        </childnode>
      </node>
      <node id="9731">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/cpu/vec256/vec256.h</label>
        <link refid="vec256_8h_source"/>
        <childnode refid="9732" relation="include">
        </childnode>
        <childnode refid="9689" relation="include">
        </childnode>
      </node>
      <node id="9732">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/cpu/vec256/functional.h</label>
        <link refid="aten_2src_2_a_ten_2cpu_2vec256_2functional_8h_source"/>
        <childnode refid="9689" relation="include">
        </childnode>
      </node>
      <node id="9726">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/TensorBase.h</label>
        <link refid="_tensor_base_8h_source"/>
        <childnode refid="9650" relation="include">
        </childnode>
        <childnode refid="9720" relation="include">
        </childnode>
        <childnode refid="9717" relation="include">
        </childnode>
      </node>
      <node id="9706">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/detail/VariableHooksInterface.h</label>
        <link refid="_variable_hooks_interface_8h_source"/>
      </node>
      <node id="9739">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/DimVector.h</label>
        <link refid="_dim_vector_8h_source"/>
        <childnode refid="9652" relation="include">
        </childnode>
      </node>
      <node id="9734">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/cpu/vec256/vec256_double.h</label>
        <link refid="vec256__double_8h_source"/>
        <childnode refid="9731" relation="include">
        </childnode>
      </node>
      <node id="9696">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/OptionsGuard.h</label>
        <link refid="_options_guard_8h_source"/>
        <childnode refid="9654" relation="include">
        </childnode>
        <childnode refid="9663" relation="include">
        </childnode>
        <childnode refid="9652" relation="include">
        </childnode>
      </node>
      <node id="9698">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/ExpandUtils.h</label>
        <link refid="_expand_utils_8h_source"/>
      </node>
      <node id="9641">
        <label>/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/expanding_array.h</label>
        <link refid="expanding__array_8h_source"/>
        <childnode refid="9642" relation="include">
        </childnode>
      </node>
      <node id="9708">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/Allocator.h</label>
        <link refid="_allocator_8h_source"/>
        <childnode refid="9652" relation="include">
        </childnode>
        <childnode refid="9709" relation="include">
        </childnode>
        <childnode refid="9710" relation="include">
        </childnode>
        <childnode refid="9703" relation="include">
        </childnode>
      </node>
      <node id="9667">
        <label>/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/optim/adam.h</label>
        <link refid="adam_8h_source"/>
        <childnode refid="9665" relation="include">
        </childnode>
      </node>
      <node id="9672">
        <label>/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/cursor.h</label>
        <link refid="cursor_8h_source"/>
        <childnode refid="9653" relation="include">
        </childnode>
        <childnode refid="9644" relation="include">
        </childnode>
        <childnode refid="9673" relation="include">
        </childnode>
      </node>
      <node id="9693">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/DeviceGuard.h</label>
        <link refid="_device_guard_8h_source"/>
        <childnode refid="9651" relation="include">
        </childnode>
        <childnode refid="9652" relation="include">
        </childnode>
        <childnode refid="9647" relation="include">
        </childnode>
        <childnode refid="9694" relation="include">
        </childnode>
        <childnode refid="9695" relation="include">
        </childnode>
      </node>
      <node id="9727">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/UndefinedTensor.h</label>
        <link refid="_undefined_tensor_8h_source"/>
        <childnode refid="9726" relation="include">
        </childnode>
        <childnode refid="9728" relation="include">
        </childnode>
      </node>
      <node id="9722">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/Storage.h</label>
        <link refid="_storage_8h_source"/>
        <childnode refid="9650" relation="include">
        </childnode>
        <childnode refid="9651" relation="include">
        </childnode>
        <childnode refid="9652" relation="include">
        </childnode>
        <childnode refid="9694" relation="include">
        </childnode>
        <childnode refid="9713" relation="include">
        </childnode>
        <childnode refid="9717" relation="include">
        </childnode>
      </node>
      <node id="9674">
        <label>/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/init.h</label>
        <link refid="init_8h_source"/>
      </node>
      <node id="9640">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/ArrayRef.h</label>
        <link refid="_array_ref_8h_source"/>
        <childnode refid="9641" relation="include">
        </childnode>
        <childnode refid="9646" relation="include">
        </childnode>
        <childnode refid="9647" relation="include">
        </childnode>
        <childnode refid="9648" relation="include">
        </childnode>
        <childnode refid="9649" relation="include">
        </childnode>
        <childnode refid="9703" relation="include">
        </childnode>
        <childnode refid="9728" relation="include">
        </childnode>
      </node>
      <node id="9737">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/TensorGeometry.h</label>
        <link refid="_tensor_geometry_8h_source"/>
        <childnode refid="9652" relation="include">
        </childnode>
        <childnode refid="9705" relation="include">
        </childnode>
      </node>
      <node id="9675">
        <label>/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/pimpl.h</label>
        <link refid="pimpl_8h_source"/>
        <childnode refid="9653" relation="include">
        </childnode>
        <childnode refid="9661" relation="include">
        </childnode>
        <childnode refid="9655" relation="include">
        </childnode>
        <childnode refid="9642" relation="include">
        </childnode>
        <childnode refid="9656" relation="include">
        </childnode>
        <childnode refid="9658" relation="include">
        </childnode>
        <childnode refid="9659" relation="include">
        </childnode>
        <childnode refid="9660" relation="include">
        </childnode>
        <childnode refid="9657" relation="include">
        </childnode>
        <childnode refid="9662" relation="include">
        </childnode>
        <childnode refid="9663" relation="include">
        </childnode>
        <childnode refid="9644" relation="include">
        </childnode>
        <childnode refid="9667" relation="include">
        </childnode>
        <childnode refid="9670" relation="include">
        </childnode>
      </node>
      <node id="9705">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/TensorUtils.h</label>
        <link refid="_tensor_utils_8h_source"/>
        <childnode refid="9690" relation="include">
        </childnode>
        <childnode refid="9676" relation="include">
        </childnode>
      </node>
      <node id="9648">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/MatrixRef.h</label>
        <link refid="_matrix_ref_8h_source"/>
      </node>
      <node id="9646">
        <label>/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/tensor_list_view.h</label>
        <link refid="tensor__list__view_8h_source"/>
        <childnode refid="9645" relation="include">
        </childnode>
      </node>
      <node id="9729">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/CheckGenerator.h</label>
        <link refid="_check_generator_8h_source"/>
        <childnode refid="9714" relation="include">
        </childnode>
        <childnode refid="9715" relation="include">
        </childnode>
      </node>
      <node id="9653">
        <label>/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/module.h</label>
        <link refid="module_8h_source"/>
        <childnode refid="9654" relation="include">
        </childnode>
        <childnode refid="9661" relation="include">
        </childnode>
        <childnode refid="9660" relation="include">
        </childnode>
        <childnode refid="9662" relation="include">
        </childnode>
        <childnode refid="9663" relation="include">
        </childnode>
        <childnode refid="9644" relation="include">
        </childnode>
        <childnode refid="9664" relation="include">
        </childnode>
        <childnode refid="9667" relation="include">
        </childnode>
        <childnode refid="9668" relation="include">
        </childnode>
        <childnode refid="9669" relation="include">
        </childnode>
        <childnode refid="9670" relation="include">
        </childnode>
      </node>
      <node id="9736">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/WrapDimUtils.h</label>
        <link refid="_wrap_dim_utils_8h_source"/>
        <childnode refid="9737" relation="include">
        </childnode>
        <childnode refid="9738" relation="include">
        </childnode>
      </node>
      <node id="9692">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/cudnn/Types.h</label>
        <link refid="_types_8h_source"/>
      </node>
      <node id="9724">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/TensorAccessor.h</label>
        <link refid="_tensor_accessor_8h_source"/>
        <childnode refid="9650" relation="include">
        </childnode>
        <childnode refid="9717" relation="include">
        </childnode>
      </node>
      <node id="9719">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/DispatchStub.h</label>
        <link refid="_dispatch_stub_8h_source"/>
        <childnode refid="9679" relation="include">
        </childnode>
        <childnode refid="9680" relation="include">
        </childnode>
        <childnode refid="9681" relation="include">
        </childnode>
      </node>
      <node id="9738">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/WrapDimUtilsMulti.h</label>
        <link refid="_wrap_dim_utils_multi_8h_source"/>
      </node>
      <node id="9643">
        <label>/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/modules.h</label>
        <link refid="modules_8h_source"/>
        <childnode refid="9644" relation="include">
        </childnode>
      </node>
      <node id="9658">
        <label>/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/modules/embedding.h</label>
        <link refid="embedding_8h_source"/>
        <childnode refid="9643" relation="include">
        </childnode>
      </node>
      <node id="9647">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/cuda/CUDAGuard.h</label>
        <link refid="cuda_2_c_u_d_a_guard_8h_source"/>
      </node>
      <node id="9713">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/StorageDerived.h</label>
        <link refid="_storage_derived_8h_source"/>
      </node>
      <node id="9687">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/TensorTransformations.h</label>
        <link refid="_tensor_transformations_8h_source"/>
      </node>
      <node id="9644">
        <label>/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn.h</label>
        <link refid="nn_8h_source"/>
        <childnode refid="9645" relation="include">
        </childnode>
      </node>
      <node id="9682">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cuda/CuFFTPlanCache.h</label>
        <link refid="_cu_f_f_t_plan_cache_8h_source"/>
      </node>
      <node id="9642">
        <label>/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/modules/conv.h</label>
        <link refid="conv_8h_source"/>
        <childnode refid="9643" relation="include">
        </childnode>
      </node>
      <node id="9669">
        <label>/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/optim/rmsprop.h</label>
        <link refid="rmsprop_8h_source"/>
        <childnode refid="9665" relation="include">
        </childnode>
      </node>
      <node id="9694">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Functions.h</label>
        <link refid="aten_2src_2_a_ten_2templates_2_functions_8h_source"/>
      </node>
      <node id="9665">
        <label>/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/optim.h</label>
        <link refid="optim_8h_source"/>
        <childnode refid="9666" relation="include">
        </childnode>
        <childnode refid="9645" relation="include">
        </childnode>
      </node>
      <node id="9714">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/TypeDerived.h</label>
        <link refid="_type_derived_8h_source"/>
      </node>
      <node id="9691">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/test/test_seed.h</label>
        <link refid="test__seed_8h_source"/>
      </node>
      <node id="9677">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/cudnn/Utils.h</label>
        <link refid="aten_2src_2_a_ten_2cudnn_2utils_8h_source"/>
      </node>
      <node id="9661">
        <label>/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/modules/any.h</label>
        <link refid="any_8h_source"/>
        <childnode refid="9662" relation="include">
        </childnode>
        <childnode refid="9643" relation="include">
        </childnode>
      </node>
      <node id="9676">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/cudnn/Descriptors.h</label>
        <link refid="cudnn_2_descriptors_8h_source"/>
      </node>
      <node id="9678">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/DLConvertor.h</label>
        <link refid="_d_l_convertor_8h_source"/>
      </node>
      <node id="9686">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/sparse/SparseUtils.h</label>
        <link refid="_sparse_utils_8h_source"/>
      </node>
      <node id="9651">
        <label>/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Functions.h</label>
        <link refid="build_2aten_2src_2_a_ten_2_functions_8h_source"/>
        <childnode refid="9652" relation="include">
        </childnode>
      </node>
      <node id="9733">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/cpu/vec256/vec256_float.h</label>
        <link refid="vec256__float_8h_source"/>
        <childnode refid="9731" relation="include">
        </childnode>
      </node>
      <node id="9666">
        <label>/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/serialization.h</label>
        <link refid="serialization_8h_source"/>
        <childnode refid="9645" relation="include">
        </childnode>
      </node>
      <node id="9735">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/cpu/vec256/vec256_int.h</label>
        <link refid="vec256__int_8h_source"/>
        <childnode refid="9731" relation="include">
        </childnode>
      </node>
      <node id="9663">
        <label>/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/parallel/data_parallel.h</label>
        <link refid="data__parallel_8h_source"/>
      </node>
      <node id="9690">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/CPUApplyUtils.h</label>
        <link refid="_c_p_u_apply_utils_8h_source"/>
      </node>
      <node id="9664">
        <label>/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/optim/adagrad.h</label>
        <link refid="adagrad_8h_source"/>
        <childnode refid="9665" relation="include">
        </childnode>
      </node>
      <node id="9656">
        <label>/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/modules/dropout.h</label>
        <link refid="dropout_8h_source"/>
        <childnode refid="9657" relation="include">
        </childnode>
        <childnode refid="9643" relation="include">
        </childnode>
      </node>
      <node id="9679">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/ReduceOpsKernel.h</label>
        <link refid="_reduce_ops_kernel_8h_source"/>
      </node>
      <node id="9703">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/Type.h</label>
        <link refid="_type_8h_source"/>
      </node>
      <node id="9684">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/Gesv.h</label>
        <link refid="_gesv_8h_source"/>
      </node>
      <node id="9654">
        <label>/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/cloneable.h</label>
        <link refid="cloneable_8h_source"/>
        <childnode refid="9655" relation="include">
        </childnode>
        <childnode refid="9642" relation="include">
        </childnode>
        <childnode refid="9656" relation="include">
        </childnode>
        <childnode refid="9658" relation="include">
        </childnode>
        <childnode refid="9659" relation="include">
        </childnode>
        <childnode refid="9660" relation="include">
        </childnode>
        <childnode refid="9657" relation="include">
        </childnode>
        <childnode refid="9644" relation="include">
        </childnode>
      </node>
      <node id="9697">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/NativeFunctions.h</label>
        <link refid="_native_functions_8h_source"/>
      </node>
      <node id="9652">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/ATen.h</label>
        <link refid="_a_ten_8h_source"/>
        <childnode refid="9653" relation="include">
        </childnode>
        <childnode refid="9657" relation="include">
        </childnode>
        <childnode refid="9664" relation="include">
        </childnode>
        <childnode refid="9667" relation="include">
        </childnode>
        <childnode refid="9668" relation="include">
        </childnode>
        <childnode refid="9669" relation="include">
        </childnode>
        <childnode refid="9670" relation="include">
        </childnode>
        <childnode refid="9671" relation="include">
        </childnode>
        <childnode refid="9676" relation="include">
        </childnode>
        <childnode refid="9677" relation="include">
        </childnode>
        <childnode refid="9678" relation="include">
        </childnode>
        <childnode refid="9679" relation="include">
        </childnode>
        <childnode refid="9680" relation="include">
        </childnode>
        <childnode refid="9681" relation="include">
        </childnode>
        <childnode refid="9682" relation="include">
        </childnode>
        <childnode refid="9683" relation="include">
        </childnode>
        <childnode refid="9684" relation="include">
        </childnode>
        <childnode refid="9685" relation="include">
        </childnode>
        <childnode refid="9686" relation="include">
        </childnode>
        <childnode refid="9687" relation="include">
        </childnode>
        <childnode refid="9688" relation="include">
        </childnode>
        <childnode refid="9691" relation="include">
        </childnode>
      </node>
      <node id="9699">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/mkl/Descriptors.h</label>
        <link refid="mkl_2_descriptors_8h_source"/>
      </node>
      <node id="9659">
        <label>/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/modules/functional.h</label>
        <link refid="torch_2csrc_2api_2include_2torch_2nn_2modules_2functional_8h_source"/>
        <childnode refid="9643" relation="include">
        </childnode>
      </node>
      <node id="9695">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/TensorOptions.h</label>
        <link refid="_tensor_options_8h_source"/>
        <childnode refid="9654" relation="include">
        </childnode>
        <childnode refid="9663" relation="include">
        </childnode>
        <childnode refid="9651" relation="include">
        </childnode>
        <childnode refid="9652" relation="include">
        </childnode>
        <childnode refid="9696" relation="include">
        </childnode>
        <childnode refid="9694" relation="include">
        </childnode>
        <childnode refid="9697" relation="include">
        </childnode>
      </node>
      <node id="9685">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/LinearAlgebraUtils.h</label>
        <link refid="_linear_algebra_utils_8h_source"/>
      </node>
      <node id="9650">
        <label>/Users/robkunkle/fork/goodlux/pytorch/build/aten/src/ATen/Tensor.h</label>
        <link refid="build_2aten_2src_2_a_ten_2tensor_8h_source"/>
        <childnode refid="9646" relation="include">
        </childnode>
        <childnode refid="9651" relation="include">
        </childnode>
        <childnode refid="9652" relation="include">
        </childnode>
        <childnode refid="9692" relation="include">
        </childnode>
        <childnode refid="9693" relation="include">
        </childnode>
        <childnode refid="9678" relation="include">
        </childnode>
        <childnode refid="9698" relation="include">
        </childnode>
        <childnode refid="9699" relation="include">
        </childnode>
        <childnode refid="9700" relation="include">
        </childnode>
        <childnode refid="9694" relation="include">
        </childnode>
        <childnode refid="9701" relation="include">
        </childnode>
        <childnode refid="9702" relation="include">
        </childnode>
        <childnode refid="9703" relation="include">
        </childnode>
        <childnode refid="9704" relation="include">
        </childnode>
        <childnode refid="9695" relation="include">
        </childnode>
        <childnode refid="9705" relation="include">
        </childnode>
      </node>
      <node id="9718">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/Layout.h</label>
        <link refid="_layout_8h_source"/>
        <childnode refid="9650" relation="include">
        </childnode>
        <childnode refid="9652" relation="include">
        </childnode>
        <childnode refid="9696" relation="include">
        </childnode>
        <childnode refid="9717" relation="include">
        </childnode>
        <childnode refid="9703" relation="include">
        </childnode>
        <childnode refid="9695" relation="include">
        </childnode>
      </node>
      <node id="9715">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/UndefinedType.h</label>
        <link refid="_undefined_type_8h_source"/>
      </node>
      <node id="9639">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.h</label>
        <link refid="_small_vector_8h"/>
        <childnode refid="9640" relation="include">
        </childnode>
        <childnode refid="9739" relation="include">
        </childnode>
      </node>
      <node id="9716">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/cuda/detail/CUDAHooks.h</label>
        <link refid="_c_u_d_a_hooks_8h_source"/>
      </node>
      <node id="9702">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/TensorMethods.h</label>
        <link refid="_tensor_methods_8h_source"/>
      </node>
      <node id="9680">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/SoftmaxKernel.h</label>
        <link refid="_softmax_kernel_8h_source"/>
      </node>
      <node id="9660">
        <label>/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/modules/linear.h</label>
        <link refid="linear_8h_source"/>
        <childnode refid="9643" relation="include">
        </childnode>
      </node>
      <node id="9688">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/Parallel.h</label>
        <link refid="_parallel_8h_source"/>
        <childnode refid="9663" relation="include">
        </childnode>
        <childnode refid="9689" relation="include">
        </childnode>
        <childnode refid="9690" relation="include">
        </childnode>
      </node>
      <node id="9721">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/Formatting.h</label>
        <link refid="_formatting_8h_source"/>
        <childnode refid="9652" relation="include">
        </childnode>
      </node>
      <node id="9668">
        <label>/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/optim/lbfgs.h</label>
        <link refid="lbfgs_8h_source"/>
        <childnode refid="9665" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classat_1_1_small_vector_base" prot="public">at::SmallVectorBase</innerclass>
    <innerclass refid="classat_1_1_small_vector_template_common" prot="public">at::SmallVectorTemplateCommon</innerclass>
    <innerclass refid="classat_1_1_small_vector_template_base" prot="public">at::SmallVectorTemplateBase</innerclass>
    <innerclass refid="classat_1_1_small_vector_template_base_3_01_t_00_01true_01_4" prot="public">at::SmallVectorTemplateBase&lt; T, true &gt;</innerclass>
    <innerclass refid="classat_1_1_small_vector_impl" prot="public">at::SmallVectorImpl</innerclass>
    <innerclass refid="structat_1_1_small_vector_storage" prot="public">at::SmallVectorStorage</innerclass>
    <innerclass refid="structat_1_1_small_vector_storage_3_01_t_00_011_01_4" prot="public">at::SmallVectorStorage&lt; T, 1 &gt;</innerclass>
    <innerclass refid="structat_1_1_small_vector_storage_3_01_t_00_010_01_4" prot="public">at::SmallVectorStorage&lt; T, 0 &gt;</innerclass>
    <innerclass refid="classat_1_1_small_vector" prot="public">at::SmallVector</innerclass>
    <innernamespace refid="namespaceat">at</innernamespace>
    <innernamespace refid="namespaceat_1_1detail">at::detail</innernamespace>
    <innernamespace refid="namespacestd">std</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="_small_vector_8h_1a0f9a4c83e82d066d58fe814078dfd25c" prot="public" static="no">
        <name>AT_IS_TRIVIALLY_COPYABLE</name>
        <param><defname>T</defname></param>
        <initializer>std::is_trivially_copyable&lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.h" line="41" column="10" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//===-<sp/>llvm/ADT/SmallVector.h<sp/>-<sp/>&apos;Normally<sp/>small&apos;<sp/>vectors<sp/>--------*-<sp/>C++<sp/>-*-===//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>LLVM<sp/>Compiler<sp/>Infrastructure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>is<sp/>distributed<sp/>under<sp/>the<sp/>University<sp/>of<sp/>Illinois<sp/>Open<sp/>Source</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>License.<sp/>See<sp/>LICENSE.TXT<sp/>for<sp/>details.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//===----------------------------------------------------------------------===//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>defines<sp/>the<sp/>SmallVector<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//===----------------------------------------------------------------------===//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ATen:<sp/>modified<sp/>from<sp/>llvm::SmallVector.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>replaced<sp/>report_bad_alloc_error<sp/>with<sp/>std::bad_alloc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>replaced<sp/>isPodLike&lt;T&gt;<sp/>with<sp/>AT_IS_TRIVIALLY_COPYABLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>replaced<sp/>iterator_range<sp/>constructor<sp/>with<sp/>inline<sp/>Container&amp;&amp;<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>removed<sp/>LLVM_NODISCARD<sp/>and<sp/>LLVM_ATTRIBUTE_ALWAYS_INLINE<sp/>qualifiers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>removed<sp/>LLVM_UNLIKELY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;AlignOf.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstddef&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdlib&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstring&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;initializer_list&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iterator&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;new&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ATen/ATenGeneral.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__GNUG__<sp/>&amp;&amp;<sp/>__GNUC__<sp/>&lt;<sp/>5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AT_IS_TRIVIALLY_COPYABLE(T)<sp/>__has_trivial_copy(T)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AT_IS_TRIVIALLY_COPYABLE(T)<sp/>std::is_trivially_copyable&lt;T&gt;::value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceat" kindref="compound">at</ref><sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//<sp/>From<sp/>llvm/Support/MathExtras.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint64_t<sp/>NextPowerOf2(uint64_t<sp/>A)<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>A<sp/>|=<sp/>(A<sp/>&gt;&gt;<sp/>1);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>A<sp/>|=<sp/>(A<sp/>&gt;&gt;<sp/>2);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>A<sp/>|=<sp/>(A<sp/>&gt;&gt;<sp/>4);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>A<sp/>|=<sp/>(A<sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>A<sp/>|=<sp/>(A<sp/>&gt;&gt;<sp/>16);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>A<sp/>|=<sp/>(A<sp/>&gt;&gt;<sp/>32);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>A<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="57"><highlight class="normal">}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="classat_1_1_small_vector_base" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">AT_API<sp/><ref refid="classat_1_1_small_vector_base" kindref="compound">SmallVectorBase</ref><sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*BeginX,<sp/>*EndX,<sp/>*CapacityX;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><ref refid="classat_1_1_small_vector_base" kindref="compound">SmallVectorBase</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*FirstEl,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Size)</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>BeginX(FirstEl),<sp/>EndX(FirstEl),<sp/>CapacityX((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)FirstEl+Size)<sp/>{}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>grow_pod(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*FirstEl,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>MinSizeInBytes,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>TSize);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="76" refid="classat_1_1_small_vector_base_1ac467c3e17cfe1931b7701af7efceda5c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classat_1_1_small_vector_base_1ac467c3e17cfe1931b7701af7efceda5c" kindref="member">size_in_bytes</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>size_t((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)EndX<sp/>-<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)BeginX);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="81" refid="classat_1_1_small_vector_base_1a080727fd01500634693cc7f5fb30904e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classat_1_1_small_vector_base_1a080727fd01500634693cc7f5fb30904e" kindref="member">capacity_in_bytes</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>size_t((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)CapacityX<sp/>-<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)BeginX);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>empty()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>BeginX<sp/>==<sp/>EndX;<sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal">};</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="92" refid="classat_1_1_small_vector_template_common" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classat_1_1_small_vector_template_common" kindref="compound">SmallVectorTemplateCommon</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classat_1_1_small_vector_base" kindref="compound">SmallVectorBase</ref><sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structat_1_1_small_vector_storage" kindref="compound">SmallVectorStorage</ref>;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>raw<sp/>space<sp/>for<sp/>N<sp/>elements<sp/>of<sp/>type<sp/>T.<sp/><sp/>If<sp/>T<sp/>has<sp/>a<sp/>ctor<sp/>or<sp/>dtor,<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>want<sp/>it<sp/>to<sp/>be<sp/>automatically<sp/>run,<sp/>so<sp/>we<sp/>need<sp/>to<sp/>represent<sp/>the<sp/>space<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>something<sp/>else.<sp/><sp/>Use<sp/>an<sp/>array<sp/>of<sp/>char<sp/>of<sp/>sufficient<sp/>alignment.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structat_1_1_aligned_char_array_union" kindref="compound">U</ref><sp/>=<sp/><ref refid="structat_1_1_aligned_char_array_union" kindref="compound">AlignedCharArrayUnion&lt;T&gt;</ref>;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><ref refid="structat_1_1_aligned_char_array_union" kindref="compound">U</ref><sp/>FirstEl;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Space<sp/>after<sp/>&apos;FirstEl&apos;<sp/>is<sp/>clobbered,<sp/>do<sp/>not<sp/>add<sp/>any<sp/>instance<sp/>vars<sp/>after<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><ref refid="classat_1_1_small_vector_template_common" kindref="compound">SmallVectorTemplateCommon</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Size)<sp/>:<sp/><ref refid="classat_1_1_small_vector_base" kindref="compound">SmallVectorBase</ref>(&amp;FirstEl,<sp/>Size)<sp/>{}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>grow_pod(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>MinSizeInBytes,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>TSize)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classat_1_1_small_vector_base_1aad0c28f55592d56898e17b082992dc38" kindref="member">SmallVectorBase::grow_pod</ref>(&amp;FirstEl,<sp/>MinSizeInBytes,<sp/>TSize);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="112" refid="classat_1_1_small_vector_template_common_1a39649612f37cb64162bad134137046d0" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classat_1_1_small_vector_template_common_1a39649612f37cb64162bad134137046d0" kindref="member">isSmall</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>BeginX<sp/>==<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;FirstEl);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="117" refid="classat_1_1_small_vector_template_common_1a4b7ec9160ac37cb1f9ade21758c43232" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classat_1_1_small_vector_template_common_1a4b7ec9160ac37cb1f9ade21758c43232" kindref="member">resetToSmall</ref>()<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>BeginX<sp/>=<sp/>EndX<sp/>=<sp/>CapacityX<sp/>=<sp/>&amp;FirstEl;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setEnd(T<sp/>*P)<sp/>{<sp/>this-&gt;EndX<sp/>=<sp/>P;<sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>size_type<sp/>=<sp/>size_t;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>difference_type<sp/>=<sp/>ptrdiff_t;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>value_type<sp/>=<sp/>T;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>iterator<sp/>=<sp/>T<sp/>*;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>const_iterator<sp/>=<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>*;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>const_reverse_iterator<sp/>=<sp/>std::reverse_iterator&lt;const_iterator&gt;;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>reverse_iterator<sp/>=<sp/>std::reverse_iterator&lt;iterator&gt;;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>reference<sp/>=<sp/>T<sp/>&amp;;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>const_reference<sp/>=<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>pointer<sp/>=<sp/>T<sp/>*;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>const_pointer<sp/>=<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>*;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>forward<sp/>iterator<sp/>creation<sp/>methods.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>iterator<sp/>begin()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(iterator)this-&gt;BeginX;<sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>const_iterator<sp/>begin()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(const_iterator)this-&gt;BeginX;<sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>iterator<sp/>end()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(iterator)this-&gt;EndX;<sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>const_iterator<sp/>end()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(const_iterator)this-&gt;EndX;<sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>iterator<sp/>capacity_ptr()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(iterator)this-&gt;CapacityX;<sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>const_iterator<sp/>capacity_ptr()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(const_iterator)this-&gt;CapacityX;}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>reverse<sp/>iterator<sp/>creation<sp/>methods.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>reverse_iterator<sp/>rbegin()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reverse_iterator(end());<sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>const_reverse_iterator<sp/>rbegin()</highlight><highlight class="keyword"><sp/>const</highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>const_reverse_iterator(end());<sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>reverse_iterator<sp/>rend()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reverse_iterator(begin());<sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>const_reverse_iterator<sp/>rend()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>const_reverse_iterator(begin());}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>size_type<sp/>size()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>end()-begin();<sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>size_type<sp/>max_size()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>size_type(-1)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T);<sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="159" refid="classat_1_1_small_vector_template_common_1a82a3c61d858b9f58a551016e539f4f63" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classat_1_1_small_vector_template_common_1a82a3c61d858b9f58a551016e539f4f63" kindref="member">capacity</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>capacity_ptr()<sp/>-<sp/>begin();<sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="162" refid="classat_1_1_small_vector_template_common_1a768dfe9aa7c6b564c4e3fb2bc60c62dc" refkind="member"><highlight class="normal"><sp/><sp/>pointer<sp/><ref refid="classat_1_1_small_vector_template_common_1a768dfe9aa7c6b564c4e3fb2bc60c62dc" kindref="member">data</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pointer(begin());<sp/>}</highlight></codeline>
<codeline lineno="164" refid="classat_1_1_small_vector_template_common_1a8390706f7405a97fb1608afa74d5689c" refkind="member"><highlight class="normal"><sp/><sp/>const_pointer<sp/><ref refid="classat_1_1_small_vector_template_common_1a8390706f7405a97fb1608afa74d5689c" kindref="member">data</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>const_pointer(begin());<sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>reference<sp/>operator[](size_type<sp/>idx)<sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(idx<sp/>&lt;<sp/>size());</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>begin()[idx];</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>const_reference<sp/>operator[](size_type<sp/>idx)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(idx<sp/>&lt;<sp/>size());</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>begin()[idx];</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>reference<sp/>front()<sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!empty());</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>begin()[0];</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>const_reference<sp/>front()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!empty());</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>begin()[0];</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>reference<sp/>back()<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!empty());</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>end()[-1];</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>const_reference<sp/>back()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!empty());</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>end()[-1];</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal">};</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isPodLike&gt;</highlight></codeline>
<codeline lineno="197" refid="classat_1_1_small_vector_template_base" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classat_1_1_small_vector_template_base" kindref="compound">SmallVectorTemplateBase</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classat_1_1_small_vector_template_common" kindref="compound">SmallVectorTemplateCommon</ref>&lt;T&gt;<sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><ref refid="classat_1_1_small_vector_template_base" kindref="compound">SmallVectorTemplateBase</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Size)<sp/>:<sp/><ref refid="classat_1_1_small_vector_template_common" kindref="compound">SmallVectorTemplateCommon&lt;T&gt;</ref>(Size)<sp/>{}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>destroy_range(T<sp/>*S,<sp/>T<sp/>*E)<sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(S<sp/>!=<sp/>E)<sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>--E;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>E-&gt;~T();</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>It1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>It2&gt;</highlight></codeline>
<codeline lineno="211" refid="classat_1_1_small_vector_template_base_1ae5b28a668e51a5206afde69e595d3437" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classat_1_1_small_vector_template_base_1ae5b28a668e51a5206afde69e595d3437" kindref="member">uninitialized_move</ref>(It1<sp/>I,<sp/>It1<sp/>E,<sp/>It2<sp/>Dest)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uninitialized_copy(std::make_move_iterator(I),</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_move_iterator(E),<sp/>Dest);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>It1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>It2&gt;</highlight></codeline>
<codeline lineno="219" refid="classat_1_1_small_vector_template_base_1af189796d60e105676832d54380f1284a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classat_1_1_small_vector_template_base_1af189796d60e105676832d54380f1284a" kindref="member">uninitialized_copy</ref>(It1<sp/>I,<sp/>It1<sp/>E,<sp/>It2<sp/>Dest)<sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uninitialized_copy(I,<sp/>E,<sp/>Dest);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classat_1_1_small_vector_template_base_1adc6c6a92306fa9a284a3567473437ee0" kindref="member">grow</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>MinSize<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>push_back(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;Elt)<sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;EndX<sp/>&gt;=<sp/>this-&gt;CapacityX)</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classat_1_1_small_vector_template_base_1adc6c6a92306fa9a284a3567473437ee0" kindref="member">grow</ref>();</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>::new<sp/>((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/>this-&gt;end())<sp/>T(Elt);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;setEnd(this-&gt;end()+1);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>push_back(T<sp/>&amp;&amp;Elt)<sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;EndX<sp/>&gt;=<sp/>this-&gt;CapacityX)</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classat_1_1_small_vector_template_base_1adc6c6a92306fa9a284a3567473437ee0" kindref="member">grow</ref>();</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>::new<sp/>((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/>this-&gt;end())<sp/>T(::<ref refid="namespacestd" kindref="compound">std</ref>::move(Elt));</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;setEnd(this-&gt;end()+1);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>pop_back()<sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;setEnd(this-&gt;end()-1);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;end()-&gt;~T();</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal">};</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Define<sp/>this<sp/>out-of-line<sp/>to<sp/>dissuade<sp/>the<sp/>C++<sp/>compiler<sp/>from<sp/>inlining<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isPodLike&gt;</highlight></codeline>
<codeline lineno="251" refid="classat_1_1_small_vector_template_base_1adc6c6a92306fa9a284a3567473437ee0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classat_1_1_small_vector_template_base_1adc6c6a92306fa9a284a3567473437ee0" kindref="member">SmallVectorTemplateBase&lt;T, isPodLike&gt;::grow</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>MinSize)<sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>CurCapacity<sp/>=<sp/>this-&gt;<ref refid="classat_1_1_small_vector_template_common_1a82a3c61d858b9f58a551016e539f4f63" kindref="member">capacity</ref>();</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>CurSize<sp/>=<sp/>this-&gt;size();</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Always<sp/>grow,<sp/>even<sp/>from<sp/>zero.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>NewCapacity<sp/>=<sp/>size_t(detail::NextPowerOf2(CurCapacity+2));</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NewCapacity<sp/>&lt;<sp/>MinSize)</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>NewCapacity<sp/>=<sp/>MinSize;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>T<sp/>*NewElts<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(malloc(NewCapacity*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T)));</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NewElts<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::bad_alloc();</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>the<sp/>elements<sp/>over.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/>this-&gt;<ref refid="classat_1_1_small_vector_template_base_1ae5b28a668e51a5206afde69e595d3437" kindref="member">uninitialized_move</ref>(this-&gt;begin(),<sp/>this-&gt;end(),<sp/>NewElts);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Destroy<sp/>the<sp/>original<sp/>elements.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>destroy_range(this-&gt;begin(),<sp/>this-&gt;end());</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>this<sp/>wasn&apos;t<sp/>grown<sp/>from<sp/>the<sp/>inline<sp/>copy,<sp/>deallocate<sp/>the<sp/>old<sp/>space.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!this-&gt;<ref refid="classat_1_1_small_vector_template_common_1a39649612f37cb64162bad134137046d0" kindref="member">isSmall</ref>())</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>free(this-&gt;begin());</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/>this-&gt;setEnd(NewElts+CurSize);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>this-&gt;BeginX<sp/>=<sp/>NewElts;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>this-&gt;CapacityX<sp/>=<sp/>this-&gt;begin()+NewCapacity;</highlight></codeline>
<codeline lineno="275"><highlight class="normal">}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="281" refid="classat_1_1_small_vector_template_base_3_01_t_00_01true_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classat_1_1_small_vector_template_base" kindref="compound">SmallVectorTemplateBase</ref>&lt;T,<sp/>true&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classat_1_1_small_vector_template_common" kindref="compound">SmallVectorTemplateCommon</ref>&lt;T&gt;<sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><ref refid="classat_1_1_small_vector_template_base" kindref="compound">SmallVectorTemplateBase</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Size)<sp/>:<sp/><ref refid="classat_1_1_small_vector_template_common" kindref="compound">SmallVectorTemplateCommon&lt;T&gt;</ref>(Size)<sp/>{}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>need<sp/>to<sp/>do<sp/>a<sp/>destroy<sp/>loop<sp/>for<sp/>POD&apos;s.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>destroy_range(T<sp/>*,<sp/>T<sp/>*)<sp/>{}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>It1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>It2&gt;</highlight></codeline>
<codeline lineno="291" refid="classat_1_1_small_vector_template_base_3_01_t_00_01true_01_4_1a7b9971f52fa434d86e199bc964551ad3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classat_1_1_small_vector_template_base_3_01_t_00_01true_01_4_1a7b9971f52fa434d86e199bc964551ad3" kindref="member">uninitialized_move</ref>(It1<sp/>I,<sp/>It1<sp/>E,<sp/>It2<sp/>Dest)<sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Just<sp/>do<sp/>a<sp/>copy.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classat_1_1_small_vector_template_base_1af189796d60e105676832d54380f1284a" kindref="member">uninitialized_copy</ref>(I,<sp/>E,<sp/>Dest);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>It1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>It2&gt;</highlight></codeline>
<codeline lineno="299" refid="classat_1_1_small_vector_template_base_3_01_t_00_01true_01_4_1a9db26e22d42ac635553a1e16ff89bcf1" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classat_1_1_small_vector_template_base_3_01_t_00_01true_01_4_1a9db26e22d42ac635553a1e16ff89bcf1" kindref="member">uninitialized_copy</ref>(It1<sp/>I,<sp/>It1<sp/>E,<sp/>It2<sp/>Dest)<sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Arbitrary<sp/>iterator<sp/>types;<sp/>just<sp/>use<sp/>the<sp/>basic<sp/>implementation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uninitialized_copy(I,<sp/>E,<sp/>Dest);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="307" refid="classat_1_1_small_vector_template_base_3_01_t_00_01true_01_4_1ab165fabba453e3c28523a80dd0a2ed01" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classat_1_1_small_vector_template_base_3_01_t_00_01true_01_4_1ab165fabba453e3c28523a80dd0a2ed01" kindref="member">uninitialized_copy</ref>(</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>T1<sp/>*I,<sp/>T1<sp/>*E,<sp/>T2<sp/>*Dest,</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;std::is_same&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::remove_const&lt;T1&gt;::type,</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T2&gt;::value&gt;::type<sp/>*<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>memcpy<sp/>for<sp/>PODs<sp/>iterated<sp/>by<sp/>pointers<sp/>(which<sp/>includes<sp/>SmallVector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>iterators):<sp/>std::uninitialized_copy<sp/>optimizes<sp/>to<sp/>memmove,<sp/>but<sp/>we<sp/>can</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>memcpy<sp/>here.<sp/>Note<sp/>that<sp/>I<sp/>and<sp/>E<sp/>are<sp/>iterators<sp/>and<sp/>thus<sp/>might<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>invalid<sp/>for<sp/>memcpy<sp/>if<sp/>they<sp/>are<sp/>equal.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(I<sp/>!=<sp/>E)</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(Dest,<sp/>I,<sp/>(E<sp/>-<sp/>I)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T));</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="321" refid="classat_1_1_small_vector_template_base_3_01_t_00_01true_01_4_1a844984280753509317aa83dada3ccc09" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classat_1_1_small_vector_template_base_3_01_t_00_01true_01_4_1a844984280753509317aa83dada3ccc09" kindref="member">grow</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>MinSize<sp/>=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;grow_pod(MinSize*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T));</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>push_back(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;Elt)<sp/>{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;EndX<sp/>&gt;=<sp/>this-&gt;CapacityX)</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classat_1_1_small_vector_template_base_1adc6c6a92306fa9a284a3567473437ee0" kindref="member">grow</ref>();</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(this-&gt;end(),<sp/>&amp;Elt,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T));</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;setEnd(this-&gt;end()+1);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>pop_back()<sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;setEnd(this-&gt;end()-1);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="336"><highlight class="normal">};</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="341" refid="classat_1_1_small_vector_impl" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classat_1_1_small_vector_impl" kindref="compound">SmallVectorImpl</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classat_1_1_small_vector_template_base" kindref="compound">SmallVectorTemplateBase</ref>&lt;T,<sp/>AT_IS_TRIVIALLY_COPYABLE(T)&gt;<sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classat_1_1_small_vector_template_base" kindref="compound">SuperClass</ref><sp/>=<sp/><ref refid="classat_1_1_small_vector_template_base" kindref="compound">SmallVectorTemplateBase&lt;T, AT_IS_TRIVIALLY_COPYABLE(T)&gt;</ref>;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>iterator<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SuperClass::iterator;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>const_iterator<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SuperClass::const_iterator;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>size_type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SuperClass::size_type;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Default<sp/>ctor<sp/>-<sp/>Initialize<sp/>to<sp/>empty.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classat_1_1_small_vector_impl" kindref="compound">SmallVectorImpl</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>N)</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="classat_1_1_small_vector_template_base" kindref="compound">SmallVectorTemplateBase&lt;T, AT_IS_TRIVIALLY_COPYABLE(T)&gt;</ref>(N*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T))<sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><ref refid="classat_1_1_small_vector_impl" kindref="compound">SmallVectorImpl</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classat_1_1_small_vector_impl" kindref="compound">SmallVectorImpl</ref><sp/>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/>~<ref refid="classat_1_1_small_vector_impl" kindref="compound">SmallVectorImpl</ref>()<sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Destroy<sp/>the<sp/>constructed<sp/>elements<sp/>in<sp/>the<sp/>vector.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;destroy_range(this-&gt;begin(),<sp/>this-&gt;end());</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>this<sp/>wasn&apos;t<sp/>grown<sp/>from<sp/>the<sp/>inline<sp/>copy,<sp/>deallocate<sp/>the<sp/>old<sp/>space.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!this-&gt;<ref refid="classat_1_1_small_vector_template_common_1a39649612f37cb64162bad134137046d0" kindref="member">isSmall</ref>())</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>free(this-&gt;begin());</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clear()<sp/>{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;destroy_range(this-&gt;begin(),<sp/>this-&gt;end());</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;EndX<sp/>=<sp/>this-&gt;BeginX;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>resize(size_type<sp/>N)<sp/>{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(N<sp/>&lt;<sp/>this-&gt;size())<sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;destroy_range(this-&gt;begin()+N,<sp/>this-&gt;end());</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;setEnd(this-&gt;begin()+N);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(N<sp/>&gt;<sp/>this-&gt;size())<sp/>{</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;<ref refid="classat_1_1_small_vector_template_common_1a82a3c61d858b9f58a551016e539f4f63" kindref="member">capacity</ref>()<sp/>&lt;<sp/>N)</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classat_1_1_small_vector_template_base_1adc6c6a92306fa9a284a3567473437ee0" kindref="member">grow</ref>(N);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>I<sp/>=<sp/>this-&gt;end();</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>E<sp/>=<sp/>this-&gt;begin()<sp/>+<sp/>N;<sp/>I<sp/>!=<sp/>E;<sp/>++I)</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(&amp;*I)<sp/>T();</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;setEnd(this-&gt;begin()+N);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>resize(size_type<sp/>N,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;NV)<sp/>{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(N<sp/>&lt;<sp/>this-&gt;size())<sp/>{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;destroy_range(this-&gt;begin()+N,<sp/>this-&gt;end());</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;setEnd(this-&gt;begin()+N);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(N<sp/>&gt;<sp/>this-&gt;size())<sp/>{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;<ref refid="classat_1_1_small_vector_template_common_1a82a3c61d858b9f58a551016e539f4f63" kindref="member">capacity</ref>()<sp/>&lt;<sp/>N)</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classat_1_1_small_vector_template_base_1adc6c6a92306fa9a284a3567473437ee0" kindref="member">grow</ref>(N);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::uninitialized_fill(this-&gt;end(),<sp/>this-&gt;begin()+N,<sp/>NV);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;setEnd(this-&gt;begin()+N);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reserve(size_type<sp/>N)<sp/>{</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;<ref refid="classat_1_1_small_vector_template_common_1a82a3c61d858b9f58a551016e539f4f63" kindref="member">capacity</ref>()<sp/>&lt;<sp/>N)</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classat_1_1_small_vector_template_base_1adc6c6a92306fa9a284a3567473437ee0" kindref="member">grow</ref>(N);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/>T<sp/>pop_back_val()<sp/>{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>Result<sp/>=<sp/>::std::move(this-&gt;back());</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;pop_back();</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Result;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>swap(<ref refid="classat_1_1_small_vector_impl" kindref="compound">SmallVectorImpl</ref><sp/>&amp;RHS);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>in_iter,</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;std::is_convertible&lt;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::iterator_traits&lt;in_iter&gt;::iterator_category,</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::input_iterator_tag&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="416" refid="classat_1_1_small_vector_impl_1ac14b6473b0fb86f09e3388a547b5fbc1" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classat_1_1_small_vector_impl_1ac14b6473b0fb86f09e3388a547b5fbc1" kindref="member">append</ref>(in_iter<sp/>in_start,<sp/>in_iter<sp/>in_end)<sp/>{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>size_type<sp/>NumInputs<sp/>=<sp/>std::distance(in_start,<sp/>in_end);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Grow<sp/>allocated<sp/>space<sp/>if<sp/>needed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NumInputs<sp/>&gt;<sp/>size_type(this-&gt;capacity_ptr()-this-&gt;end()))</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classat_1_1_small_vector_template_base_1adc6c6a92306fa9a284a3567473437ee0" kindref="member">grow</ref>(this-&gt;size()+NumInputs);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>the<sp/>new<sp/>elements<sp/>over.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classat_1_1_small_vector_template_base_1af189796d60e105676832d54380f1284a" kindref="member">uninitialized_copy</ref>(in_start,<sp/>in_end,<sp/>this-&gt;end());</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;setEnd(this-&gt;end()<sp/>+<sp/>NumInputs);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="428" refid="classat_1_1_small_vector_impl_1a0a052f0f97fda125785595bd26b2840a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classat_1_1_small_vector_impl_1a0a052f0f97fda125785595bd26b2840a" kindref="member">append</ref>(size_type<sp/>NumInputs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;Elt)<sp/>{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Grow<sp/>allocated<sp/>space<sp/>if<sp/>needed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NumInputs<sp/>&gt;<sp/>size_type(this-&gt;capacity_ptr()-this-&gt;end()))</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classat_1_1_small_vector_template_base_1adc6c6a92306fa9a284a3567473437ee0" kindref="member">grow</ref>(this-&gt;size()+NumInputs);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>the<sp/>new<sp/>elements<sp/>over.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uninitialized_fill_n(this-&gt;end(),<sp/>NumInputs,<sp/>Elt);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;setEnd(this-&gt;end()<sp/>+<sp/>NumInputs);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>append(std::initializer_list&lt;T&gt;<sp/>IL)<sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>append(IL.begin(),<sp/>IL.end());</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>Consider<sp/>assigning<sp/>over<sp/>existing<sp/>elements,<sp/>rather<sp/>than<sp/>clearing<sp/>&amp;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>re-initializing<sp/>them<sp/>-<sp/>for<sp/>all<sp/>assign(...)<sp/>variants.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>assign(size_type<sp/>NumElts,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;Elt)<sp/>{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>clear();</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;<ref refid="classat_1_1_small_vector_template_common_1a82a3c61d858b9f58a551016e539f4f63" kindref="member">capacity</ref>()<sp/>&lt;<sp/>NumElts)</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classat_1_1_small_vector_template_base_1adc6c6a92306fa9a284a3567473437ee0" kindref="member">grow</ref>(NumElts);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;setEnd(this-&gt;begin()+NumElts);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uninitialized_fill(this-&gt;begin(),<sp/>this-&gt;end(),<sp/>Elt);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>in_iter,</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;std::is_convertible&lt;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::iterator_traits&lt;in_iter&gt;::iterator_category,</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::input_iterator_tag&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>assign(in_iter<sp/>in_start,<sp/>in_iter<sp/>in_end)<sp/>{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>clear();</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>append(in_start,<sp/>in_end);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>assign(std::initializer_list&lt;T&gt;<sp/>IL)<sp/>{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>clear();</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>append(IL);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/>iterator<sp/>erase(const_iterator<sp/>CI)<sp/>{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Just<sp/>cast<sp/>away<sp/>constness<sp/>because<sp/>this<sp/>is<sp/>a<sp/>non-const<sp/>member<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>iterator<sp/>I<sp/>=<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">iterator</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(CI);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(I<sp/>&gt;=<sp/>this-&gt;begin()<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Iterator<sp/>to<sp/>erase<sp/>is<sp/>out<sp/>of<sp/>bounds.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(I<sp/>&lt;<sp/>this-&gt;end()<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Erasing<sp/>at<sp/>past-the-end<sp/>iterator.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>iterator<sp/>N<sp/>=<sp/>I;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Shift<sp/>all<sp/>elts<sp/>down<sp/>one.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>std::move(I+1,<sp/>this-&gt;end(),<sp/>I);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Drop<sp/>the<sp/>last<sp/>elt.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;pop_back();</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(N);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/>iterator<sp/>erase(const_iterator<sp/>CS,<sp/>const_iterator<sp/>CE)<sp/>{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Just<sp/>cast<sp/>away<sp/>constness<sp/>because<sp/>this<sp/>is<sp/>a<sp/>non-const<sp/>member<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>iterator<sp/>S<sp/>=<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">iterator</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(CS);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>iterator<sp/>E<sp/>=<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">iterator</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(CE);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(S<sp/>&gt;=<sp/>this-&gt;begin()<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Range<sp/>to<sp/>erase<sp/>is<sp/>out<sp/>of<sp/>bounds.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(S<sp/>&lt;=<sp/>E<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Trying<sp/>to<sp/>erase<sp/>invalid<sp/>range.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(E<sp/>&lt;=<sp/>this-&gt;end()<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Trying<sp/>to<sp/>erase<sp/>past<sp/>the<sp/>end.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>iterator<sp/>N<sp/>=<sp/>S;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Shift<sp/>all<sp/>elts<sp/>down.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>iterator<sp/>I<sp/>=<sp/>std::move(E,<sp/>this-&gt;end(),<sp/>S);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Drop<sp/>the<sp/>last<sp/>elts.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;destroy_range(I,<sp/>this-&gt;end());</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;setEnd(I);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(N);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/>iterator<sp/>insert(iterator<sp/>I,<sp/>T<sp/>&amp;&amp;Elt)<sp/>{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(I<sp/>==<sp/>this-&gt;end())<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Important<sp/>special<sp/>case<sp/>for<sp/>empty<sp/>vector.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;push_back(::std::move(Elt));</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;end()-1;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(I<sp/>&gt;=<sp/>this-&gt;begin()<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Insertion<sp/>iterator<sp/>is<sp/>out<sp/>of<sp/>bounds.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(I<sp/>&lt;=<sp/>this-&gt;end()<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Inserting<sp/>past<sp/>the<sp/>end<sp/>of<sp/>the<sp/>vector.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;EndX<sp/>&gt;=<sp/>this-&gt;CapacityX)<sp/>{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>EltNo<sp/>=<sp/>I-this-&gt;begin();</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classat_1_1_small_vector_template_base_1adc6c6a92306fa9a284a3567473437ee0" kindref="member">grow</ref>();</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>I<sp/>=<sp/>this-&gt;begin()+EltNo;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>::new<sp/>((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/>this-&gt;end())<sp/>T(::<ref refid="namespacestd" kindref="compound">std</ref>::move(this-&gt;back()));</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Push<sp/>everything<sp/>else<sp/>over.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacestd" kindref="compound">std</ref>::move_backward(I,<sp/>this-&gt;end()-1,<sp/>this-&gt;end());</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;setEnd(this-&gt;end()+1);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>just<sp/>moved<sp/>the<sp/>element<sp/>we&apos;re<sp/>inserting,<sp/>be<sp/>sure<sp/>to<sp/>update</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>reference.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>*EltPtr<sp/>=<sp/>&amp;Elt;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(I<sp/>&lt;=<sp/>EltPtr<sp/>&amp;&amp;<sp/>EltPtr<sp/>&lt;<sp/>this-&gt;EndX)</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++EltPtr;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>*I<sp/>=<sp/>::<ref refid="namespacestd" kindref="compound">std</ref>::move(*EltPtr);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>I;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/>iterator<sp/>insert(iterator<sp/>I,<sp/>const<sp/>T<sp/>&amp;Elt)<sp/>{</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(I<sp/>==<sp/>this-&gt;end())<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Important<sp/>special<sp/>case<sp/>for<sp/>empty<sp/>vector.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;push_back(Elt);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;end()-1;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(I<sp/>&gt;=<sp/>this-&gt;begin()<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Insertion<sp/>iterator<sp/>is<sp/>out<sp/>of<sp/>bounds.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(I<sp/>&lt;=<sp/>this-&gt;end()<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Inserting<sp/>past<sp/>the<sp/>end<sp/>of<sp/>the<sp/>vector.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;EndX<sp/>&gt;=<sp/>this-&gt;CapacityX)<sp/>{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>EltNo<sp/>=<sp/>I-this-&gt;begin();</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classat_1_1_small_vector_template_base_1adc6c6a92306fa9a284a3567473437ee0" kindref="member">grow</ref>();</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>I<sp/>=<sp/>this-&gt;begin()+EltNo;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>::new<sp/>((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/>this-&gt;end())<sp/>T(<ref refid="namespacestd" kindref="compound">std</ref>::move(this-&gt;back()));</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Push<sp/>everything<sp/>else<sp/>over.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacestd" kindref="compound">std</ref>::move_backward(I,<sp/>this-&gt;end()-1,<sp/>this-&gt;end());</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;setEnd(this-&gt;end()+1);</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>just<sp/>moved<sp/>the<sp/>element<sp/>we&apos;re<sp/>inserting,<sp/>be<sp/>sure<sp/>to<sp/>update</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>reference.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>T<sp/>*EltPtr<sp/>=<sp/>&amp;Elt;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(I<sp/>&lt;=<sp/>EltPtr<sp/>&amp;&amp;<sp/>EltPtr<sp/>&lt;<sp/>this-&gt;EndX)</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++EltPtr;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>*I<sp/>=<sp/>*EltPtr;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>I;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/>iterator<sp/>insert(iterator<sp/>I,<sp/>size_type<sp/>NumToInsert,<sp/>const<sp/>T<sp/>&amp;Elt)<sp/>{</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Convert<sp/>iterator<sp/>to<sp/>elt#<sp/>to<sp/>avoid<sp/>invalidating<sp/>iterator<sp/>when<sp/>we<sp/>reserve()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>InsertElt<sp/>=<sp/>I<sp/>-<sp/>this-&gt;begin();</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(I<sp/>==<sp/>this-&gt;end())<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Important<sp/>special<sp/>case<sp/>for<sp/>empty<sp/>vector.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>append(NumToInsert,<sp/>Elt);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;begin()+InsertElt;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(I<sp/>&gt;=<sp/>this-&gt;begin()<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Insertion<sp/>iterator<sp/>is<sp/>out<sp/>of<sp/>bounds.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(I<sp/>&lt;=<sp/>this-&gt;end()<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Inserting<sp/>past<sp/>the<sp/>end<sp/>of<sp/>the<sp/>vector.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>there<sp/>is<sp/>enough<sp/>space.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>reserve(this-&gt;size()<sp/>+<sp/>NumToInsert);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Uninvalidate<sp/>the<sp/>iterator.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>I<sp/>=<sp/>this-&gt;begin()+InsertElt;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>there<sp/>are<sp/>more<sp/>elements<sp/>between<sp/>the<sp/>insertion<sp/>point<sp/>and<sp/>the<sp/>end<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>range<sp/>than<sp/>there<sp/>are<sp/>being<sp/>inserted,<sp/>we<sp/>can<sp/>use<sp/>a<sp/>simple<sp/>approach<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>insertion.<sp/><sp/>Since<sp/>we<sp/>already<sp/>reserved<sp/>space,<sp/>we<sp/>know<sp/>that<sp/>this<sp/>won&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reallocate<sp/>the<sp/>vector.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">(this-&gt;end()-I)<sp/>&gt;=<sp/>NumToInsert)<sp/>{</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>*OldEnd<sp/>=<sp/>this-&gt;end();</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>append(std::move_iterator&lt;iterator&gt;(this-&gt;end()<sp/>-<sp/>NumToInsert),</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::move_iterator&lt;iterator&gt;(this-&gt;end()));</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>the<sp/>existing<sp/>elements<sp/>that<sp/>get<sp/>replaced.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::move_backward(I,<sp/>OldEnd-NumToInsert,<sp/>OldEnd);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::fill_n(I,<sp/>NumToInsert,<sp/>Elt);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>I;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Otherwise,<sp/>we&apos;re<sp/>inserting<sp/>more<sp/>elements<sp/>than<sp/>exist<sp/>already,<sp/>and<sp/>we&apos;re</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>inserting<sp/>at<sp/>the<sp/>end.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>over<sp/>the<sp/>elements<sp/>that<sp/>we&apos;re<sp/>about<sp/>to<sp/>overwrite.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>*OldEnd<sp/>=<sp/>this-&gt;end();</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;setEnd(this-&gt;end()<sp/>+<sp/>NumToInsert);</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>NumOverwritten<sp/>=<sp/>OldEnd-I;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classat_1_1_small_vector_template_base_1ae5b28a668e51a5206afde69e595d3437" kindref="member">uninitialized_move</ref>(I,<sp/>OldEnd,<sp/>this-&gt;end()-NumOverwritten);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Replace<sp/>the<sp/>overwritten<sp/>part.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/>std::fill_n(I,<sp/>NumOverwritten,<sp/>Elt);</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Insert<sp/>the<sp/>non-overwritten<sp/>middle<sp/>part.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uninitialized_fill_n(OldEnd,<sp/>NumToInsert-NumOverwritten,<sp/>Elt);</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>I;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ItTy,</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;std::is_convertible&lt;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::iterator_traits&lt;ItTy&gt;::iterator_category,</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::input_iterator_tag&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/>iterator<sp/>insert(iterator<sp/>I,<sp/>ItTy<sp/>From,<sp/>ItTy<sp/>To)<sp/>{</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Convert<sp/>iterator<sp/>to<sp/>elt#<sp/>to<sp/>avoid<sp/>invalidating<sp/>iterator<sp/>when<sp/>we<sp/>reserve()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>InsertElt<sp/>=<sp/>I<sp/>-<sp/>this-&gt;begin();</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(I<sp/>==<sp/>this-&gt;end())<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Important<sp/>special<sp/>case<sp/>for<sp/>empty<sp/>vector.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>append(From,<sp/>To);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;begin()+InsertElt;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(I<sp/>&gt;=<sp/>this-&gt;begin()<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Insertion<sp/>iterator<sp/>is<sp/>out<sp/>of<sp/>bounds.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(I<sp/>&lt;=<sp/>this-&gt;end()<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Inserting<sp/>past<sp/>the<sp/>end<sp/>of<sp/>the<sp/>vector.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>NumToInsert<sp/>=<sp/>std::distance(From,<sp/>To);</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensure<sp/>there<sp/>is<sp/>enough<sp/>space.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/>reserve(this-&gt;size()<sp/>+<sp/>NumToInsert);</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Uninvalidate<sp/>the<sp/>iterator.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/>I<sp/>=<sp/>this-&gt;begin()+InsertElt;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>there<sp/>are<sp/>more<sp/>elements<sp/>between<sp/>the<sp/>insertion<sp/>point<sp/>and<sp/>the<sp/>end<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>range<sp/>than<sp/>there<sp/>are<sp/>being<sp/>inserted,<sp/>we<sp/>can<sp/>use<sp/>a<sp/>simple<sp/>approach<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>insertion.<sp/><sp/>Since<sp/>we<sp/>already<sp/>reserved<sp/>space,<sp/>we<sp/>know<sp/>that<sp/>this<sp/>won&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reallocate<sp/>the<sp/>vector.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">(this-&gt;end()-I)<sp/>&gt;=<sp/>NumToInsert)<sp/>{</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>*OldEnd<sp/>=<sp/>this-&gt;end();</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>append(std::move_iterator&lt;iterator&gt;(this-&gt;end()<sp/>-<sp/>NumToInsert),</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::move_iterator&lt;iterator&gt;(this-&gt;end()));</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>the<sp/>existing<sp/>elements<sp/>that<sp/>get<sp/>replaced.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::move_backward(I,<sp/>OldEnd-NumToInsert,<sp/>OldEnd);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::copy(From,<sp/>To,<sp/>I);</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>I;</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Otherwise,<sp/>we&apos;re<sp/>inserting<sp/>more<sp/>elements<sp/>than<sp/>exist<sp/>already,<sp/>and<sp/>we&apos;re</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>inserting<sp/>at<sp/>the<sp/>end.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>over<sp/>the<sp/>elements<sp/>that<sp/>we&apos;re<sp/>about<sp/>to<sp/>overwrite.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>*OldEnd<sp/>=<sp/>this-&gt;end();</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;setEnd(this-&gt;end()<sp/>+<sp/>NumToInsert);</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>NumOverwritten<sp/>=<sp/>OldEnd-I;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classat_1_1_small_vector_template_base_1ae5b28a668e51a5206afde69e595d3437" kindref="member">uninitialized_move</ref>(I,<sp/>OldEnd,<sp/>this-&gt;end()-NumOverwritten);</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Replace<sp/>the<sp/>overwritten<sp/>part.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(T<sp/>*J<sp/>=<sp/>I;<sp/>NumOverwritten<sp/>&gt;<sp/>0;<sp/>--NumOverwritten)<sp/>{</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*J<sp/>=<sp/>*From;</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++J;<sp/>++From;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Insert<sp/>the<sp/>non-overwritten<sp/>middle<sp/>part.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classat_1_1_small_vector_template_base_1af189796d60e105676832d54380f1284a" kindref="member">uninitialized_copy</ref>(From,<sp/>To,<sp/>OldEnd);</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>I;</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>insert(iterator<sp/>I,<sp/>std::initializer_list&lt;T&gt;<sp/>IL)<sp/>{</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/>insert(I,<sp/>IL.begin(),<sp/>IL.end());</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>ArgTypes&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>emplace_back(ArgTypes<sp/>&amp;&amp;...<sp/>Args)<sp/>{</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;EndX<sp/>&gt;=<sp/>this-&gt;CapacityX)</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classat_1_1_small_vector_template_base_1adc6c6a92306fa9a284a3567473437ee0" kindref="member">grow</ref>();</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/>::new<sp/>((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)this-&gt;end())<sp/>T(<ref refid="namespacestd" kindref="compound">std</ref>::forward&lt;ArgTypes&gt;(Args)...);</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;setEnd(this-&gt;end()<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/>SmallVectorImpl<sp/>&amp;operator=(const<sp/>SmallVectorImpl<sp/>&amp;RHS);</highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/>SmallVectorImpl<sp/>&amp;operator=(SmallVectorImpl<sp/>&amp;&amp;RHS);</highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(const<sp/>SmallVectorImpl<sp/>&amp;RHS)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;size()<sp/>!=<sp/>RHS.size())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::equal(this-&gt;begin(),<sp/>this-&gt;end(),<sp/>RHS.begin());</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SmallVectorImpl<sp/>&amp;RHS)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>==<sp/>RHS);</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SmallVectorImpl<sp/>&amp;RHS)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::lexicographical_compare(this-&gt;begin(),<sp/>this-&gt;end(),</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RHS.begin(),<sp/>RHS.end());</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="707" refid="classat_1_1_small_vector_impl_1a3ff1d2c50693607fd22026466d35d279" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classat_1_1_small_vector_impl_1a3ff1d2c50693607fd22026466d35d279" kindref="member">set_size</ref>(size_type<sp/>N)<sp/>{</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(N<sp/>&lt;=<sp/>this-&gt;<ref refid="classat_1_1_small_vector_template_common_1a82a3c61d858b9f58a551016e539f4f63" kindref="member">capacity</ref>());</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;setEnd(this-&gt;begin()<sp/>+<sp/>N);</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="711"><highlight class="normal">};</highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SmallVectorImpl&lt;T&gt;::swap(SmallVectorImpl&lt;T&gt;<sp/>&amp;RHS)<sp/>{</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>==<sp/>&amp;RHS)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>only<sp/>avoid<sp/>copying<sp/>elements<sp/>if<sp/>neither<sp/>vector<sp/>is<sp/>small.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!this-&gt;<ref refid="classat_1_1_small_vector_template_common_1a39649612f37cb64162bad134137046d0" kindref="member">isSmall</ref>()<sp/>&amp;&amp;<sp/>!RHS.isSmall())<sp/>{</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/>std::swap(this-&gt;BeginX,<sp/>RHS.BeginX);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/>std::swap(this-&gt;EndX,<sp/>RHS.EndX);</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/>std::swap(this-&gt;CapacityX,<sp/>RHS.CapacityX);</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RHS.size()<sp/>&gt;<sp/>this-&gt;<ref refid="classat_1_1_small_vector_template_common_1a82a3c61d858b9f58a551016e539f4f63" kindref="member">capacity</ref>())</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classat_1_1_small_vector_template_base_1adc6c6a92306fa9a284a3567473437ee0" kindref="member">grow</ref>(RHS.size());</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;size()<sp/>&gt;<sp/>RHS.capacity())</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/>RHS.grow(this-&gt;size());</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Swap<sp/>the<sp/>shared<sp/>elements.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>NumShared<sp/>=<sp/>this-&gt;size();</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NumShared<sp/>&gt;<sp/>RHS.size())<sp/>NumShared<sp/>=<sp/>RHS.size();</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(size_type<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>NumShared;<sp/>++i)</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/>std::swap((*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)[i],<sp/>RHS[i]);</highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>over<sp/>the<sp/>extra<sp/>elts.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;size()<sp/>&gt;<sp/>RHS.size())<sp/>{</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>EltDiff<sp/>=<sp/>this-&gt;size()<sp/>-<sp/>RHS.size();</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classat_1_1_small_vector_template_base_1af189796d60e105676832d54380f1284a" kindref="member">uninitialized_copy</ref>(this-&gt;begin()+NumShared,<sp/>this-&gt;end(),<sp/>RHS.end());</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/>RHS.setEnd(RHS.end()+EltDiff);</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;destroy_range(this-&gt;begin()+NumShared,<sp/>this-&gt;end());</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;setEnd(this-&gt;begin()+NumShared);</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RHS.size()<sp/>&gt;<sp/>this-&gt;size())<sp/>{</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>EltDiff<sp/>=<sp/>RHS.size()<sp/>-<sp/>this-&gt;size();</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classat_1_1_small_vector_template_base_1af189796d60e105676832d54380f1284a" kindref="member">uninitialized_copy</ref>(RHS.begin()+NumShared,<sp/>RHS.end(),<sp/>this-&gt;end());</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;setEnd(this-&gt;end()<sp/>+<sp/>EltDiff);</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;destroy_range(RHS.begin()+NumShared,<sp/>RHS.end());</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/>RHS.setEnd(RHS.begin()+NumShared);</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="749"><highlight class="normal">}</highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="752"><highlight class="normal">SmallVectorImpl&lt;T&gt;<sp/>&amp;SmallVectorImpl&lt;T&gt;::</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SmallVectorImpl&lt;T&gt;<sp/>&amp;RHS)<sp/>{</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Avoid<sp/>self-assignment.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>==<sp/>&amp;RHS)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>already<sp/>have<sp/>sufficient<sp/>space,<sp/>assign<sp/>the<sp/>common<sp/>elements,<sp/>then</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>destroy<sp/>any<sp/>excess.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>RHSSize<sp/>=<sp/>RHS.size();</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>CurSize<sp/>=<sp/>this-&gt;size();</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(CurSize<sp/>&gt;=<sp/>RHSSize)<sp/>{</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Assign<sp/>common<sp/>elements.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/>iterator<sp/>NewEnd;</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RHSSize)</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NewEnd<sp/>=<sp/>std::copy(RHS.begin(),<sp/>RHS.begin()+RHSSize,<sp/>this-&gt;begin());</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NewEnd<sp/>=<sp/>this-&gt;begin();</highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Destroy<sp/>excess<sp/>elements.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;destroy_range(NewEnd,<sp/>this-&gt;end());</highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Trim.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;setEnd(NewEnd);</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>have<sp/>to<sp/>grow<sp/>to<sp/>have<sp/>enough<sp/>elements,<sp/>destroy<sp/>the<sp/>current<sp/>elements.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>allows<sp/>us<sp/>to<sp/>avoid<sp/>copying<sp/>them<sp/>during<sp/>the<sp/>grow.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>don&apos;t<sp/>do<sp/>this<sp/>if<sp/>they&apos;re<sp/>efficiently<sp/>moveable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;<ref refid="classat_1_1_small_vector_template_common_1a82a3c61d858b9f58a551016e539f4f63" kindref="member">capacity</ref>()<sp/>&lt;<sp/>RHSSize)<sp/>{</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Destroy<sp/>current<sp/>elements.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;destroy_range(this-&gt;begin(),<sp/>this-&gt;end());</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;setEnd(this-&gt;begin());</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/>CurSize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classat_1_1_small_vector_template_base_1adc6c6a92306fa9a284a3567473437ee0" kindref="member">grow</ref>(RHSSize);</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(CurSize)<sp/>{</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Otherwise,<sp/>use<sp/>assignment<sp/>for<sp/>the<sp/>already-constructed<sp/>elements.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/>std::copy(RHS.begin(),<sp/>RHS.begin()+CurSize,<sp/>this-&gt;begin());</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>construct<sp/>the<sp/>new<sp/>elements<sp/>in<sp/>place.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/>this-&gt;<ref refid="classat_1_1_small_vector_template_base_1af189796d60e105676832d54380f1284a" kindref="member">uninitialized_copy</ref>(RHS.begin()+CurSize,<sp/>RHS.end(),</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;begin()+CurSize);</highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>end.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/>this-&gt;setEnd(this-&gt;begin()+RHSSize);</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="798"><highlight class="normal">}</highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="801"><highlight class="normal">SmallVectorImpl&lt;T&gt;<sp/>&amp;SmallVectorImpl&lt;T&gt;::operator=(SmallVectorImpl&lt;T&gt;<sp/>&amp;&amp;RHS)<sp/>{</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Avoid<sp/>self-assignment.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>==<sp/>&amp;RHS)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>RHS<sp/>isn&apos;t<sp/>small,<sp/>clear<sp/>this<sp/>vector<sp/>and<sp/>then<sp/>steal<sp/>its<sp/>buffer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!RHS.isSmall())<sp/>{</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;destroy_range(this-&gt;begin(),<sp/>this-&gt;end());</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!this-&gt;<ref refid="classat_1_1_small_vector_template_common_1a39649612f37cb64162bad134137046d0" kindref="member">isSmall</ref>())<sp/>free(this-&gt;begin());</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;BeginX<sp/>=<sp/>RHS.BeginX;</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;EndX<sp/>=<sp/>RHS.EndX;</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;CapacityX<sp/>=<sp/>RHS.CapacityX;</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/>RHS.resetToSmall();</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>already<sp/>have<sp/>sufficient<sp/>space,<sp/>assign<sp/>the<sp/>common<sp/>elements,<sp/>then</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>destroy<sp/>any<sp/>excess.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>RHSSize<sp/>=<sp/>RHS.size();</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>CurSize<sp/>=<sp/>this-&gt;size();</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(CurSize<sp/>&gt;=<sp/>RHSSize)<sp/>{</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Assign<sp/>common<sp/>elements.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/>iterator<sp/>NewEnd<sp/>=<sp/>this-&gt;begin();</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RHSSize)</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>NewEnd<sp/>=<sp/>std::move(RHS.begin(),<sp/>RHS.end(),<sp/>NewEnd);</highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Destroy<sp/>excess<sp/>elements<sp/>and<sp/>trim<sp/>the<sp/>bounds.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;destroy_range(NewEnd,<sp/>this-&gt;end());</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;setEnd(NewEnd);</highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clear<sp/>the<sp/>RHS.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/>RHS.clear();</highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>have<sp/>to<sp/>grow<sp/>to<sp/>have<sp/>enough<sp/>elements,<sp/>destroy<sp/>the<sp/>current<sp/>elements.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>allows<sp/>us<sp/>to<sp/>avoid<sp/>copying<sp/>them<sp/>during<sp/>the<sp/>grow.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>this<sp/>may<sp/>not<sp/>actually<sp/>make<sp/>any<sp/>sense<sp/>if<sp/>we<sp/>can<sp/>efficiently<sp/>move</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>elements.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;<ref refid="classat_1_1_small_vector_template_common_1a82a3c61d858b9f58a551016e539f4f63" kindref="member">capacity</ref>()<sp/>&lt;<sp/>RHSSize)<sp/>{</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Destroy<sp/>current<sp/>elements.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;destroy_range(this-&gt;begin(),<sp/>this-&gt;end());</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;setEnd(this-&gt;begin());</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/>CurSize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classat_1_1_small_vector_template_base_1adc6c6a92306fa9a284a3567473437ee0" kindref="member">grow</ref>(RHSSize);</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(CurSize)<sp/>{</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Otherwise,<sp/>use<sp/>assignment<sp/>for<sp/>the<sp/>already-constructed<sp/>elements.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/>std::move(RHS.begin(),<sp/>RHS.begin()+CurSize,<sp/>this-&gt;begin());</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Move-construct<sp/>the<sp/>new<sp/>elements<sp/>in<sp/>place.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/>this-&gt;<ref refid="classat_1_1_small_vector_template_base_1ae5b28a668e51a5206afde69e595d3437" kindref="member">uninitialized_move</ref>(RHS.begin()+CurSize,<sp/>RHS.end(),</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;begin()+CurSize);</highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>end.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/>this-&gt;setEnd(this-&gt;begin()+RHSSize);</highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/>RHS.clear();</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="860"><highlight class="normal">}</highlight></codeline>
<codeline lineno="861"><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="867" refid="structat_1_1_small_vector_storage" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structat_1_1_small_vector_storage" kindref="compound">SmallVectorStorage</ref><sp/>{</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classat_1_1_small_vector_template_common" kindref="compound">SmallVectorTemplateCommon&lt;T&gt;::U</ref><sp/>InlineElts[N<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="869"><highlight class="normal">};</highlight></codeline>
<codeline lineno="870" refid="structat_1_1_small_vector_storage_3_01_t_00_011_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structat_1_1_small_vector_storage" kindref="compound">SmallVectorStorage</ref>&lt;T,<sp/>1&gt;<sp/>{};</highlight></codeline>
<codeline lineno="871" refid="structat_1_1_small_vector_storage_3_01_t_00_010_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structat_1_1_small_vector_storage" kindref="compound">SmallVectorStorage</ref>&lt;T,<sp/>0&gt;<sp/>{};</highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="882" refid="classat_1_1_small_vector" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classat_1_1_small_vector" kindref="compound">SmallVector</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classat_1_1_small_vector_impl" kindref="compound">SmallVectorImpl</ref>&lt;T&gt;<sp/>{</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><ref refid="structat_1_1_small_vector_storage" kindref="compound">SmallVectorStorage&lt;T, N&gt;</ref><sp/><ref refid="structat_1_1_storage" kindref="compound">Storage</ref>;</highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><ref refid="classat_1_1_small_vector" kindref="compound">SmallVector</ref>()<sp/>:<sp/><ref refid="classat_1_1_small_vector_impl" kindref="compound">SmallVectorImpl&lt;T&gt;</ref>(N)<sp/>{}</highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classat_1_1_small_vector" kindref="compound">SmallVector</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;Value<sp/>=<sp/>T())</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="classat_1_1_small_vector_impl" kindref="compound">SmallVectorImpl&lt;T&gt;</ref>(N)<sp/>{</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;assign(Size,<sp/>Value);</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ItTy,</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;std::is_convertible&lt;</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::iterator_traits&lt;ItTy&gt;::iterator_category,</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::input_iterator_tag&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><ref refid="classat_1_1_small_vector" kindref="compound">SmallVector</ref>(ItTy<sp/>S,<sp/>ItTy<sp/>E)<sp/>:<sp/><ref refid="classat_1_1_small_vector_impl" kindref="compound">SmallVectorImpl&lt;T&gt;</ref>(N)<sp/>{</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;append(S,<sp/>E);</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container&gt;</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classat_1_1_small_vector" kindref="compound">SmallVector</ref>(Container<sp/>&amp;&amp;c)<sp/>:<sp/><ref refid="classat_1_1_small_vector_impl" kindref="compound">SmallVectorImpl&lt;T&gt;</ref>(N)<sp/>{</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;append(c.begin(),<sp/>c.end());</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><ref refid="classat_1_1_small_vector" kindref="compound">SmallVector</ref>(std::initializer_list&lt;T&gt;<sp/>IL)<sp/>:<sp/><ref refid="classat_1_1_small_vector_impl" kindref="compound">SmallVectorImpl&lt;T&gt;</ref>(N)<sp/>{</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;assign(IL);</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><ref refid="classat_1_1_small_vector" kindref="compound">SmallVector</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classat_1_1_small_vector" kindref="compound">SmallVector</ref><sp/>&amp;RHS)<sp/>:<sp/><ref refid="classat_1_1_small_vector_impl" kindref="compound">SmallVectorImpl&lt;T&gt;</ref>(N)<sp/>{</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!RHS.empty())</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classat_1_1_small_vector_impl" kindref="compound">SmallVectorImpl&lt;T&gt;::operator</ref>=(RHS);</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="915"><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classat_1_1_small_vector" kindref="compound">SmallVector</ref><sp/>&amp;operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classat_1_1_small_vector" kindref="compound">SmallVector</ref><sp/>&amp;RHS)<sp/>{</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classat_1_1_small_vector_impl" kindref="compound">SmallVectorImpl&lt;T&gt;::operator=</ref>(RHS);</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><ref refid="classat_1_1_small_vector" kindref="compound">SmallVector</ref>(<ref refid="classat_1_1_small_vector" kindref="compound">SmallVector</ref><sp/>&amp;&amp;RHS)<sp/>:<sp/><ref refid="classat_1_1_small_vector_impl" kindref="compound">SmallVectorImpl&lt;T&gt;</ref>(N)<sp/>{</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!RHS.empty())</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classat_1_1_small_vector_impl" kindref="compound">SmallVectorImpl&lt;T&gt;::operator</ref>=(::std::move(RHS));</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container&gt;</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classat_1_1_small_vector" kindref="compound">SmallVector</ref><sp/>&amp;operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Container<sp/>&amp;RHS)<sp/>{</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;assign(RHS.begin(),<sp/>RHS.end());</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><ref refid="classat_1_1_small_vector" kindref="compound">SmallVector</ref>(<ref refid="classat_1_1_small_vector_impl" kindref="compound">SmallVectorImpl&lt;T&gt;</ref><sp/>&amp;&amp;RHS)<sp/>:<sp/><ref refid="classat_1_1_small_vector_impl" kindref="compound">SmallVectorImpl&lt;T&gt;</ref>(N)<sp/>{</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!RHS.empty())</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classat_1_1_small_vector_impl" kindref="compound">SmallVectorImpl&lt;T&gt;::operator</ref>=(::std::move(RHS));</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classat_1_1_small_vector" kindref="compound">SmallVector</ref><sp/>&amp;operator=(<ref refid="classat_1_1_small_vector" kindref="compound">SmallVector</ref><sp/>&amp;&amp;RHS)<sp/>{</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classat_1_1_small_vector_impl" kindref="compound">SmallVectorImpl&lt;T&gt;::operator=</ref>(::std::move(RHS));</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classat_1_1_small_vector" kindref="compound">SmallVector</ref><sp/>&amp;operator=(<ref refid="classat_1_1_small_vector_impl" kindref="compound">SmallVectorImpl&lt;T&gt;</ref><sp/>&amp;&amp;RHS)<sp/>{</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classat_1_1_small_vector_impl" kindref="compound">SmallVectorImpl&lt;T&gt;::operator=</ref>(::std::move(RHS));</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="946"><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classat_1_1_small_vector" kindref="compound">SmallVector</ref><sp/>&amp;operator=(std::initializer_list&lt;T&gt;<sp/>IL)<sp/>{</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;assign(IL);</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="951"><highlight class="normal">};</highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classat_1_1_small_vector_base_1a080727fd01500634693cc7f5fb30904e" kindref="member">capacity_in_bytes</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classat_1_1_small_vector" kindref="compound">SmallVector&lt;T, N&gt;</ref><sp/>&amp;X)<sp/>{</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>X.<ref refid="classat_1_1_small_vector_base_1a080727fd01500634693cc7f5fb30904e" kindref="member">capacity_in_bytes</ref>();</highlight></codeline>
<codeline lineno="956"><highlight class="normal">}</highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacestd" kindref="compound">std</ref><sp/>{</highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/>swap(<ref refid="classat_1_1_small_vector_impl" kindref="compound">at::SmallVectorImpl&lt;T&gt;</ref><sp/>&amp;LHS,<sp/><ref refid="classat_1_1_small_vector_impl" kindref="compound">at::SmallVectorImpl&lt;T&gt;</ref><sp/>&amp;RHS)<sp/>{</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/>LHS.swap(RHS);</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/>swap(<ref refid="classat_1_1_small_vector" kindref="compound">at::SmallVector&lt;T, N&gt;</ref><sp/>&amp;LHS,<sp/><ref refid="classat_1_1_small_vector" kindref="compound">at::SmallVector&lt;T, N&gt;</ref><sp/>&amp;RHS)<sp/>{</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/>LHS.swap(RHS);</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>std</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/SmallVector.h"/>
  </compounddef>
</doxygen>
