<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="_tensor_dense_8cpp" kind="file" language="C++">
    <compoundname>TensorDense.cpp</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>included<sp/>as<sp/>&apos;TensorDenseOrSparse&apos;<sp/>in<sp/>TensorDerived.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal">IntList<sp/>${Tensor}::strides()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NB:<sp/>THTensor<sp/>doesn&apos;t<sp/>agree<sp/>with<sp/>Tensor<sp/>for<sp/>scalars,<sp/>so<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>have<sp/>to<sp/>construct<sp/>a<sp/>fresh<sp/>IntList</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IntList(THTensor_getStridePtr(tensor),<sp/>dim());</highlight></codeline>
<codeline lineno="7"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8"><highlight class="normal">Scalar<sp/>${Tensor}::localScalar()<sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/>int64_t<sp/>numel<sp/>=<sp/>${THTensor}_nElement(${state,}tensor);</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/>AT_CHECK(numel<sp/>==<sp/>1,</highlight><highlight class="stringliteral">&quot;a<sp/>Tensor<sp/>with<sp/>&quot;</highlight><highlight class="normal">,<sp/>numel,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>elements<sp/>cannot<sp/>be<sp/>converted<sp/>to<sp/>Scalar&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Scalar(${to_at_type}(${THStorage}_get(${state,}<sp/>THTensor_getStoragePtr(tensor),<sp/>tensor-&gt;storage_offset())));</highlight></codeline>
<codeline lineno="12"><highlight class="normal">}</highlight></codeline>
<codeline lineno="13"><highlight class="normal">std::unique_ptr&lt;Storage&gt;<sp/>${Tensor}::storage()<sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>storage<sp/>=<sp/>${THTensor}_storage(${state,}tensor);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/>${THStorage}_retain(${state,}storage);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;Storage&gt;(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>${Storage}(&amp;type().get_context(),<sp/>storage));</highlight></codeline>
<codeline lineno="17"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/templates/TensorDense.cpp"/>
  </compounddef>
</doxygen>
