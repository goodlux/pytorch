<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="basic_8cpp" kind="file" language="C++">
    <compoundname>basic.cpp</compoundname>
    <includes local="yes">catch.hpp</includes>
    <includes refid="_a_ten_8h" local="yes">ATen/ATen.h</includes>
    <includes local="yes">THNN/Reduction.h</includes>
    <includes local="no">iostream</includes>
    <includes local="no">chrono</includes>
    <includes local="no">string.h</includes>
    <includes local="no">sstream</includes>
    <includes refid="test__seed_8h" local="yes">test_seed.h</includes>
    <incdepgraph>
      <node id="12074">
        <label>ATen/optional.h</label>
        <link refid="optional_8h_source"/>
        <childnode refid="12075" relation="include">
        </childnode>
        <childnode refid="12076" relation="include">
        </childnode>
        <childnode refid="12077" relation="include">
        </childnode>
        <childnode refid="12078" relation="include">
        </childnode>
        <childnode refid="12079" relation="include">
        </childnode>
        <childnode refid="12080" relation="include">
        </childnode>
        <childnode refid="12081" relation="include">
        </childnode>
      </node>
      <node id="12120">
        <label>ATen/detail/CUDAHooksInterface.h</label>
        <link refid="_c_u_d_a_hooks_interface_8h_source"/>
        <childnode refid="12070" relation="include">
        </childnode>
        <childnode refid="12073" relation="include">
        </childnode>
        <childnode refid="12118" relation="include">
        </childnode>
        <childnode refid="12121" relation="include">
        </childnode>
        <childnode refid="12082" relation="include">
        </childnode>
        <childnode refid="12079" relation="include">
        </childnode>
        <childnode refid="12071" relation="include">
        </childnode>
      </node>
      <node id="12088">
        <label>ATen/Device.h</label>
        <link refid="_device_8h_source"/>
        <childnode refid="12073" relation="include">
        </childnode>
        <childnode refid="12089" relation="include">
        </childnode>
        <childnode refid="12082" relation="include">
        </childnode>
        <childnode refid="12104" relation="include">
        </childnode>
        <childnode refid="12080" relation="include">
        </childnode>
        <childnode refid="12079" relation="include">
        </childnode>
      </node>
      <node id="12087">
        <label>atomic</label>
      </node>
      <node id="12066">
        <label>catch.hpp</label>
      </node>
      <node id="12079">
        <label>functional</label>
      </node>
      <node id="12125">
        <label>ATen/Backtrace.h</label>
        <link refid="_backtrace_8h_source"/>
        <childnode refid="12082" relation="include">
        </childnode>
        <childnode refid="12080" relation="include">
        </childnode>
        <childnode refid="12115" relation="include">
        </childnode>
        <childnode refid="12068" relation="include">
        </childnode>
      </node>
      <node id="12089">
        <label>ATen/ScalarType.h</label>
        <link refid="_scalar_type_8h_source"/>
        <childnode refid="12090" relation="include">
        </childnode>
        <childnode refid="12068" relation="include">
        </childnode>
        <childnode refid="12100" relation="include">
        </childnode>
        <childnode refid="12102" relation="include">
        </childnode>
        <childnode refid="12106" relation="include">
        </childnode>
      </node>
      <node id="12101">
        <label>limits</label>
      </node>
      <node id="12109">
        <label>assert.h</label>
      </node>
      <node id="12114">
        <label>ATen/Utils.h</label>
        <link refid="aten_2src_2_a_ten_2utils_8h_source"/>
        <childnode refid="12068" relation="include">
        </childnode>
        <childnode refid="12090" relation="include">
        </childnode>
        <childnode refid="12073" relation="include">
        </childnode>
        <childnode refid="12113" relation="include">
        </childnode>
        <childnode refid="12093" relation="include">
        </childnode>
        <childnode refid="12085" relation="include">
        </childnode>
        <childnode refid="12115" relation="include">
        </childnode>
        <childnode refid="12116" relation="include">
        </childnode>
      </node>
      <node id="12096">
        <label>iterator</label>
      </node>
      <node id="12108">
        <label>ATen/Scalar.h</label>
        <link refid="_scalar_8h_source"/>
        <childnode refid="12109" relation="include">
        </childnode>
        <childnode refid="12110" relation="include">
        </childnode>
        <childnode refid="12081" relation="include">
        </childnode>
        <childnode refid="12080" relation="include">
        </childnode>
        <childnode refid="12075" relation="include">
        </childnode>
        <childnode refid="12068" relation="include">
        </childnode>
        <childnode refid="12100" relation="include">
        </childnode>
        <childnode refid="12089" relation="include">
        </childnode>
        <childnode refid="12111" relation="include">
        </childnode>
        <childnode refid="12114" relation="include">
        </childnode>
      </node>
      <node id="12065">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/test/basic.cpp</label>
        <link refid="basic_8cpp"/>
        <childnode refid="12066" relation="include">
        </childnode>
        <childnode refid="12067" relation="include">
        </childnode>
        <childnode refid="12140" relation="include">
        </childnode>
        <childnode refid="12106" relation="include">
        </childnode>
        <childnode refid="12148" relation="include">
        </childnode>
        <childnode refid="12149" relation="include">
        </childnode>
        <childnode refid="12085" relation="include">
        </childnode>
        <childnode refid="12150" relation="include">
        </childnode>
      </node>
      <node id="12128">
        <label>TH/THStorageFunctions.hpp</label>
      </node>
      <node id="12102">
        <label>cstdint</label>
      </node>
      <node id="12136">
        <label>ATen/Deprecated.h</label>
        <link refid="_deprecated_8h_source"/>
      </node>
      <node id="12110">
        <label>stdint.h</label>
      </node>
      <node id="12147">
        <label>ATen/CUDAGuard.h</label>
        <link refid="_c_u_d_a_guard_8h_source"/>
      </node>
      <node id="12103">
        <label>cmath</label>
      </node>
      <node id="12078">
        <label>cassert</label>
      </node>
      <node id="12119">
        <label>ATen/Context.h</label>
        <link refid="_context_8h_source"/>
        <childnode refid="12068" relation="include">
        </childnode>
        <childnode refid="12069" relation="include">
        </childnode>
        <childnode refid="12118" relation="include">
        </childnode>
        <childnode refid="12117" relation="include">
        </childnode>
        <childnode refid="12114" relation="include">
        </childnode>
        <childnode refid="12073" relation="include">
        </childnode>
        <childnode refid="12120" relation="include">
        </childnode>
        <childnode refid="12126" relation="include">
        </childnode>
        <childnode refid="12071" relation="include">
        </childnode>
        <childnode refid="12123" relation="include">
        </childnode>
        <childnode refid="12102" relation="include">
        </childnode>
      </node>
      <node id="12105">
        <label>Half-inl.h</label>
        <link refid="_half-inl_8h_source"/>
        <childnode refid="12068" relation="include">
        </childnode>
        <childnode refid="12095" relation="include">
        </childnode>
        <childnode refid="12101" relation="include">
        </childnode>
      </node>
      <node id="12081">
        <label>stdexcept</label>
      </node>
      <node id="12142">
        <label>ATen/TensorOperators.h</label>
        <link refid="_tensor_operators_8h_source"/>
        <childnode refid="12108" relation="include">
        </childnode>
        <childnode refid="12129" relation="include">
        </childnode>
        <childnode refid="12117" relation="include">
        </childnode>
        <childnode refid="12080" relation="include">
        </childnode>
        <childnode refid="12081" relation="include">
        </childnode>
      </node>
      <node id="12116">
        <label>numeric</label>
      </node>
      <node id="12112">
        <label>ATen/TensorImpl.h</label>
        <link refid="_tensor_impl_8h_source"/>
        <childnode refid="12087" relation="include">
        </childnode>
        <childnode refid="12071" relation="include">
        </childnode>
        <childnode refid="12086" relation="include">
        </childnode>
        <childnode refid="12089" relation="include">
        </childnode>
        <childnode refid="12074" relation="include">
        </childnode>
      </node>
      <node id="12100">
        <label>ATen/Half.h</label>
        <link refid="_half_8h_source"/>
        <childnode refid="12068" relation="include">
        </childnode>
        <childnode refid="12101" relation="include">
        </childnode>
        <childnode refid="12080" relation="include">
        </childnode>
        <childnode refid="12102" relation="include">
        </childnode>
        <childnode refid="12081" relation="include">
        </childnode>
        <childnode refid="12075" relation="include">
        </childnode>
        <childnode refid="12103" relation="include">
        </childnode>
        <childnode refid="12104" relation="include">
        </childnode>
        <childnode refid="12105" relation="include">
        </childnode>
      </node>
      <node id="12086">
        <label>ATen/Retainable.h</label>
        <link refid="_retainable_8h_source"/>
        <childnode refid="12087" relation="include">
        </childnode>
      </node>
      <node id="12111">
        <label>ATen/TensorBase.h</label>
        <link refid="_tensor_base_8h_source"/>
        <childnode refid="12112" relation="include">
        </childnode>
        <childnode refid="12113" relation="include">
        </childnode>
      </node>
      <node id="12080">
        <label>string</label>
      </node>
      <node id="12145">
        <label>ATen/DimVector.h</label>
        <link refid="_dim_vector_8h_source"/>
        <childnode refid="12091" relation="include">
        </childnode>
        <childnode refid="12110" relation="include">
        </childnode>
      </node>
      <node id="12146">
        <label>ATen/OptionsGuard.h</label>
        <link refid="_options_guard_8h_source"/>
        <childnode refid="12088" relation="include">
        </childnode>
        <childnode refid="12132" relation="include">
        </childnode>
        <childnode refid="12089" relation="include">
        </childnode>
        <childnode refid="12139" relation="include">
        </childnode>
        <childnode refid="12074" relation="include">
        </childnode>
      </node>
      <node id="12070">
        <label>ATen/Allocator.h</label>
        <link refid="_allocator_8h_source"/>
        <childnode refid="12071" relation="include">
        </childnode>
        <childnode refid="12072" relation="include">
        </childnode>
        <childnode refid="12073" relation="include">
        </childnode>
        <childnode refid="12086" relation="include">
        </childnode>
        <childnode refid="12088" relation="include">
        </childnode>
        <childnode refid="12107" relation="include">
        </childnode>
      </node>
      <node id="12126">
        <label>ATen/CUDAStream.h</label>
        <link refid="_c_u_d_a_stream_8h_source"/>
      </node>
      <node id="12138">
        <label>ATen/DeviceGuard.h</label>
        <link refid="_device_guard_8h_source"/>
        <childnode refid="12088" relation="include">
        </childnode>
        <childnode refid="12073" relation="include">
        </childnode>
        <childnode refid="12089" relation="include">
        </childnode>
        <childnode refid="12129" relation="include">
        </childnode>
        <childnode refid="12120" relation="include">
        </childnode>
        <childnode refid="12082" relation="include">
        </childnode>
      </node>
      <node id="12083">
        <label>exception</label>
      </node>
      <node id="12072">
        <label>stddef.h</label>
      </node>
      <node id="12113">
        <label>ATen/UndefinedTensor.h</label>
        <link refid="_undefined_tensor_8h_source"/>
        <childnode refid="12112" relation="include">
        </childnode>
      </node>
      <node id="12144">
        <label>ATen/Dispatch.h</label>
        <link refid="_dispatch_8h_source"/>
        <childnode refid="12073" relation="include">
        </childnode>
        <childnode refid="12100" relation="include">
        </childnode>
        <childnode refid="12117" relation="include">
        </childnode>
      </node>
      <node id="12092">
        <label>AlignOf.h</label>
        <link refid="_align_of_8h_source"/>
        <childnode refid="12082" relation="include">
        </childnode>
      </node>
      <node id="12127">
        <label>ATen/Storage.h</label>
        <link refid="_storage_8h_source"/>
        <childnode refid="12108" relation="include">
        </childnode>
        <childnode refid="12128" relation="include">
        </childnode>
      </node>
      <node id="12084">
        <label>ostream</label>
      </node>
      <node id="12069">
        <label>ATen/CPUGeneral.h</label>
        <link refid="_c_p_u_general_8h_source"/>
        <childnode refid="12068" relation="include">
        </childnode>
      </node>
      <node id="12117">
        <label>ATen/Type.h</label>
      </node>
      <node id="12090">
        <label>ATen/ArrayRef.h</label>
        <link refid="_array_ref_8h_source"/>
        <childnode refid="12073" relation="include">
        </childnode>
        <childnode refid="12091" relation="include">
        </childnode>
        <childnode refid="12098" relation="include">
        </childnode>
        <childnode refid="12096" relation="include">
        </childnode>
        <childnode refid="12099" relation="include">
        </childnode>
      </node>
      <node id="12133">
        <label>ATen/TensorGeometry.h</label>
        <link refid="_tensor_geometry_8h_source"/>
        <childnode refid="12117" relation="include">
        </childnode>
        <childnode refid="12134" relation="include">
        </childnode>
      </node>
      <node id="12130">
        <label>ATen/SparseTensorRef.h</label>
        <link refid="_sparse_tensor_ref_8h_source"/>
      </node>
      <node id="12068">
        <label>ATen/ATenGeneral.h</label>
        <link refid="_a_ten_general_8h_source"/>
      </node>
      <node id="12134">
        <label>ATen/WrapDimUtils.h</label>
        <link refid="_wrap_dim_utils_8h_source"/>
        <childnode refid="12112" relation="include">
        </childnode>
        <childnode refid="12085" relation="include">
        </childnode>
      </node>
      <node id="12149">
        <label>string.h</label>
      </node>
      <node id="12131">
        <label>ATen/TensorAccessor.h</label>
        <link refid="_tensor_accessor_8h_source"/>
        <childnode refid="12082" relation="include">
        </childnode>
        <childnode refid="12110" relation="include">
        </childnode>
        <childnode refid="12089" relation="include">
        </childnode>
      </node>
      <node id="12115">
        <label>typeinfo</label>
      </node>
      <node id="12122">
        <label>cstdio</label>
      </node>
      <node id="12107">
        <label>ATen/detail/UniqueVoidPtr.h</label>
        <link refid="_unique_void_ptr_8h_source"/>
        <childnode refid="12071" relation="include">
        </childnode>
        <childnode refid="12068" relation="include">
        </childnode>
      </node>
      <node id="12099">
        <label>vector</label>
      </node>
      <node id="12150">
        <label>test_seed.h</label>
        <link refid="test__seed_8h_source"/>
        <childnode refid="12067" relation="include">
        </childnode>
      </node>
      <node id="12143">
        <label>ATen/TensorMethods.h</label>
      </node>
      <node id="12140">
        <label>THNN/Reduction.h</label>
      </node>
      <node id="12097">
        <label>new</label>
      </node>
      <node id="12075">
        <label>utility</label>
      </node>
      <node id="12098">
        <label>array</label>
      </node>
      <node id="12085">
        <label>sstream</label>
      </node>
      <node id="12135">
        <label>ATen/Functions.h</label>
        <link refid="build_2aten_2src_2_a_ten_2_functions_8h_source"/>
        <childnode refid="12108" relation="include">
        </childnode>
        <childnode refid="12117" relation="include">
        </childnode>
        <childnode refid="12129" relation="include">
        </childnode>
        <childnode refid="12127" relation="include">
        </childnode>
        <childnode refid="12118" relation="include">
        </childnode>
        <childnode refid="12136" relation="include">
        </childnode>
        <childnode refid="12137" relation="include">
        </childnode>
        <childnode refid="12138" relation="include">
        </childnode>
        <childnode refid="12139" relation="include">
        </childnode>
        <childnode refid="12140" relation="include">
        </childnode>
      </node>
      <node id="12137">
        <label>ATen/NativeFunctions.h</label>
      </node>
      <node id="12104">
        <label>iosfwd</label>
      </node>
      <node id="12094">
        <label>cstdlib</label>
      </node>
      <node id="12106">
        <label>iostream</label>
      </node>
      <node id="12082">
        <label>cstddef</label>
      </node>
      <node id="12124">
        <label>unordered_map</label>
      </node>
      <node id="12123">
        <label>mutex</label>
      </node>
      <node id="12148">
        <label>chrono</label>
      </node>
      <node id="12067">
        <label>ATen/ATen.h</label>
        <link refid="_a_ten_8h_source"/>
        <childnode refid="12068" relation="include">
        </childnode>
        <childnode refid="12069" relation="include">
        </childnode>
        <childnode refid="12070" relation="include">
        </childnode>
        <childnode refid="12108" relation="include">
        </childnode>
        <childnode refid="12117" relation="include">
        </childnode>
        <childnode refid="12118" relation="include">
        </childnode>
        <childnode refid="12119" relation="include">
        </childnode>
        <childnode refid="12127" relation="include">
        </childnode>
        <childnode refid="12129" relation="include">
        </childnode>
        <childnode refid="12088" relation="include">
        </childnode>
        <childnode refid="12133" relation="include">
        </childnode>
        <childnode refid="12135" relation="include">
        </childnode>
        <childnode refid="12141" relation="include">
        </childnode>
        <childnode refid="12142" relation="include">
        </childnode>
        <childnode refid="12143" relation="include">
        </childnode>
        <childnode refid="12144" relation="include">
        </childnode>
        <childnode refid="12145" relation="include">
        </childnode>
        <childnode refid="12138" relation="include">
        </childnode>
        <childnode refid="12139" relation="include">
        </childnode>
        <childnode refid="12132" relation="include">
        </childnode>
        <childnode refid="12146" relation="include">
        </childnode>
        <childnode refid="12147" relation="include">
        </childnode>
      </node>
      <node id="12121">
        <label>ATen/Registry.h</label>
        <link refid="_registry_8h_source"/>
        <childnode refid="12093" relation="include">
        </childnode>
        <childnode refid="12122" relation="include">
        </childnode>
        <childnode refid="12094" relation="include">
        </childnode>
        <childnode refid="12079" relation="include">
        </childnode>
        <childnode refid="12071" relation="include">
        </childnode>
        <childnode refid="12123" relation="include">
        </childnode>
        <childnode refid="12124" relation="include">
        </childnode>
        <childnode refid="12080" relation="include">
        </childnode>
        <childnode refid="12099" relation="include">
        </childnode>
        <childnode refid="12125" relation="include">
        </childnode>
        <childnode refid="12068" relation="include">
        </childnode>
      </node>
      <node id="12073">
        <label>ATen/Error.h</label>
        <link refid="_error_8h_source"/>
        <childnode refid="12068" relation="include">
        </childnode>
        <childnode refid="12074" relation="include">
        </childnode>
        <childnode refid="12082" relation="include">
        </childnode>
        <childnode refid="12083" relation="include">
        </childnode>
        <childnode refid="12084" relation="include">
        </childnode>
        <childnode refid="12085" relation="include">
        </childnode>
        <childnode refid="12080" relation="include">
        </childnode>
      </node>
      <node id="12139">
        <label>ATen/TensorOptions.h</label>
        <link refid="_tensor_options_8h_source"/>
        <childnode refid="12119" relation="include">
        </childnode>
        <childnode refid="12088" relation="include">
        </childnode>
        <childnode refid="12138" relation="include">
        </childnode>
        <childnode refid="12132" relation="include">
        </childnode>
        <childnode refid="12089" relation="include">
        </childnode>
        <childnode refid="12129" relation="include">
        </childnode>
        <childnode refid="12117" relation="include">
        </childnode>
        <childnode refid="12082" relation="include">
        </childnode>
        <childnode refid="12104" relation="include">
        </childnode>
        <childnode refid="12075" relation="include">
        </childnode>
      </node>
      <node id="12129">
        <label>ATen/Tensor.h</label>
        <link refid="build_2aten_2src_2_a_ten_2tensor_8h_source"/>
        <childnode refid="12118" relation="include">
        </childnode>
        <childnode refid="12108" relation="include">
        </childnode>
        <childnode refid="12089" relation="include">
        </childnode>
        <childnode refid="12130" relation="include">
        </childnode>
        <childnode refid="12127" relation="include">
        </childnode>
        <childnode refid="12131" relation="include">
        </childnode>
        <childnode refid="12111" relation="include">
        </childnode>
        <childnode refid="12112" relation="include">
        </childnode>
        <childnode refid="12114" relation="include">
        </childnode>
        <childnode refid="12088" relation="include">
        </childnode>
        <childnode refid="12132" relation="include">
        </childnode>
        <childnode refid="12074" relation="include">
        </childnode>
      </node>
      <node id="12076">
        <label>type_traits</label>
      </node>
      <node id="12132">
        <label>ATen/Layout.h</label>
        <link refid="_layout_8h_source"/>
        <childnode refid="12089" relation="include">
        </childnode>
        <childnode refid="12073" relation="include">
        </childnode>
        <childnode refid="12106" relation="include">
        </childnode>
      </node>
      <node id="12091">
        <label>ATen/SmallVector.h</label>
        <link refid="_small_vector_8h_source"/>
        <childnode refid="12092" relation="include">
        </childnode>
        <childnode refid="12093" relation="include">
        </childnode>
        <childnode refid="12078" relation="include">
        </childnode>
        <childnode refid="12082" relation="include">
        </childnode>
        <childnode refid="12094" relation="include">
        </childnode>
        <childnode refid="12095" relation="include">
        </childnode>
        <childnode refid="12077" relation="include">
        </childnode>
        <childnode refid="12096" relation="include">
        </childnode>
        <childnode refid="12071" relation="include">
        </childnode>
        <childnode refid="12097" relation="include">
        </childnode>
        <childnode refid="12076" relation="include">
        </childnode>
        <childnode refid="12075" relation="include">
        </childnode>
        <childnode refid="12068" relation="include">
        </childnode>
      </node>
      <node id="12093">
        <label>algorithm</label>
      </node>
      <node id="12118">
        <label>ATen/Generator.h</label>
        <link refid="_generator_8h_source"/>
        <childnode refid="12110" relation="include">
        </childnode>
      </node>
      <node id="12095">
        <label>cstring</label>
      </node>
      <node id="12071">
        <label>memory</label>
      </node>
      <node id="12077">
        <label>initializer_list</label>
      </node>
      <node id="12141">
        <label>ATen/Formatting.h</label>
        <link refid="_formatting_8h_source"/>
        <childnode refid="12106" relation="include">
        </childnode>
        <childnode refid="12117" relation="include">
        </childnode>
        <childnode refid="12108" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="basic_8cpp_1a656eb5868e824d59f489f910db438420" prot="public" static="no">
        <name>CATCH_CONFIG_MAIN</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/test/basic.cpp" line="1" column="9" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/test/basic.cpp" bodystart="1" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="basic_8cpp_1aff2a80e926cc237bf11d2ea2bdf3c2df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>THFloatTensor *</type>
        <definition>THFloatTensor* THFloatTensor_newWithSize2d</definition>
        <argsstring>(size_t a, size_t b)</argsstring>
        <name>THFloatTensor_newWithSize2d</name>
        <param>
          <type>size_t</type>
          <declname>a</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/test/basic.cpp" line="9" column="1"/>
      </memberdef>
      <memberdef kind="function" id="basic_8cpp_1a4bb64b0f3e1189ff753cfa6157b7e4d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void THFloatTensor_fill</definition>
        <argsstring>(THFloatTensor *, float v)</argsstring>
        <name>THFloatTensor_fill</name>
        <param>
          <type>THFloatTensor *</type>
        </param>
        <param>
          <type>float</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/test/basic.cpp" line="10" column="1"/>
      </memberdef>
      <memberdef kind="function" id="basic_8cpp_1ab120a702d872240278f1437103d236ff" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void test</definition>
        <argsstring>(Type &amp;type)</argsstring>
        <name>test</name>
        <param>
          <type><ref refid="structat_1_1_type" kindref="compound">Type</ref> &amp;</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/test/basic.cpp" line="22" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/test/basic.cpp" bodystart="22" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="basic_8cpp_1a199ff42ab415131833dd08db8ac9ce48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;basic tests CPU&quot;, &quot;[cpu]&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;basic tests CPU&quot;</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
          <array>[cpu]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/test/basic.cpp" line="275" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/test/basic.cpp" bodystart="275" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="basic_8cpp_1a71098e1061fea91391b2c25875f729ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;basic tests GPU&quot;, &quot;[cuda]&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;basic tests GPU&quot;</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
          <array>[cuda]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/test/basic.cpp" line="281" column="1" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/test/basic.cpp" bodystart="281" bodyend="287"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#define<sp/>CATCH_CONFIG_MAIN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;catch.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ATen/ATen.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;THNN/Reduction.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>TH<sp/>compat<sp/>test<sp/>only...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">THFloatTensor;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>THFloatTensor<sp/>*<sp/>THFloatTensor_newWithSize2d(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>b);</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>THFloatTensor_fill(THFloatTensor<sp/>*,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>v);</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;chrono&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;test_seed.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceat" kindref="compound">at</ref>;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Catch::Matchers::StartsWith;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test(<ref refid="structat_1_1_type" kindref="compound">Type</ref><sp/>&amp;<sp/>type)<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/>SECTION(<sp/></highlight><highlight class="stringliteral">&quot;resize&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>type.tensor();</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>a.resize_({3,4});</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(a.numel()<sp/>==<sp/>12);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>a.resize_({5,<sp/>7});</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(a.numel()<sp/>==<sp/>35);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>SECTION(<sp/></highlight><highlight class="stringliteral">&quot;ones<sp/>and<sp/>dot&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref><sp/>b0<sp/>=<sp/>ones({1,<sp/>1},<sp/>type);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(2<sp/>==<sp/>(b0+b0).sum().toCDouble());</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref><sp/>b1<sp/>=<sp/>ones({1,<sp/>2},<sp/>type);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(4<sp/>==<sp/>(b1+b1).sum().toCDouble());</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref><sp/>b<sp/>=<sp/>ones({3,<sp/>4},<sp/>type);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(24<sp/>==<sp/>(b+b).sum().toCDouble());</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(12<sp/>==<sp/>b.numel());</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(b.view(-1).dot(b.view(-1)).toCDouble()<sp/>==<sp/>12);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>SECTION(<sp/></highlight><highlight class="stringliteral">&quot;rand&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>10;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref><sp/>a<sp/>=<sp/>rand({3,4},<sp/>type.toScalarType(i<sp/>%<sp/>2<sp/>==<sp/>0<sp/>?<sp/>kFloat<sp/>:<sp/>kDouble));</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>SECTION(<sp/></highlight><highlight class="stringliteral">&quot;sort&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref><sp/>b<sp/>=<sp/>rand({3,<sp/>4},<sp/>type);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z<sp/>=<sp/>b.sort(1);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>z_sorted<sp/>=<sp/>std::get&lt;0&gt;(z);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(<ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref>(z_sorted[0][0]).toFloat()<sp/>&lt;<sp/><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref>(z_sorted[0][1]).toFloat());</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(type.backend()<sp/>!=<sp/>kCUDA)</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>SECTION(<sp/></highlight><highlight class="stringliteral">&quot;randperm&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref><sp/>b<sp/>=<sp/>randperm(15,<sp/>type);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref><sp/>rv,<sp/>ri;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>std::tie(rv,<sp/>ri)<sp/>=<sp/>sort(b,<sp/>0);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(<ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref>(rv[0]).toFloat()<sp/>&lt;=<sp/><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref>(rv[1]).toFloat());</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>SECTION(<sp/></highlight><highlight class="stringliteral">&quot;context&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;context:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::hex<sp/>&lt;&lt;<sp/>(int64_t)&amp;globalContext()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>SECTION(<sp/></highlight><highlight class="stringliteral">&quot;add&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref><sp/>a<sp/>=<sp/>rand({3,<sp/>4},<sp/>type);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref><sp/>b<sp/>=<sp/>rand({3,<sp/>4},<sp/>type);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref><sp/>c<sp/>=<sp/>add(a,<sp/>add(a,<sp/>b));</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//TODO:0-dim<sp/>Tensor<sp/>d(3.f);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref><sp/>d<sp/>=<sp/>3.f;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(<sp/>add(c,<sp/>d).allclose(a<sp/>+<sp/>a<sp/>+<sp/>b<sp/>+<sp/>d)<sp/>);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>SECTION(<sp/></highlight><highlight class="stringliteral">&quot;loads<sp/>of<sp/>adds&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>begin<sp/>=<sp/>std::chrono::high_resolution_clock::now();</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref><sp/>d<sp/>=<sp/>ones({3,<sp/>4},<sp/>type);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref><sp/>r<sp/>=<sp/>zeros({3,<sp/>4},<sp/>type);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>100000;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>add_out(r,<sp/>r,<sp/>d);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>end<sp/>=<sp/>std::chrono::high_resolution_clock::now();</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//TODO<sp/>TEST<sp/>PERF?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::dec<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(end-begin).count()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>ms&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(norm(100000*d).toCDouble()<sp/>==<sp/>norm(r).toCDouble());</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>SECTION(<sp/></highlight><highlight class="stringliteral">&quot;loads<sp/>of<sp/>adds<sp/>(with<sp/>copy)&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>begin<sp/>=<sp/>std::chrono::high_resolution_clock::now();</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref><sp/>d<sp/>=<sp/>ones({3,<sp/>4},<sp/>type);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref><sp/>r<sp/>=<sp/>zeros({3,<sp/>4},<sp/>type);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>100000;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>add(r,<sp/>d);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>end<sp/>=<sp/>std::chrono::high_resolution_clock::now();</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//TODO<sp/>TEST<sp/>PERF?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::dec<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(end-begin).count()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>ms&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(norm(100000*d).toCDouble()<sp/>==<sp/>norm(r).toCDouble());</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>SECTION(<sp/></highlight><highlight class="stringliteral">&quot;isContiguous&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref><sp/>a<sp/>=<sp/>rand({3,<sp/>4},<sp/>type);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(a.is_contiguous());</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>=<sp/>a.transpose(0,<sp/>1);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(!a.is_contiguous());</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>SECTION(<sp/></highlight><highlight class="stringliteral">&quot;permute&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref><sp/>a<sp/>=<sp/>rand({3,<sp/>4,<sp/>5},<sp/>type);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref><sp/>b<sp/>=<sp/>a.permute({1,<sp/>2,<sp/>0});</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(b.sizes().equals({4,<sp/>5,<sp/>3}));</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(b.strides().equals({5,<sp/>1,<sp/>20}));</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>SECTION(<sp/></highlight><highlight class="stringliteral">&quot;mm&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref><sp/>a<sp/>=<sp/>rand({3,<sp/>4},<sp/>type);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref><sp/>b<sp/>=<sp/>rand({4},<sp/>type);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref><sp/>c<sp/>=<sp/>mv(a,<sp/>b);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(c.equal(addmv(zeros({3},<sp/>type),<sp/>a,<sp/>b,<sp/>0,<sp/>1)));</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>SECTION(<sp/></highlight><highlight class="stringliteral">&quot;squeeze&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref><sp/>a<sp/>=<sp/>rand({2,<sp/>1},<sp/>type);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref><sp/>b<sp/>=<sp/>squeeze(a);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(b.dim()<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>=<sp/>rand({1},<sp/>type);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>b<sp/>=<sp/>squeeze(a);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//TODO<sp/>0-dim<sp/>squeeze</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(a[0].equal(b));</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>SECTION(<sp/></highlight><highlight class="stringliteral">&quot;copy&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref><sp/>a<sp/>=<sp/>zeros({4,<sp/>3},<sp/>type);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref><sp/>e<sp/>=<sp/>rand({4,<sp/>3},<sp/>type);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>a.copy_(e);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(a.equal(e));</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>SECTION(<sp/></highlight><highlight class="stringliteral">&quot;copy<sp/>(broadcasting)&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref><sp/>a<sp/>=<sp/>zeros({4,<sp/>3},<sp/>type);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref><sp/>e<sp/>=<sp/>rand({3},<sp/>type);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>a.copy_(e);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>REQUIRE(a[i].equal(e));</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>SECTION(<sp/></highlight><highlight class="stringliteral">&quot;abs(value)&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref><sp/>r<sp/>=<sp/>at::abs(type.scalarTensor(-3));</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(<ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref>(r).toInt()<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="comment">//TODO(zach):<sp/>operator<sp/>overloads</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;eq<sp/>(value):&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref><sp/>a<sp/>=<sp/><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref>(10.f);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(a<sp/>==<sp/>11_i64)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>--<sp/>should<sp/>be<sp/>0&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(a<sp/>==<sp/>10_i64)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>--<sp/>should<sp/>be<sp/>1&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>(a<sp/>==<sp/>10.)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>--<sp/>should<sp/>be<sp/>1&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>SECTION(<sp/></highlight><highlight class="stringliteral">&quot;adding<sp/>a<sp/>value<sp/>with<sp/>a<sp/>scalar&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref><sp/>a<sp/>=<sp/>rand({4,<sp/>3},<sp/>type);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE((ones({4,3},<sp/>type)<sp/>+<sp/>a).equal(add(a,1)));</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>SECTION(<sp/></highlight><highlight class="stringliteral">&quot;select&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref><sp/>a<sp/>=<sp/>rand({3,<sp/>7},<sp/>type);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>a_13<sp/>=<sp/>select(a,<sp/>1,<sp/>3);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>a_13_02<sp/>=<sp/>select(select(a,<sp/>1,<sp/>3),<sp/>0,<sp/>2);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(<sp/>a[0][3].equal(a_13[0])<sp/>);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(<sp/>a[2][3].equal(a_13_02)<sp/>);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>SECTION(<sp/></highlight><highlight class="stringliteral">&quot;zero-dim&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref><sp/>a<sp/>=<sp/><sp/>type.scalarTensor(4);<sp/></highlight><highlight class="comment">//rand(type,<sp/>{1});</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE_NOTHROW(<ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref>(a));</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref><sp/>b<sp/>=<sp/>rand({3,4},<sp/>type);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE((a<sp/>+<sp/>a).dim()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE((1<sp/>+<sp/>a).dim()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE((b<sp/>+<sp/>a).dim()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE((a<sp/>+<sp/>b).dim()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>rand({3,4},<sp/>type);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(c[1][2].dim()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>f<sp/>=<sp/>rand({3,4},<sp/>type);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>f[2]<sp/>=<sp/>zeros({4},<sp/>type);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>f[1][0]<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(<ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref>(f[2][0]).toDouble()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>SECTION(<sp/></highlight><highlight class="stringliteral">&quot;tensor<sp/>from<sp/>TH&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>THFloatTensor<sp/>*t<sp/>=<sp/>THFloatTensor_newWithSize2d(a,<sp/>a);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>THFloatTensor_fill(t,<sp/>a);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref><sp/>tt<sp/>=<sp/>CPU(kFloat).unsafeTensorFromTH(t,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE_NOTHROW(tt);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>SECTION(<sp/></highlight><highlight class="stringliteral">&quot;toCFloat&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref><sp/>a<sp/>=<sp/>zeros({3,4});</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref><sp/>b<sp/>=<sp/>ones({3,7});</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref><sp/>c<sp/>=<sp/>cat({a,b},1);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(c.size(1)<sp/>==<sp/>11);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref><sp/>e<sp/>=<sp/>rand({});</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(*e.data&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">&gt;()<sp/>==<sp/>e.sum().toCFloat());</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>SECTION(<sp/></highlight><highlight class="stringliteral">&quot;to<sp/>string&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref><sp/>b<sp/>=<sp/>ones({3,7})*.0000001f;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>s;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>&lt;&lt;<sp/>b<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>expect<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;1e-07<sp/>*&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(s.str().substr(0,expect.size())<sp/>==<sp/>expect);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>SECTION(</highlight><highlight class="stringliteral">&quot;indexing<sp/>by<sp/>Scalar&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref><sp/>tensor<sp/>=<sp/>arange(0,<sp/>10,<sp/>kInt);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref><sp/>one<sp/>=<sp/>ones({1},<sp/>kInt);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int64_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>tensor.numel();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>REQUIRE(tensor[i].equal(one<sp/>*<sp/>i));</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>static_cast&lt;uint64_t&gt;(tensor.numel());<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>REQUIRE(tensor[i].equal(one<sp/>*<sp/>static_cast&lt;int64_t&gt;(i)));</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>tensor.numel();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>REQUIRE(tensor[i].equal(one<sp/>*<sp/>i));</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int16_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>tensor.numel();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>REQUIRE(tensor[i].equal(one<sp/>*<sp/>i));</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int8_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>tensor.numel();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>REQUIRE(tensor[i].equal(one<sp/>*<sp/>i));</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE_THROWS_WITH(</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tensor[<ref refid="classat_1_1_scalar" kindref="compound">Scalar</ref>(3.14)].equal(one),</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StartsWith(</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Can<sp/>only<sp/>index<sp/>tensors<sp/>with<sp/>integral<sp/>scalars<sp/>(got<sp/>CPUDoubleType)&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>SECTION(</highlight><highlight class="stringliteral">&quot;indexing<sp/>by<sp/>zero-dim<sp/>tensor&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref><sp/>tensor<sp/>=<sp/>arange(0,<sp/>10,<sp/>kInt);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref><sp/>one<sp/>=<sp/>ones({},<sp/>kInt);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>tensor.numel();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>REQUIRE(tensor[one<sp/>*<sp/>i].equal(one<sp/>*<sp/>i));</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE_THROWS_WITH(</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tensor[ones({})<sp/>*<sp/>3.14].equal(one),</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StartsWith(</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Can<sp/>only<sp/>index<sp/>tensors<sp/>with<sp/>integral<sp/>scalars<sp/>(got<sp/>CPUFloatType)&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE_THROWS_WITH(</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tensor[<ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref>()].equal(one),</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StartsWith(</highlight><highlight class="stringliteral">&quot;Can<sp/>only<sp/>index<sp/>with<sp/>tensors<sp/>that<sp/>are<sp/>defined&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE_THROWS_WITH(</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tensor[ones({2,<sp/>3,<sp/>4},<sp/>kInt)].equal(one),</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StartsWith(</highlight><highlight class="stringliteral">&quot;Can<sp/>only<sp/>index<sp/>with<sp/>tensors<sp/>that<sp/>are<sp/>scalars<sp/>(zero-dim)&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/>SECTION(</highlight><highlight class="stringliteral">&quot;dispatch&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref><sp/>tensor<sp/>=<sp/>randn({20,<sp/>20});</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structat_1_1_tensor" kindref="compound">Tensor</ref><sp/>other<sp/>=<sp/>randn({20,<sp/>20});</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>tensor.m(relu).m(mse_loss,<sp/>other,<sp/>Reduction::ElementwiseMean);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(result.allclose(mse_loss(relu(tensor),<sp/>other)));</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="273"><highlight class="normal">}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal">TEST_CASE(<sp/></highlight><highlight class="stringliteral">&quot;basic<sp/>tests<sp/>CPU&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[cpu]&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>manual_seed(123,<sp/>at::Backend::CPU);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>test(CPU(kFloat));</highlight></codeline>
<codeline lineno="279"><highlight class="normal">}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal">TEST_CASE(<sp/></highlight><highlight class="stringliteral">&quot;basic<sp/>tests<sp/>GPU&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[cuda]&quot;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>manual_seed(123,<sp/>at::Backend::CUDA);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(at::hasCUDA())<sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>test(CUDA(kFloat));</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/test/basic.cpp"/>
  </compounddef>
</doxygen>
