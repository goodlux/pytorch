<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="mkl_2_spectral_ops_8cpp" kind="file" language="C++">
    <compoundname>SpectralOps.cpp</compoundname>
    <includes refid="_a_ten_8h" local="yes">ATen/ATen.h</includes>
    <includes local="yes">ATen/NativeFunctions.h</includes>
    <includes refid="_spectral_ops_utils_8h" local="yes">ATen/native/SpectralOpsUtils.h</includes>
    <includes refid="_config_8h" local="yes">ATen/Config.h</includes>
    <incdepgraph>
      <node id="6813">
        <label>ATen/optional.h</label>
        <link refid="optional_8h_source"/>
        <childnode refid="6814" relation="include">
        </childnode>
        <childnode refid="6815" relation="include">
        </childnode>
        <childnode refid="6816" relation="include">
        </childnode>
        <childnode refid="6817" relation="include">
        </childnode>
        <childnode refid="6818" relation="include">
        </childnode>
        <childnode refid="6819" relation="include">
        </childnode>
        <childnode refid="6820" relation="include">
        </childnode>
      </node>
      <node id="6859">
        <label>ATen/detail/CUDAHooksInterface.h</label>
        <link refid="_c_u_d_a_hooks_interface_8h_source"/>
        <childnode refid="6809" relation="include">
        </childnode>
        <childnode refid="6812" relation="include">
        </childnode>
        <childnode refid="6857" relation="include">
        </childnode>
        <childnode refid="6860" relation="include">
        </childnode>
        <childnode refid="6821" relation="include">
        </childnode>
        <childnode refid="6818" relation="include">
        </childnode>
        <childnode refid="6810" relation="include">
        </childnode>
      </node>
      <node id="6827">
        <label>ATen/Device.h</label>
        <link refid="_device_8h_source"/>
        <childnode refid="6812" relation="include">
        </childnode>
        <childnode refid="6828" relation="include">
        </childnode>
        <childnode refid="6821" relation="include">
        </childnode>
        <childnode refid="6843" relation="include">
        </childnode>
        <childnode refid="6819" relation="include">
        </childnode>
        <childnode refid="6818" relation="include">
        </childnode>
      </node>
      <node id="6826">
        <label>atomic</label>
      </node>
      <node id="6818">
        <label>functional</label>
      </node>
      <node id="6864">
        <label>ATen/Backtrace.h</label>
        <link refid="_backtrace_8h_source"/>
        <childnode refid="6821" relation="include">
        </childnode>
        <childnode refid="6819" relation="include">
        </childnode>
        <childnode refid="6854" relation="include">
        </childnode>
        <childnode refid="6807" relation="include">
        </childnode>
      </node>
      <node id="6828">
        <label>ATen/ScalarType.h</label>
        <link refid="_scalar_type_8h_source"/>
        <childnode refid="6829" relation="include">
        </childnode>
        <childnode refid="6807" relation="include">
        </childnode>
        <childnode refid="6839" relation="include">
        </childnode>
        <childnode refid="6841" relation="include">
        </childnode>
        <childnode refid="6845" relation="include">
        </childnode>
      </node>
      <node id="6840">
        <label>limits</label>
      </node>
      <node id="6848">
        <label>assert.h</label>
      </node>
      <node id="6853">
        <label>ATen/Utils.h</label>
        <link refid="aten_2src_2_a_ten_2utils_8h_source"/>
        <childnode refid="6807" relation="include">
        </childnode>
        <childnode refid="6829" relation="include">
        </childnode>
        <childnode refid="6812" relation="include">
        </childnode>
        <childnode refid="6852" relation="include">
        </childnode>
        <childnode refid="6832" relation="include">
        </childnode>
        <childnode refid="6824" relation="include">
        </childnode>
        <childnode refid="6854" relation="include">
        </childnode>
        <childnode refid="6855" relation="include">
        </childnode>
      </node>
      <node id="6835">
        <label>iterator</label>
      </node>
      <node id="6847">
        <label>ATen/Scalar.h</label>
        <link refid="_scalar_8h_source"/>
        <childnode refid="6848" relation="include">
        </childnode>
        <childnode refid="6849" relation="include">
        </childnode>
        <childnode refid="6820" relation="include">
        </childnode>
        <childnode refid="6819" relation="include">
        </childnode>
        <childnode refid="6814" relation="include">
        </childnode>
        <childnode refid="6807" relation="include">
        </childnode>
        <childnode refid="6839" relation="include">
        </childnode>
        <childnode refid="6828" relation="include">
        </childnode>
        <childnode refid="6850" relation="include">
        </childnode>
        <childnode refid="6853" relation="include">
        </childnode>
      </node>
      <node id="6867">
        <label>TH/THStorageFunctions.hpp</label>
      </node>
      <node id="6887">
        <label>ATen/native/SpectralOpsUtils.h</label>
        <link refid="_spectral_ops_utils_8h_source"/>
        <childnode refid="6819" relation="include">
        </childnode>
        <childnode refid="6820" relation="include">
        </childnode>
        <childnode refid="6824" relation="include">
        </childnode>
      </node>
      <node id="6841">
        <label>cstdint</label>
      </node>
      <node id="6875">
        <label>ATen/Deprecated.h</label>
        <link refid="_deprecated_8h_source"/>
      </node>
      <node id="6849">
        <label>stdint.h</label>
      </node>
      <node id="6886">
        <label>ATen/CUDAGuard.h</label>
        <link refid="_c_u_d_a_guard_8h_source"/>
      </node>
      <node id="6842">
        <label>cmath</label>
      </node>
      <node id="6817">
        <label>cassert</label>
      </node>
      <node id="6858">
        <label>ATen/Context.h</label>
        <link refid="_context_8h_source"/>
        <childnode refid="6807" relation="include">
        </childnode>
        <childnode refid="6808" relation="include">
        </childnode>
        <childnode refid="6857" relation="include">
        </childnode>
        <childnode refid="6856" relation="include">
        </childnode>
        <childnode refid="6853" relation="include">
        </childnode>
        <childnode refid="6812" relation="include">
        </childnode>
        <childnode refid="6859" relation="include">
        </childnode>
        <childnode refid="6865" relation="include">
        </childnode>
        <childnode refid="6810" relation="include">
        </childnode>
        <childnode refid="6862" relation="include">
        </childnode>
        <childnode refid="6841" relation="include">
        </childnode>
      </node>
      <node id="6844">
        <label>Half-inl.h</label>
        <link refid="_half-inl_8h_source"/>
        <childnode refid="6807" relation="include">
        </childnode>
        <childnode refid="6834" relation="include">
        </childnode>
        <childnode refid="6840" relation="include">
        </childnode>
      </node>
      <node id="6820">
        <label>stdexcept</label>
      </node>
      <node id="6881">
        <label>ATen/TensorOperators.h</label>
        <link refid="_tensor_operators_8h_source"/>
        <childnode refid="6847" relation="include">
        </childnode>
        <childnode refid="6868" relation="include">
        </childnode>
        <childnode refid="6856" relation="include">
        </childnode>
        <childnode refid="6819" relation="include">
        </childnode>
        <childnode refid="6820" relation="include">
        </childnode>
      </node>
      <node id="6855">
        <label>numeric</label>
      </node>
      <node id="6851">
        <label>ATen/TensorImpl.h</label>
        <link refid="_tensor_impl_8h_source"/>
        <childnode refid="6826" relation="include">
        </childnode>
        <childnode refid="6810" relation="include">
        </childnode>
        <childnode refid="6825" relation="include">
        </childnode>
        <childnode refid="6828" relation="include">
        </childnode>
        <childnode refid="6813" relation="include">
        </childnode>
      </node>
      <node id="6839">
        <label>ATen/Half.h</label>
        <link refid="_half_8h_source"/>
        <childnode refid="6807" relation="include">
        </childnode>
        <childnode refid="6840" relation="include">
        </childnode>
        <childnode refid="6819" relation="include">
        </childnode>
        <childnode refid="6841" relation="include">
        </childnode>
        <childnode refid="6820" relation="include">
        </childnode>
        <childnode refid="6814" relation="include">
        </childnode>
        <childnode refid="6842" relation="include">
        </childnode>
        <childnode refid="6843" relation="include">
        </childnode>
        <childnode refid="6844" relation="include">
        </childnode>
      </node>
      <node id="6825">
        <label>ATen/Retainable.h</label>
        <link refid="_retainable_8h_source"/>
        <childnode refid="6826" relation="include">
        </childnode>
      </node>
      <node id="6850">
        <label>ATen/TensorBase.h</label>
        <link refid="_tensor_base_8h_source"/>
        <childnode refid="6851" relation="include">
        </childnode>
        <childnode refid="6852" relation="include">
        </childnode>
      </node>
      <node id="6819">
        <label>string</label>
      </node>
      <node id="6884">
        <label>ATen/DimVector.h</label>
        <link refid="_dim_vector_8h_source"/>
        <childnode refid="6830" relation="include">
        </childnode>
        <childnode refid="6849" relation="include">
        </childnode>
      </node>
      <node id="6885">
        <label>ATen/OptionsGuard.h</label>
        <link refid="_options_guard_8h_source"/>
        <childnode refid="6827" relation="include">
        </childnode>
        <childnode refid="6871" relation="include">
        </childnode>
        <childnode refid="6828" relation="include">
        </childnode>
        <childnode refid="6878" relation="include">
        </childnode>
        <childnode refid="6813" relation="include">
        </childnode>
      </node>
      <node id="6888">
        <label>ATen/Config.h</label>
        <link refid="_config_8h_source"/>
      </node>
      <node id="6809">
        <label>ATen/Allocator.h</label>
        <link refid="_allocator_8h_source"/>
        <childnode refid="6810" relation="include">
        </childnode>
        <childnode refid="6811" relation="include">
        </childnode>
        <childnode refid="6812" relation="include">
        </childnode>
        <childnode refid="6825" relation="include">
        </childnode>
        <childnode refid="6827" relation="include">
        </childnode>
        <childnode refid="6846" relation="include">
        </childnode>
      </node>
      <node id="6865">
        <label>ATen/CUDAStream.h</label>
        <link refid="_c_u_d_a_stream_8h_source"/>
      </node>
      <node id="6877">
        <label>ATen/DeviceGuard.h</label>
        <link refid="_device_guard_8h_source"/>
        <childnode refid="6827" relation="include">
        </childnode>
        <childnode refid="6812" relation="include">
        </childnode>
        <childnode refid="6828" relation="include">
        </childnode>
        <childnode refid="6868" relation="include">
        </childnode>
        <childnode refid="6859" relation="include">
        </childnode>
        <childnode refid="6821" relation="include">
        </childnode>
      </node>
      <node id="6822">
        <label>exception</label>
      </node>
      <node id="6811">
        <label>stddef.h</label>
      </node>
      <node id="6852">
        <label>ATen/UndefinedTensor.h</label>
        <link refid="_undefined_tensor_8h_source"/>
        <childnode refid="6851" relation="include">
        </childnode>
      </node>
      <node id="6883">
        <label>ATen/Dispatch.h</label>
        <link refid="_dispatch_8h_source"/>
        <childnode refid="6812" relation="include">
        </childnode>
        <childnode refid="6839" relation="include">
        </childnode>
        <childnode refid="6856" relation="include">
        </childnode>
      </node>
      <node id="6831">
        <label>AlignOf.h</label>
        <link refid="_align_of_8h_source"/>
        <childnode refid="6821" relation="include">
        </childnode>
      </node>
      <node id="6866">
        <label>ATen/Storage.h</label>
        <link refid="_storage_8h_source"/>
        <childnode refid="6847" relation="include">
        </childnode>
        <childnode refid="6867" relation="include">
        </childnode>
      </node>
      <node id="6823">
        <label>ostream</label>
      </node>
      <node id="6808">
        <label>ATen/CPUGeneral.h</label>
        <link refid="_c_p_u_general_8h_source"/>
        <childnode refid="6807" relation="include">
        </childnode>
      </node>
      <node id="6856">
        <label>ATen/Type.h</label>
      </node>
      <node id="6829">
        <label>ATen/ArrayRef.h</label>
        <link refid="_array_ref_8h_source"/>
        <childnode refid="6812" relation="include">
        </childnode>
        <childnode refid="6830" relation="include">
        </childnode>
        <childnode refid="6837" relation="include">
        </childnode>
        <childnode refid="6835" relation="include">
        </childnode>
        <childnode refid="6838" relation="include">
        </childnode>
      </node>
      <node id="6872">
        <label>ATen/TensorGeometry.h</label>
        <link refid="_tensor_geometry_8h_source"/>
        <childnode refid="6856" relation="include">
        </childnode>
        <childnode refid="6873" relation="include">
        </childnode>
      </node>
      <node id="6869">
        <label>ATen/SparseTensorRef.h</label>
        <link refid="_sparse_tensor_ref_8h_source"/>
      </node>
      <node id="6807">
        <label>ATen/ATenGeneral.h</label>
        <link refid="_a_ten_general_8h_source"/>
      </node>
      <node id="6873">
        <label>ATen/WrapDimUtils.h</label>
        <link refid="_wrap_dim_utils_8h_source"/>
        <childnode refid="6851" relation="include">
        </childnode>
        <childnode refid="6824" relation="include">
        </childnode>
      </node>
      <node id="6870">
        <label>ATen/TensorAccessor.h</label>
        <link refid="_tensor_accessor_8h_source"/>
        <childnode refid="6821" relation="include">
        </childnode>
        <childnode refid="6849" relation="include">
        </childnode>
        <childnode refid="6828" relation="include">
        </childnode>
      </node>
      <node id="6854">
        <label>typeinfo</label>
      </node>
      <node id="6861">
        <label>cstdio</label>
      </node>
      <node id="6846">
        <label>ATen/detail/UniqueVoidPtr.h</label>
        <link refid="_unique_void_ptr_8h_source"/>
        <childnode refid="6810" relation="include">
        </childnode>
        <childnode refid="6807" relation="include">
        </childnode>
      </node>
      <node id="6838">
        <label>vector</label>
      </node>
      <node id="6882">
        <label>ATen/TensorMethods.h</label>
      </node>
      <node id="6879">
        <label>THNN/Reduction.h</label>
      </node>
      <node id="6836">
        <label>new</label>
      </node>
      <node id="6814">
        <label>utility</label>
      </node>
      <node id="6837">
        <label>array</label>
      </node>
      <node id="6824">
        <label>sstream</label>
      </node>
      <node id="6874">
        <label>ATen/Functions.h</label>
        <link refid="build_2aten_2src_2_a_ten_2_functions_8h_source"/>
        <childnode refid="6847" relation="include">
        </childnode>
        <childnode refid="6856" relation="include">
        </childnode>
        <childnode refid="6868" relation="include">
        </childnode>
        <childnode refid="6866" relation="include">
        </childnode>
        <childnode refid="6857" relation="include">
        </childnode>
        <childnode refid="6875" relation="include">
        </childnode>
        <childnode refid="6876" relation="include">
        </childnode>
        <childnode refid="6877" relation="include">
        </childnode>
        <childnode refid="6878" relation="include">
        </childnode>
        <childnode refid="6879" relation="include">
        </childnode>
      </node>
      <node id="6876">
        <label>ATen/NativeFunctions.h</label>
      </node>
      <node id="6843">
        <label>iosfwd</label>
      </node>
      <node id="6833">
        <label>cstdlib</label>
      </node>
      <node id="6845">
        <label>iostream</label>
      </node>
      <node id="6821">
        <label>cstddef</label>
      </node>
      <node id="6863">
        <label>unordered_map</label>
      </node>
      <node id="6862">
        <label>mutex</label>
      </node>
      <node id="6806">
        <label>ATen/ATen.h</label>
        <link refid="_a_ten_8h_source"/>
        <childnode refid="6807" relation="include">
        </childnode>
        <childnode refid="6808" relation="include">
        </childnode>
        <childnode refid="6809" relation="include">
        </childnode>
        <childnode refid="6847" relation="include">
        </childnode>
        <childnode refid="6856" relation="include">
        </childnode>
        <childnode refid="6857" relation="include">
        </childnode>
        <childnode refid="6858" relation="include">
        </childnode>
        <childnode refid="6866" relation="include">
        </childnode>
        <childnode refid="6868" relation="include">
        </childnode>
        <childnode refid="6827" relation="include">
        </childnode>
        <childnode refid="6872" relation="include">
        </childnode>
        <childnode refid="6874" relation="include">
        </childnode>
        <childnode refid="6880" relation="include">
        </childnode>
        <childnode refid="6881" relation="include">
        </childnode>
        <childnode refid="6882" relation="include">
        </childnode>
        <childnode refid="6883" relation="include">
        </childnode>
        <childnode refid="6884" relation="include">
        </childnode>
        <childnode refid="6877" relation="include">
        </childnode>
        <childnode refid="6878" relation="include">
        </childnode>
        <childnode refid="6871" relation="include">
        </childnode>
        <childnode refid="6885" relation="include">
        </childnode>
        <childnode refid="6886" relation="include">
        </childnode>
      </node>
      <node id="6860">
        <label>ATen/Registry.h</label>
        <link refid="_registry_8h_source"/>
        <childnode refid="6832" relation="include">
        </childnode>
        <childnode refid="6861" relation="include">
        </childnode>
        <childnode refid="6833" relation="include">
        </childnode>
        <childnode refid="6818" relation="include">
        </childnode>
        <childnode refid="6810" relation="include">
        </childnode>
        <childnode refid="6862" relation="include">
        </childnode>
        <childnode refid="6863" relation="include">
        </childnode>
        <childnode refid="6819" relation="include">
        </childnode>
        <childnode refid="6838" relation="include">
        </childnode>
        <childnode refid="6864" relation="include">
        </childnode>
        <childnode refid="6807" relation="include">
        </childnode>
      </node>
      <node id="6812">
        <label>ATen/Error.h</label>
        <link refid="_error_8h_source"/>
        <childnode refid="6807" relation="include">
        </childnode>
        <childnode refid="6813" relation="include">
        </childnode>
        <childnode refid="6821" relation="include">
        </childnode>
        <childnode refid="6822" relation="include">
        </childnode>
        <childnode refid="6823" relation="include">
        </childnode>
        <childnode refid="6824" relation="include">
        </childnode>
        <childnode refid="6819" relation="include">
        </childnode>
      </node>
      <node id="6878">
        <label>ATen/TensorOptions.h</label>
        <link refid="_tensor_options_8h_source"/>
        <childnode refid="6858" relation="include">
        </childnode>
        <childnode refid="6827" relation="include">
        </childnode>
        <childnode refid="6877" relation="include">
        </childnode>
        <childnode refid="6871" relation="include">
        </childnode>
        <childnode refid="6828" relation="include">
        </childnode>
        <childnode refid="6868" relation="include">
        </childnode>
        <childnode refid="6856" relation="include">
        </childnode>
        <childnode refid="6821" relation="include">
        </childnode>
        <childnode refid="6843" relation="include">
        </childnode>
        <childnode refid="6814" relation="include">
        </childnode>
      </node>
      <node id="6868">
        <label>ATen/Tensor.h</label>
        <link refid="build_2aten_2src_2_a_ten_2tensor_8h_source"/>
        <childnode refid="6857" relation="include">
        </childnode>
        <childnode refid="6847" relation="include">
        </childnode>
        <childnode refid="6828" relation="include">
        </childnode>
        <childnode refid="6869" relation="include">
        </childnode>
        <childnode refid="6866" relation="include">
        </childnode>
        <childnode refid="6870" relation="include">
        </childnode>
        <childnode refid="6850" relation="include">
        </childnode>
        <childnode refid="6851" relation="include">
        </childnode>
        <childnode refid="6853" relation="include">
        </childnode>
        <childnode refid="6827" relation="include">
        </childnode>
        <childnode refid="6871" relation="include">
        </childnode>
        <childnode refid="6813" relation="include">
        </childnode>
      </node>
      <node id="6815">
        <label>type_traits</label>
      </node>
      <node id="6871">
        <label>ATen/Layout.h</label>
        <link refid="_layout_8h_source"/>
        <childnode refid="6828" relation="include">
        </childnode>
        <childnode refid="6812" relation="include">
        </childnode>
        <childnode refid="6845" relation="include">
        </childnode>
      </node>
      <node id="6830">
        <label>ATen/SmallVector.h</label>
        <link refid="_small_vector_8h_source"/>
        <childnode refid="6831" relation="include">
        </childnode>
        <childnode refid="6832" relation="include">
        </childnode>
        <childnode refid="6817" relation="include">
        </childnode>
        <childnode refid="6821" relation="include">
        </childnode>
        <childnode refid="6833" relation="include">
        </childnode>
        <childnode refid="6834" relation="include">
        </childnode>
        <childnode refid="6816" relation="include">
        </childnode>
        <childnode refid="6835" relation="include">
        </childnode>
        <childnode refid="6810" relation="include">
        </childnode>
        <childnode refid="6836" relation="include">
        </childnode>
        <childnode refid="6815" relation="include">
        </childnode>
        <childnode refid="6814" relation="include">
        </childnode>
        <childnode refid="6807" relation="include">
        </childnode>
      </node>
      <node id="6832">
        <label>algorithm</label>
      </node>
      <node id="6857">
        <label>ATen/Generator.h</label>
        <link refid="_generator_8h_source"/>
        <childnode refid="6849" relation="include">
        </childnode>
      </node>
      <node id="6834">
        <label>cstring</label>
      </node>
      <node id="6805">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/mkl/SpectralOps.cpp</label>
        <link refid="mkl_2_spectral_ops_8cpp"/>
        <childnode refid="6806" relation="include">
        </childnode>
        <childnode refid="6876" relation="include">
        </childnode>
        <childnode refid="6887" relation="include">
        </childnode>
        <childnode refid="6888" relation="include">
        </childnode>
      </node>
      <node id="6810">
        <label>memory</label>
      </node>
      <node id="6816">
        <label>initializer_list</label>
      </node>
      <node id="6880">
        <label>ATen/Formatting.h</label>
        <link refid="_formatting_8h_source"/>
        <childnode refid="6845" relation="include">
        </childnode>
        <childnode refid="6856" relation="include">
        </childnode>
        <childnode refid="6847" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceat">at</innernamespace>
    <innernamespace refid="namespaceat_1_1native">at::native</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;ATen/ATen.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ATen/NativeFunctions.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ATen/native/SpectralOpsUtils.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ATen/Config.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!AT_MKL_ENABLED()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceat" kindref="compound">at</ref><sp/>{<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">native<sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal">Tensor<sp/>_fft_mkl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/>input,<sp/>int64_t<sp/>signal_ndim,</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>complex_input,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>complex_output,</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>inverse,<sp/>IntList<sp/>checked_signal_sizes,</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>normalized,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>onesided,</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IntList<sp/>output_sizes)<sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;fft:<sp/>ATen<sp/>not<sp/>compiled<sp/>with<sp/>MKL<sp/>support&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="16"><highlight class="normal">}</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal">}}</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/>//<sp/>AT_MKL_ENABLED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ATen/ATen.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ATen/Config.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ATen/Dispatch.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ATen/Utils.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ATen/NativeFunctions.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;numeric&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;mkl_dfti.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ATen/mkl/Exceptions.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ATen/mkl/Descriptors.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ATen/mkl/Limits.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_OPENMP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;omp.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceat" kindref="compound">at</ref><sp/>{<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">native<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//<sp/>In<sp/>real-to-complex<sp/>transform,<sp/>MKL<sp/>FFT<sp/>only<sp/>fills<sp/>half<sp/>of<sp/>the<sp/>values<sp/>due<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">//<sp/>conjugate<sp/>symmetry.<sp/>See<sp/>native/SpectralUtils.h<sp/>for<sp/>more<sp/>details.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>structs<sp/>are<sp/>used<sp/>to<sp/>fill<sp/>in<sp/>the<sp/>other<sp/>half<sp/>with<sp/>symmetry<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">//<sp/>case<sp/>of<sp/>real-to-complex<sp/>transform<sp/>with<sp/>onesided=False<sp/>flag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>NOTE<sp/>[<sp/>Fourier<sp/>Transform<sp/>Conjugate<sp/>Symmetry<sp/>]<sp/>in<sp/>native/SpectralOpsUtils.h.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>scalar_t&gt;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_fft_fill_with_conjugate_symmetry_slice(Tensor&amp;<sp/>output,</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>signal_ndim,<sp/>int64_t<sp/>size_last_dim,</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>start_last_dim_idx,<sp/>int64_t<sp/>i,<sp/>int64_t<sp/>num)<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>scalar_t<sp/>*data<sp/>=<sp/>output.data&lt;scalar_t&gt;();</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>slice<sp/>means<sp/>a<sp/>slice<sp/>of<sp/>last<sp/>dimension<sp/>(of<sp/>size<sp/>size_last_dim)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>iterates<sp/>through<sp/>the<sp/>slices<sp/>to<sp/>fill,<sp/>i.e.<sp/>to_slice_data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(basically<sp/>data_slices[i:i+num]),<sp/>and<sp/>keeps<sp/>track<sp/>of<sp/>the<sp/>slices<sp/>it<sp/>reads</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>data<sp/>from,<sp/>i.e.,<sp/>from_slice_data,<sp/>using<sp/>from_slice_indices,<sp/>a<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>containing<sp/>the<sp/>index<sp/>of<sp/>the<sp/>from_slice_data<sp/>slice.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>the<sp/>indices<sp/>for<sp/>the<sp/>first<sp/>from_slice_data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>std::vector&lt;int64_t&gt;<sp/>from_slice_indices(signal_ndim);<sp/><sp/></highlight><highlight class="comment">//<sp/>up<sp/>to<sp/>before<sp/>last<sp/>signal<sp/>dim</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>int64_t<sp/>remainder<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>last<sp/>signal<sp/>dim<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>int64_t<sp/>from_slice_offset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int64_t<sp/>d<sp/>=<sp/>signal_ndim<sp/>-<sp/>1;<sp/>d<sp/>&gt;=<sp/>0;<sp/>d--)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>dim_size<sp/>=<sp/>output.size(d);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>dim_idx<sp/>=<sp/>remainder<sp/>%<sp/>dim_size;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>remainder<sp/>=<sp/>remainder<sp/>/<sp/>dim_size;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>from_slice_indices[d]<sp/>=<sp/>dim_idx;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>from_slice_offset<sp/>+=<sp/>dim_idx<sp/>*<sp/>output.stride(d);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dim_idx<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>from_slice_offset<sp/>+=<sp/>(dim_size<sp/>-<sp/>dim_idx)<sp/>*<sp/>output.stride(d);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>to_slice_data<sp/>and<sp/>from_slice_data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>scalar_t<sp/>*to_slice_data<sp/>=<sp/>data<sp/>+<sp/>i<sp/>*<sp/>size_last_dim<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>scalar_t<sp/>*from_slice_data<sp/>=<sp/>data<sp/>+<sp/>from_slice_offset;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(num<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fill<sp/>to_slice_data<sp/>from<sp/>values<sp/>in<sp/>from_slice_data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int64_t<sp/>j<sp/>=<sp/>start_last_dim_idx;<sp/>j<sp/>&lt;<sp/>size_last_dim;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>multiply<sp/>index<sp/>by<sp/>2<sp/>because<sp/>of<sp/>the<sp/>last<sp/>complex<sp/>dim<sp/>has<sp/>size<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>to_idx<sp/>=<sp/>j<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>from_idx<sp/>=<sp/>(size_last_dim<sp/>-<sp/>j)<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>to_slice_data[to_idx]<sp/>=<sp/>from_slice_data[from_idx];</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>to_slice_data[to_idx<sp/>+<sp/>1]<sp/>=<sp/>-from_slice_data[from_idx<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>the<sp/>next<sp/>to_slice_data<sp/>and<sp/>from_slice_data<sp/>slices</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>to_slice_data<sp/>+=<sp/>size_last_dim<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int64_t<sp/>d<sp/>=<sp/>signal_ndim<sp/>-<sp/>1;<sp/>d<sp/>&gt;=<sp/>0;<sp/>d--)<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>the<sp/>next<sp/>index<sp/>at<sp/>this<sp/>dimension<sp/>using<sp/>conjugate<sp/>symmetry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Break<sp/>out<sp/>of<sp/>this<sp/>loop<sp/>if<sp/>nothing<sp/>carries<sp/>over</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>from_slice_indices[d]<sp/>=<sp/>(from_slice_indices[d]<sp/>+<sp/>1)<sp/>%<sp/>output.size(d);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>At<sp/>d<sp/>&gt;<sp/>0<sp/>nonbatch<sp/>dim,<sp/>to<sp/>get<sp/>next<sp/>from_slice_data<sp/>offset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>1.<sp/>if<sp/>this<sp/>dim<sp/>idx<sp/>becomes<sp/>1,<sp/>will<sp/>need<sp/>to<sp/>add<sp/>(size<sp/>-<sp/>1)<sp/>*<sp/>stride</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>2.<sp/>otherwise,<sp/>will<sp/>need<sp/>to<sp/>subtract<sp/>stride</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(from_slice_indices[d]<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Substract.<sp/>Carries<sp/>over<sp/>to<sp/>previous<sp/>dimension</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>from_slice_data<sp/>-=<sp/>output.stride(d);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(from_slice_indices[d]<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Dimension<sp/>index<sp/>becomes<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Doesn&apos;t<sp/>carry<sp/>over<sp/>to<sp/>previous<sp/>dimension</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>from_slice_data<sp/>+=<sp/>(output.size(d)<sp/>-<sp/>1)<sp/>*<sp/>output.stride(d);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Substract.<sp/>Doesn&apos;t<sp/>carry<sp/>over<sp/>to<sp/>previous<sp/>dimension</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>from_slice_data<sp/>-=<sp/>output.stride(d);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>At<sp/>d<sp/>=<sp/>0<sp/>nonbatch<sp/>dim,<sp/>it<sp/>means<sp/>that<sp/>to_slice_data<sp/>ise<sp/>now<sp/>at<sp/>a<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>beginning<sp/>of<sp/>a<sp/>data<sp/>sample.<sp/>It<sp/>maps<sp/>to<sp/>itself<sp/>by<sp/>conjugate<sp/>symmetry.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>from_slice_data<sp/>=<sp/>to_slice_data;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>num--;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="comment">//<sp/>input<sp/>should<sp/>be<sp/>a<sp/>contiguous<sp/>batched<sp/>tensor<sp/>of<sp/>same<sp/>size<sp/>as<sp/>full<sp/>(twosided)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="comment">//<sp/>signals,<sp/>but<sp/>only<sp/>contains<sp/>half<sp/>(onesided)<sp/>of<sp/>the<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>modifies<sp/>inplace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_fft_fill_with_conjugate_symmetry_(Tensor&amp;<sp/>input,</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>signal_ndim,<sp/>int64_t<sp/>size_last_dim,</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>last_dim_start_slice)<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(last_dim_start_slice<sp/>&gt;=<sp/>size_last_dim)<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>int64_t<sp/>num<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int64_t<sp/>d<sp/>=<sp/>0;<sp/>d<sp/>&lt;<sp/>signal_ndim;<sp/>d++)<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>num<sp/>*=<sp/>input.size(d);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_OPENMP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num<sp/>&gt;<sp/>500)<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nthreads<sp/>=<sp/>omp_get_num_threads();</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>num_slices_per_thread<sp/>=<sp/>num<sp/>/<sp/>nthreads<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#pragma<sp/>omp<sp/>parallel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tid<sp/>=<sp/>omp_get_thread_num();</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>start<sp/>=<sp/>tid<sp/>*<sp/>num_slices_per_thread;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>AT_DISPATCH_FLOATING_TYPES(input.type(),<sp/></highlight><highlight class="stringliteral">&quot;_fft_fill_with_conjugate_symmetry&quot;</highlight><highlight class="normal">,<sp/>[&amp;]<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_fft_fill_with_conjugate_symmetry_slice&lt;scalar_t&gt;(input,<sp/>signal_ndim,<sp/>size_last_dim,</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last_dim_start_slice,<sp/>start,<sp/>std::min(num_slices_per_thread,<sp/>num<sp/>-<sp/>start));</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>AT_DISPATCH_FLOATING_TYPES(input.type(),<sp/></highlight><highlight class="stringliteral">&quot;_fft_fill_with_conjugate_symmetry&quot;</highlight><highlight class="normal">,<sp/>[&amp;]<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>_fft_fill_with_conjugate_symmetry_slice&lt;scalar_t&gt;(input,<sp/>signal_ndim,<sp/>size_last_dim,</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last_dim_start_slice,<sp/>0,<sp/>num);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MKL<sp/>DFTI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal">Tensor<sp/>_fft_mkl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>int64_t<sp/>signal_ndim,</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>complex_input,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>complex_output,</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>inverse,<sp/>IntList<sp/>checked_signal_sizes,</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>normalized,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>onesided,</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IntList<sp/>output_sizes)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>int64_t<sp/>batch<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.size(0);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>Tensor<sp/>input<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>real/imag<sp/>dimension<sp/>must<sp/>aligned<sp/>when<sp/>viewed<sp/>as<sp/>of<sp/>complex<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(complex_input)<sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>need_contiguous<sp/>=<sp/>input.stride(-1)<sp/>!=<sp/>1;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int64_t<sp/>i<sp/>=<sp/>0;<sp/>!need_contiguous<sp/>&amp;&amp;<sp/>i<sp/>&lt;=<sp/>signal_ndim;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>need_contiguous<sp/>|=<sp/>input.stride(i)<sp/>%<sp/>2<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(need_contiguous)<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>input<sp/>=<sp/>input.contiguous();</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>we<sp/>can<sp/>use<sp/>MKL<sp/>because<sp/>MKL_LONG<sp/>is<sp/>32bit<sp/>on<sp/>some<sp/>OS,<sp/>e.g.<sp/>Windows</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>need<sp/>to<sp/>check<sp/>input<sp/>and<sp/>output<sp/>size<sp/>and<sp/>strides</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>be<sp/>careful<sp/>about<sp/>complex<sp/>domain,<sp/>where<sp/>the<sp/>stride<sp/>needs<sp/>to<sp/>be<sp/>divided<sp/>by<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>only<sp/>need<sp/>to<sp/>test<sp/>upper<sp/>bound<sp/>MKL_LONG_MAX<sp/>as<sp/>these<sp/>values<sp/>are<sp/>non-negative</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(MKL_LONG)<sp/>&lt;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int64_t))<sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>need_contiguous<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>inumel<sp/>=<sp/>1<sp/></highlight><highlight class="comment">/*<sp/>istride<sp/>if<sp/>we<sp/>contiguous-fy<sp/>*/</highlight><highlight class="normal">,<sp/>onumel<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>isize,<sp/>osize,<sp/>istride,<sp/>ostride;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int64_t<sp/>i<sp/>=<sp/>signal_ndim;<sp/>i<sp/>&gt;=<sp/>0;<sp/>i--)<sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>isize<sp/>=<sp/>input.size(i);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>osize<sp/>=<sp/>output_sizes[i];</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>istride<sp/>=<sp/>complex_input<sp/>?<sp/>input.stride(i)<sp/>&gt;&gt;<sp/>1<sp/>:<sp/>input.stride(i);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ostride<sp/>=<sp/>onumel;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isize<sp/>&gt;<sp/>MKL_LONG_MAX<sp/>||<sp/>osize<sp/>&gt;<sp/>MKL_LONG_MAX<sp/>||<sp/>ostride<sp/>&gt;<sp/>MKL_LONG_MAX)<sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ostringstream<sp/>ss;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;MKL<sp/>FFT:<sp/>input<sp/>signal<sp/>numel<sp/>exceeds<sp/>allowed<sp/>range<sp/>[1<sp/>~<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>MKL_LONG_MAX<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(ss.str());</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!need_contiguous<sp/>&amp;&amp;<sp/>istride<sp/>&gt;<sp/>MKL_LONG_MAX)<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>didn&apos;t<sp/>plan<sp/>to<sp/>contiguous-fy<sp/>but<sp/>the<sp/>`istride`<sp/>exceeds<sp/>bound,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>we<sp/>can<sp/>stride<sp/>(equal<sp/>to<sp/>`inumel`)<sp/>get<sp/>back<sp/>within<sp/>bound<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>contiguous-fy.<sp/>If<sp/>so,<sp/>then<sp/>we<sp/>need<sp/>to<sp/>always<sp/>check<sp/>`inumel`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>instead<sp/>for<sp/>the<sp/>remaining<sp/>iterations.<sp/>The<sp/>iterations<sp/>before<sp/>this<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fine<sp/>as<sp/>`inumel`<sp/>is<sp/>non-decreasing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>need_contiguous<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(need_contiguous<sp/>&amp;&amp;<sp/>inumel<sp/>&gt;<sp/>MKL_LONG_MAX)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ostringstream<sp/>ss;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;MKL<sp/>FFT:<sp/>input<sp/>signal<sp/>numel<sp/>exceeds<sp/>allowed<sp/>range<sp/>[1<sp/>~<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>MKL_LONG_MAX<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(ss.str());</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>inumel<sp/>*=<sp/>isize;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>onumel<sp/>*=<sp/>osize;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>Tensor<sp/>output<sp/>=<sp/>input.type().tensor(output_sizes);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>precision</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>DFTI_CONFIG_VALUE<sp/>prec;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(input.type().scalarType()<sp/>==<sp/>ScalarType::Float)<sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>prec<sp/>=<sp/>DFTI_SINGLE;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(input.type().scalarType()<sp/>==<sp/>ScalarType::Double)<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>prec<sp/>=<sp/>DFTI_DOUBLE;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostringstream<sp/>ss;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;MKL<sp/>FFT<sp/>doesn&apos;t<sp/>support<sp/>tensor<sp/>of<sp/>type:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>at::toString(input.type().scalarType());</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(ss.str());</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>signal<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>DFTI_CONFIG_VALUE<sp/>signal_type;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!inverse)<sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>signal_type<sp/>=<sp/>complex_input<sp/>?<sp/>DFTI_COMPLEX<sp/>:<sp/>DFTI_REAL;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>signal_type<sp/>=<sp/>complex_output<sp/>?<sp/>DFTI_COMPLEX<sp/>:<sp/>DFTI_REAL;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>descriptor<sp/>with<sp/>signal<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>std::vector&lt;MKL_LONG&gt;<sp/>mkl_signal_sizes(checked_signal_sizes.begin(),<sp/>checked_signal_sizes.end());</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>DftiDescriptor<sp/>descriptor;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>descriptor.init(prec,<sp/>signal_type,<sp/>signal_ndim,<sp/>mkl_signal_sizes.data());</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>out<sp/>of<sp/>place<sp/>FFT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>MKL_DFTI_CHECK(DftiSetValue(descriptor.get(),<sp/>DFTI_PLACEMENT,<sp/>DFTI_NOT_INPLACE));</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>batch<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>MKL_DFTI_CHECK(DftiSetValue(descriptor.get(),<sp/>DFTI_NUMBER_OF_TRANSFORMS,<sp/>batch));</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>istrides<sp/>=<sp/>input.strides();</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ostrides<sp/>=<sp/>output.strides();</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>batch<sp/>dim<sp/>stride,<sp/>i.e.,<sp/>dist<sp/>between<sp/>each<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>MKL_LONG<sp/>idist<sp/>=<sp/>complex_input<sp/>?<sp/>istrides[0]<sp/>&gt;&gt;<sp/>1<sp/>:<sp/>istrides[0];</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>MKL_LONG<sp/>odist<sp/>=<sp/>complex_output<sp/>?<sp/>ostrides[0]<sp/>&gt;&gt;<sp/>1<sp/>:<sp/>ostrides[0];</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>MKL_DFTI_CHECK(DftiSetValue(descriptor.get(),<sp/>DFTI_INPUT_DISTANCE,<sp/>idist));</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>MKL_DFTI_CHECK(DftiSetValue(descriptor.get(),<sp/>DFTI_OUTPUT_DISTANCE,<sp/>odist));</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>signal<sp/>strides</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>val<sp/>is<sp/>offset,<sp/>set<sp/>to<sp/>zero<sp/>(ignored)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>std::vector&lt;MKL_LONG&gt;<sp/>mkl_istrides(1<sp/>+<sp/>signal_ndim,<sp/>0),<sp/>mkl_ostrides(1<sp/>+<sp/>signal_ndim,<sp/>0);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int64_t<sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>signal_ndim;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>mkl_istrides[i]<sp/>=<sp/>complex_input<sp/>?<sp/>istrides[i]<sp/>&gt;&gt;<sp/>1<sp/>:<sp/>istrides[i];</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>mkl_ostrides[i]<sp/>=<sp/>complex_output<sp/>?<sp/>ostrides[i]<sp/>&gt;&gt;<sp/>1<sp/>:<sp/>ostrides[i];</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>MKL_DFTI_CHECK(DftiSetValue(descriptor.get(),<sp/>DFTI_INPUT_STRIDES,<sp/>mkl_istrides.data()));</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/>MKL_DFTI_CHECK(DftiSetValue(descriptor.get(),<sp/>DFTI_OUTPUT_STRIDES,<sp/>mkl_ostrides.data()));</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>conjugate<sp/>domain<sp/>of<sp/>real<sp/>is<sp/>involved,<sp/>set<sp/>standard<sp/>CCE<sp/>storage<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>will<sp/>become<sp/>default<sp/>in<sp/>MKL<sp/>in<sp/>future</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!complex_input<sp/>||<sp/>!complex_output)<sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>MKL_DFTI_CHECK(DftiSetValue(descriptor.get(),<sp/>DFTI_CONJUGATE_EVEN_STORAGE,<sp/>DFTI_COMPLEX_COMPLEX));</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>rescale<sp/>if<sp/>needed<sp/>by<sp/>normalized<sp/>flag<sp/>or<sp/>inverse<sp/>transform</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(normalized<sp/>||<sp/>inverse)<sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>signal_numel<sp/>=<sp/>at::prod_intlist(checked_signal_sizes);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>double_scale;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(normalized)<sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>double_scale<sp/>=<sp/>1.0<sp/>/<sp/>std::sqrt(static_cast&lt;double&gt;(signal_numel));</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>double_scale<sp/>=<sp/>1.0<sp/>/<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(signal_numel);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>MKL_DFTI_CHECK(DftiSetValue(descriptor.get(),</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>inverse<sp/>?<sp/>DFTI_BACKWARD_SCALE<sp/>:<sp/>DFTI_FORWARD_SCALE,</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>prec<sp/>==<sp/>DFTI_DOUBLE<sp/>?<sp/>double_scale<sp/>:<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(double_scale)));</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>finalize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>MKL_DFTI_CHECK(DftiCommitDescriptor(descriptor.get()));</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>run</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!inverse)<sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>MKL_DFTI_CHECK(DftiComputeForward(descriptor.get(),<sp/>input.data_ptr(),<sp/>output.data_ptr()));</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>MKL_DFTI_CHECK(DftiComputeBackward(descriptor.get(),<sp/>input.data_ptr(),<sp/>output.data_ptr()));</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>if<sp/>needed,<sp/>fill<sp/>out<sp/>the<sp/>other<sp/>half<sp/>using<sp/>Hermitian<sp/>symmetry<sp/>dim</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!complex_input<sp/>&amp;&amp;<sp/>complex_output<sp/>&amp;&amp;<sp/>!onesided)<sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>size_last_signal_dim<sp/>=<sp/>checked_signal_sizes[signal_ndim<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>start_slice<sp/>=<sp/>infer_ft_real_to_complex_onesided_size(size_last_signal_dim);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>_fft_fill_with_conjugate_symmetry_(output,<sp/>signal_ndim,<sp/>size_last_signal_dim,<sp/>start_slice);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>output;</highlight></codeline>
<codeline lineno="297"><highlight class="normal">}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal">}}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>at::native</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/mkl/SpectralOps.cpp"/>
  </compounddef>
</doxygen>
