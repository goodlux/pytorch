<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="_linear_algebra_8cpp" kind="file" language="C++">
    <compoundname>LinearAlgebra.cpp</compoundname>
    <includes refid="_a_ten_8h" local="yes">ATen/ATen.h</includes>
    <includes refid="_expand_utils_8h" local="yes">ATen/ExpandUtils.h</includes>
    <includes local="yes">ATen/NativeFunctions.h</includes>
    <includes local="no">functional</includes>
    <includes local="no">numeric</includes>
    <includes local="no">vector</includes>
    <incdepgraph>
      <node id="6479">
        <label>ATen/optional.h</label>
        <link refid="optional_8h_source"/>
        <childnode refid="6480" relation="include">
        </childnode>
        <childnode refid="6481" relation="include">
        </childnode>
        <childnode refid="6482" relation="include">
        </childnode>
        <childnode refid="6483" relation="include">
        </childnode>
        <childnode refid="6484" relation="include">
        </childnode>
        <childnode refid="6485" relation="include">
        </childnode>
        <childnode refid="6486" relation="include">
        </childnode>
      </node>
      <node id="6525">
        <label>ATen/detail/CUDAHooksInterface.h</label>
        <link refid="_c_u_d_a_hooks_interface_8h_source"/>
        <childnode refid="6475" relation="include">
        </childnode>
        <childnode refid="6478" relation="include">
        </childnode>
        <childnode refid="6523" relation="include">
        </childnode>
        <childnode refid="6526" relation="include">
        </childnode>
        <childnode refid="6487" relation="include">
        </childnode>
        <childnode refid="6484" relation="include">
        </childnode>
        <childnode refid="6476" relation="include">
        </childnode>
      </node>
      <node id="6493">
        <label>ATen/Device.h</label>
        <link refid="_device_8h_source"/>
        <childnode refid="6478" relation="include">
        </childnode>
        <childnode refid="6494" relation="include">
        </childnode>
        <childnode refid="6487" relation="include">
        </childnode>
        <childnode refid="6509" relation="include">
        </childnode>
        <childnode refid="6485" relation="include">
        </childnode>
        <childnode refid="6484" relation="include">
        </childnode>
      </node>
      <node id="6492">
        <label>atomic</label>
      </node>
      <node id="6484">
        <label>functional</label>
      </node>
      <node id="6530">
        <label>ATen/Backtrace.h</label>
        <link refid="_backtrace_8h_source"/>
        <childnode refid="6487" relation="include">
        </childnode>
        <childnode refid="6485" relation="include">
        </childnode>
        <childnode refid="6520" relation="include">
        </childnode>
        <childnode refid="6473" relation="include">
        </childnode>
      </node>
      <node id="6494">
        <label>ATen/ScalarType.h</label>
        <link refid="_scalar_type_8h_source"/>
        <childnode refid="6495" relation="include">
        </childnode>
        <childnode refid="6473" relation="include">
        </childnode>
        <childnode refid="6505" relation="include">
        </childnode>
        <childnode refid="6507" relation="include">
        </childnode>
        <childnode refid="6511" relation="include">
        </childnode>
      </node>
      <node id="6506">
        <label>limits</label>
      </node>
      <node id="6514">
        <label>assert.h</label>
      </node>
      <node id="6519">
        <label>ATen/Utils.h</label>
        <link refid="aten_2src_2_a_ten_2utils_8h_source"/>
        <childnode refid="6473" relation="include">
        </childnode>
        <childnode refid="6495" relation="include">
        </childnode>
        <childnode refid="6478" relation="include">
        </childnode>
        <childnode refid="6518" relation="include">
        </childnode>
        <childnode refid="6498" relation="include">
        </childnode>
        <childnode refid="6490" relation="include">
        </childnode>
        <childnode refid="6520" relation="include">
        </childnode>
        <childnode refid="6521" relation="include">
        </childnode>
      </node>
      <node id="6501">
        <label>iterator</label>
      </node>
      <node id="6471">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/LinearAlgebra.cpp</label>
        <link refid="_linear_algebra_8cpp"/>
        <childnode refid="6472" relation="include">
        </childnode>
        <childnode refid="6553" relation="include">
        </childnode>
        <childnode refid="6542" relation="include">
        </childnode>
        <childnode refid="6484" relation="include">
        </childnode>
        <childnode refid="6521" relation="include">
        </childnode>
        <childnode refid="6504" relation="include">
        </childnode>
      </node>
      <node id="6513">
        <label>ATen/Scalar.h</label>
        <link refid="_scalar_8h_source"/>
        <childnode refid="6514" relation="include">
        </childnode>
        <childnode refid="6515" relation="include">
        </childnode>
        <childnode refid="6486" relation="include">
        </childnode>
        <childnode refid="6485" relation="include">
        </childnode>
        <childnode refid="6480" relation="include">
        </childnode>
        <childnode refid="6473" relation="include">
        </childnode>
        <childnode refid="6505" relation="include">
        </childnode>
        <childnode refid="6494" relation="include">
        </childnode>
        <childnode refid="6516" relation="include">
        </childnode>
        <childnode refid="6519" relation="include">
        </childnode>
      </node>
      <node id="6533">
        <label>TH/THStorageFunctions.hpp</label>
      </node>
      <node id="6507">
        <label>cstdint</label>
      </node>
      <node id="6541">
        <label>ATen/Deprecated.h</label>
        <link refid="_deprecated_8h_source"/>
      </node>
      <node id="6515">
        <label>stdint.h</label>
      </node>
      <node id="6552">
        <label>ATen/CUDAGuard.h</label>
        <link refid="_c_u_d_a_guard_8h_source"/>
      </node>
      <node id="6508">
        <label>cmath</label>
      </node>
      <node id="6483">
        <label>cassert</label>
      </node>
      <node id="6524">
        <label>ATen/Context.h</label>
        <link refid="_context_8h_source"/>
        <childnode refid="6473" relation="include">
        </childnode>
        <childnode refid="6474" relation="include">
        </childnode>
        <childnode refid="6523" relation="include">
        </childnode>
        <childnode refid="6522" relation="include">
        </childnode>
        <childnode refid="6519" relation="include">
        </childnode>
        <childnode refid="6478" relation="include">
        </childnode>
        <childnode refid="6525" relation="include">
        </childnode>
        <childnode refid="6531" relation="include">
        </childnode>
        <childnode refid="6476" relation="include">
        </childnode>
        <childnode refid="6528" relation="include">
        </childnode>
        <childnode refid="6507" relation="include">
        </childnode>
      </node>
      <node id="6510">
        <label>Half-inl.h</label>
        <link refid="_half-inl_8h_source"/>
        <childnode refid="6473" relation="include">
        </childnode>
        <childnode refid="6500" relation="include">
        </childnode>
        <childnode refid="6506" relation="include">
        </childnode>
      </node>
      <node id="6486">
        <label>stdexcept</label>
      </node>
      <node id="6547">
        <label>ATen/TensorOperators.h</label>
        <link refid="_tensor_operators_8h_source"/>
        <childnode refid="6513" relation="include">
        </childnode>
        <childnode refid="6534" relation="include">
        </childnode>
        <childnode refid="6522" relation="include">
        </childnode>
        <childnode refid="6485" relation="include">
        </childnode>
        <childnode refid="6486" relation="include">
        </childnode>
      </node>
      <node id="6521">
        <label>numeric</label>
      </node>
      <node id="6517">
        <label>ATen/TensorImpl.h</label>
        <link refid="_tensor_impl_8h_source"/>
        <childnode refid="6492" relation="include">
        </childnode>
        <childnode refid="6476" relation="include">
        </childnode>
        <childnode refid="6491" relation="include">
        </childnode>
        <childnode refid="6494" relation="include">
        </childnode>
        <childnode refid="6479" relation="include">
        </childnode>
      </node>
      <node id="6505">
        <label>ATen/Half.h</label>
        <link refid="_half_8h_source"/>
        <childnode refid="6473" relation="include">
        </childnode>
        <childnode refid="6506" relation="include">
        </childnode>
        <childnode refid="6485" relation="include">
        </childnode>
        <childnode refid="6507" relation="include">
        </childnode>
        <childnode refid="6486" relation="include">
        </childnode>
        <childnode refid="6480" relation="include">
        </childnode>
        <childnode refid="6508" relation="include">
        </childnode>
        <childnode refid="6509" relation="include">
        </childnode>
        <childnode refid="6510" relation="include">
        </childnode>
      </node>
      <node id="6491">
        <label>ATen/Retainable.h</label>
        <link refid="_retainable_8h_source"/>
        <childnode refid="6492" relation="include">
        </childnode>
      </node>
      <node id="6516">
        <label>ATen/TensorBase.h</label>
        <link refid="_tensor_base_8h_source"/>
        <childnode refid="6517" relation="include">
        </childnode>
        <childnode refid="6518" relation="include">
        </childnode>
      </node>
      <node id="6485">
        <label>string</label>
      </node>
      <node id="6550">
        <label>ATen/DimVector.h</label>
        <link refid="_dim_vector_8h_source"/>
        <childnode refid="6496" relation="include">
        </childnode>
        <childnode refid="6515" relation="include">
        </childnode>
      </node>
      <node id="6551">
        <label>ATen/OptionsGuard.h</label>
        <link refid="_options_guard_8h_source"/>
        <childnode refid="6493" relation="include">
        </childnode>
        <childnode refid="6537" relation="include">
        </childnode>
        <childnode refid="6494" relation="include">
        </childnode>
        <childnode refid="6544" relation="include">
        </childnode>
        <childnode refid="6479" relation="include">
        </childnode>
      </node>
      <node id="6553">
        <label>ATen/ExpandUtils.h</label>
        <link refid="_expand_utils_8h_source"/>
        <childnode refid="6534" relation="include">
        </childnode>
        <childnode refid="6478" relation="include">
        </childnode>
        <childnode refid="6484" relation="include">
        </childnode>
        <childnode refid="6490" relation="include">
        </childnode>
        <childnode refid="6554" relation="include">
        </childnode>
      </node>
      <node id="6475">
        <label>ATen/Allocator.h</label>
        <link refid="_allocator_8h_source"/>
        <childnode refid="6476" relation="include">
        </childnode>
        <childnode refid="6477" relation="include">
        </childnode>
        <childnode refid="6478" relation="include">
        </childnode>
        <childnode refid="6491" relation="include">
        </childnode>
        <childnode refid="6493" relation="include">
        </childnode>
        <childnode refid="6512" relation="include">
        </childnode>
      </node>
      <node id="6531">
        <label>ATen/CUDAStream.h</label>
        <link refid="_c_u_d_a_stream_8h_source"/>
      </node>
      <node id="6543">
        <label>ATen/DeviceGuard.h</label>
        <link refid="_device_guard_8h_source"/>
        <childnode refid="6493" relation="include">
        </childnode>
        <childnode refid="6478" relation="include">
        </childnode>
        <childnode refid="6494" relation="include">
        </childnode>
        <childnode refid="6534" relation="include">
        </childnode>
        <childnode refid="6525" relation="include">
        </childnode>
        <childnode refid="6487" relation="include">
        </childnode>
      </node>
      <node id="6488">
        <label>exception</label>
      </node>
      <node id="6477">
        <label>stddef.h</label>
      </node>
      <node id="6518">
        <label>ATen/UndefinedTensor.h</label>
        <link refid="_undefined_tensor_8h_source"/>
        <childnode refid="6517" relation="include">
        </childnode>
      </node>
      <node id="6549">
        <label>ATen/Dispatch.h</label>
        <link refid="_dispatch_8h_source"/>
        <childnode refid="6478" relation="include">
        </childnode>
        <childnode refid="6505" relation="include">
        </childnode>
        <childnode refid="6522" relation="include">
        </childnode>
      </node>
      <node id="6497">
        <label>AlignOf.h</label>
        <link refid="_align_of_8h_source"/>
        <childnode refid="6487" relation="include">
        </childnode>
      </node>
      <node id="6532">
        <label>ATen/Storage.h</label>
        <link refid="_storage_8h_source"/>
        <childnode refid="6513" relation="include">
        </childnode>
        <childnode refid="6533" relation="include">
        </childnode>
      </node>
      <node id="6489">
        <label>ostream</label>
      </node>
      <node id="6474">
        <label>ATen/CPUGeneral.h</label>
        <link refid="_c_p_u_general_8h_source"/>
        <childnode refid="6473" relation="include">
        </childnode>
      </node>
      <node id="6522">
        <label>ATen/Type.h</label>
      </node>
      <node id="6495">
        <label>ATen/ArrayRef.h</label>
        <link refid="_array_ref_8h_source"/>
        <childnode refid="6478" relation="include">
        </childnode>
        <childnode refid="6496" relation="include">
        </childnode>
        <childnode refid="6503" relation="include">
        </childnode>
        <childnode refid="6501" relation="include">
        </childnode>
        <childnode refid="6504" relation="include">
        </childnode>
      </node>
      <node id="6538">
        <label>ATen/TensorGeometry.h</label>
        <link refid="_tensor_geometry_8h_source"/>
        <childnode refid="6522" relation="include">
        </childnode>
        <childnode refid="6539" relation="include">
        </childnode>
      </node>
      <node id="6535">
        <label>ATen/SparseTensorRef.h</label>
        <link refid="_sparse_tensor_ref_8h_source"/>
      </node>
      <node id="6473">
        <label>ATen/ATenGeneral.h</label>
        <link refid="_a_ten_general_8h_source"/>
      </node>
      <node id="6539">
        <label>ATen/WrapDimUtils.h</label>
        <link refid="_wrap_dim_utils_8h_source"/>
        <childnode refid="6517" relation="include">
        </childnode>
        <childnode refid="6490" relation="include">
        </childnode>
      </node>
      <node id="6536">
        <label>ATen/TensorAccessor.h</label>
        <link refid="_tensor_accessor_8h_source"/>
        <childnode refid="6487" relation="include">
        </childnode>
        <childnode refid="6515" relation="include">
        </childnode>
        <childnode refid="6494" relation="include">
        </childnode>
      </node>
      <node id="6520">
        <label>typeinfo</label>
      </node>
      <node id="6527">
        <label>cstdio</label>
      </node>
      <node id="6554">
        <label>tuple</label>
      </node>
      <node id="6512">
        <label>ATen/detail/UniqueVoidPtr.h</label>
        <link refid="_unique_void_ptr_8h_source"/>
        <childnode refid="6476" relation="include">
        </childnode>
        <childnode refid="6473" relation="include">
        </childnode>
      </node>
      <node id="6504">
        <label>vector</label>
      </node>
      <node id="6548">
        <label>ATen/TensorMethods.h</label>
      </node>
      <node id="6545">
        <label>THNN/Reduction.h</label>
      </node>
      <node id="6502">
        <label>new</label>
      </node>
      <node id="6480">
        <label>utility</label>
      </node>
      <node id="6503">
        <label>array</label>
      </node>
      <node id="6490">
        <label>sstream</label>
      </node>
      <node id="6540">
        <label>ATen/Functions.h</label>
        <link refid="build_2aten_2src_2_a_ten_2_functions_8h_source"/>
        <childnode refid="6513" relation="include">
        </childnode>
        <childnode refid="6522" relation="include">
        </childnode>
        <childnode refid="6534" relation="include">
        </childnode>
        <childnode refid="6532" relation="include">
        </childnode>
        <childnode refid="6523" relation="include">
        </childnode>
        <childnode refid="6541" relation="include">
        </childnode>
        <childnode refid="6542" relation="include">
        </childnode>
        <childnode refid="6543" relation="include">
        </childnode>
        <childnode refid="6544" relation="include">
        </childnode>
        <childnode refid="6545" relation="include">
        </childnode>
      </node>
      <node id="6542">
        <label>ATen/NativeFunctions.h</label>
      </node>
      <node id="6509">
        <label>iosfwd</label>
      </node>
      <node id="6499">
        <label>cstdlib</label>
      </node>
      <node id="6511">
        <label>iostream</label>
      </node>
      <node id="6487">
        <label>cstddef</label>
      </node>
      <node id="6529">
        <label>unordered_map</label>
      </node>
      <node id="6528">
        <label>mutex</label>
      </node>
      <node id="6472">
        <label>ATen/ATen.h</label>
        <link refid="_a_ten_8h_source"/>
        <childnode refid="6473" relation="include">
        </childnode>
        <childnode refid="6474" relation="include">
        </childnode>
        <childnode refid="6475" relation="include">
        </childnode>
        <childnode refid="6513" relation="include">
        </childnode>
        <childnode refid="6522" relation="include">
        </childnode>
        <childnode refid="6523" relation="include">
        </childnode>
        <childnode refid="6524" relation="include">
        </childnode>
        <childnode refid="6532" relation="include">
        </childnode>
        <childnode refid="6534" relation="include">
        </childnode>
        <childnode refid="6493" relation="include">
        </childnode>
        <childnode refid="6538" relation="include">
        </childnode>
        <childnode refid="6540" relation="include">
        </childnode>
        <childnode refid="6546" relation="include">
        </childnode>
        <childnode refid="6547" relation="include">
        </childnode>
        <childnode refid="6548" relation="include">
        </childnode>
        <childnode refid="6549" relation="include">
        </childnode>
        <childnode refid="6550" relation="include">
        </childnode>
        <childnode refid="6543" relation="include">
        </childnode>
        <childnode refid="6544" relation="include">
        </childnode>
        <childnode refid="6537" relation="include">
        </childnode>
        <childnode refid="6551" relation="include">
        </childnode>
        <childnode refid="6552" relation="include">
        </childnode>
      </node>
      <node id="6526">
        <label>ATen/Registry.h</label>
        <link refid="_registry_8h_source"/>
        <childnode refid="6498" relation="include">
        </childnode>
        <childnode refid="6527" relation="include">
        </childnode>
        <childnode refid="6499" relation="include">
        </childnode>
        <childnode refid="6484" relation="include">
        </childnode>
        <childnode refid="6476" relation="include">
        </childnode>
        <childnode refid="6528" relation="include">
        </childnode>
        <childnode refid="6529" relation="include">
        </childnode>
        <childnode refid="6485" relation="include">
        </childnode>
        <childnode refid="6504" relation="include">
        </childnode>
        <childnode refid="6530" relation="include">
        </childnode>
        <childnode refid="6473" relation="include">
        </childnode>
      </node>
      <node id="6478">
        <label>ATen/Error.h</label>
        <link refid="_error_8h_source"/>
        <childnode refid="6473" relation="include">
        </childnode>
        <childnode refid="6479" relation="include">
        </childnode>
        <childnode refid="6487" relation="include">
        </childnode>
        <childnode refid="6488" relation="include">
        </childnode>
        <childnode refid="6489" relation="include">
        </childnode>
        <childnode refid="6490" relation="include">
        </childnode>
        <childnode refid="6485" relation="include">
        </childnode>
      </node>
      <node id="6544">
        <label>ATen/TensorOptions.h</label>
        <link refid="_tensor_options_8h_source"/>
        <childnode refid="6524" relation="include">
        </childnode>
        <childnode refid="6493" relation="include">
        </childnode>
        <childnode refid="6543" relation="include">
        </childnode>
        <childnode refid="6537" relation="include">
        </childnode>
        <childnode refid="6494" relation="include">
        </childnode>
        <childnode refid="6534" relation="include">
        </childnode>
        <childnode refid="6522" relation="include">
        </childnode>
        <childnode refid="6487" relation="include">
        </childnode>
        <childnode refid="6509" relation="include">
        </childnode>
        <childnode refid="6480" relation="include">
        </childnode>
      </node>
      <node id="6534">
        <label>ATen/Tensor.h</label>
        <link refid="build_2aten_2src_2_a_ten_2tensor_8h_source"/>
        <childnode refid="6523" relation="include">
        </childnode>
        <childnode refid="6513" relation="include">
        </childnode>
        <childnode refid="6494" relation="include">
        </childnode>
        <childnode refid="6535" relation="include">
        </childnode>
        <childnode refid="6532" relation="include">
        </childnode>
        <childnode refid="6536" relation="include">
        </childnode>
        <childnode refid="6516" relation="include">
        </childnode>
        <childnode refid="6517" relation="include">
        </childnode>
        <childnode refid="6519" relation="include">
        </childnode>
        <childnode refid="6493" relation="include">
        </childnode>
        <childnode refid="6537" relation="include">
        </childnode>
        <childnode refid="6479" relation="include">
        </childnode>
      </node>
      <node id="6481">
        <label>type_traits</label>
      </node>
      <node id="6537">
        <label>ATen/Layout.h</label>
        <link refid="_layout_8h_source"/>
        <childnode refid="6494" relation="include">
        </childnode>
        <childnode refid="6478" relation="include">
        </childnode>
        <childnode refid="6511" relation="include">
        </childnode>
      </node>
      <node id="6496">
        <label>ATen/SmallVector.h</label>
        <link refid="_small_vector_8h_source"/>
        <childnode refid="6497" relation="include">
        </childnode>
        <childnode refid="6498" relation="include">
        </childnode>
        <childnode refid="6483" relation="include">
        </childnode>
        <childnode refid="6487" relation="include">
        </childnode>
        <childnode refid="6499" relation="include">
        </childnode>
        <childnode refid="6500" relation="include">
        </childnode>
        <childnode refid="6482" relation="include">
        </childnode>
        <childnode refid="6501" relation="include">
        </childnode>
        <childnode refid="6476" relation="include">
        </childnode>
        <childnode refid="6502" relation="include">
        </childnode>
        <childnode refid="6481" relation="include">
        </childnode>
        <childnode refid="6480" relation="include">
        </childnode>
        <childnode refid="6473" relation="include">
        </childnode>
      </node>
      <node id="6498">
        <label>algorithm</label>
      </node>
      <node id="6523">
        <label>ATen/Generator.h</label>
        <link refid="_generator_8h_source"/>
        <childnode refid="6515" relation="include">
        </childnode>
      </node>
      <node id="6500">
        <label>cstring</label>
      </node>
      <node id="6476">
        <label>memory</label>
      </node>
      <node id="6482">
        <label>initializer_list</label>
      </node>
      <node id="6546">
        <label>ATen/Formatting.h</label>
        <link refid="_formatting_8h_source"/>
        <childnode refid="6511" relation="include">
        </childnode>
        <childnode refid="6522" relation="include">
        </childnode>
        <childnode refid="6513" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceat">at</innernamespace>
    <innernamespace refid="namespaceat_1_1native">at::native</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;ATen/ATen.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ATen/ExpandUtils.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ATen/NativeFunctions.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;numeric&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceat" kindref="compound">at</ref><sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">native<sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>function<sp/>for<sp/>det<sp/>methods.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>pivoted<sp/>LU<sp/>factorization<sp/>A<sp/>=<sp/>P<sp/>*<sp/>L<sp/>*<sp/>U.<sp/>Since<sp/>we<sp/>always<sp/>have<sp/>det(L)<sp/>=<sp/>1,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>det(P)<sp/>=<sp/>\pm<sp/>1,<sp/>this<sp/>method<sp/>returns<sp/>a<sp/>3-tuple:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>(det(P),<sp/>diag(U),<sp/>info),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>where<sp/>info<sp/>helps<sp/>us<sp/>identify<sp/>singular<sp/>matrices.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::tuple&lt;double,<sp/>Tensor,<sp/>int&gt;<sp/>_lu_det_P_diag_U_info(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/>Tensor<sp/>p,<sp/>lu,<sp/>info;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/>std::tie(lu,<sp/>p,<sp/>info)<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.unsqueeze(0).btrifact_with_info();</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/>p.squeeze_(0);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/>lu.squeeze_(0);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>int_info<sp/>=<sp/>info.squeeze_().toCInt();</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/>AT_CHECK(int_info<sp/>&gt;=<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;LU<sp/>factorization<sp/>(getrf)<sp/>failed<sp/>with<sp/>info<sp/>=<sp/>&quot;</highlight><highlight class="normal">,<sp/>int_info);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.size(0);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>num_exchanges<sp/>=<sp/>(at::arange(1,<sp/>n<sp/>+<sp/>1,<sp/>p.type())<sp/>!=<sp/>p).nonzero().size(0);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_exchanges<sp/>%<sp/>2<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_tuple(-1.,<sp/>lu.diag(),<sp/>int_info);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_tuple(1.,<sp/>lu.diag(),<sp/>int_info);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="30"><highlight class="normal">}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal">Tensor<sp/>det(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>AT_CHECK(at::isFloatingType(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.type().scalarType())<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.dim()<sp/>==<sp/>2<sp/>&amp;&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.size(0)<sp/>==<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.size(1),</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;det(&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.type(),<sp/></highlight><highlight class="stringliteral">&quot;{&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.sizes(),<sp/></highlight><highlight class="stringliteral">&quot;}):<sp/>expected<sp/>a<sp/>2D<sp/>square<sp/>tensor<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;of<sp/>floating<sp/>types&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>det_P;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>Tensor<sp/>diag_U;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>info;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>std::tie(det_P,<sp/>diag_U,<sp/>info)<sp/>=<sp/>_lu_det_P_diag_U_info(</highlight><highlight class="keyword">self</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>at::zeros({},<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.type());</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>diag_U.prod().mul_(det_P);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal">Tensor<sp/>logdet(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>AT_CHECK(at::isFloatingType(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.type().scalarType())<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.dim()<sp/>==<sp/>2<sp/>&amp;&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.size(0)<sp/>==<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.size(1),</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;logdet(&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.type(),<sp/></highlight><highlight class="stringliteral">&quot;{&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.sizes(),<sp/></highlight><highlight class="stringliteral">&quot;}):<sp/>expected<sp/>a<sp/>2D<sp/>square<sp/>tensor<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;of<sp/>floating<sp/>types&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>det_P;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>Tensor<sp/>diag_U,<sp/>det;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>info;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>std::tie(det_P,<sp/>diag_U,<sp/>info)<sp/>=<sp/>_lu_det_P_diag_U_info(</highlight><highlight class="keyword">self</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>det<sp/>=<sp/>at::zeros({},<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.type());</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>det<sp/>=<sp/>diag_U.prod().mul_(det_P);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(det.sign().toCDouble()<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>det.log_();<sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>order<sp/>to<sp/>get<sp/>proper<sp/>-inf<sp/>(det=0)<sp/>or<sp/>nan<sp/>(det&lt;0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>diag_U.abs().log().sum();</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal">std::tuple&lt;Tensor,<sp/>Tensor&gt;<sp/>slogdet(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>AT_CHECK(at::isFloatingType(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.type().scalarType())<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.dim()<sp/>==<sp/>2<sp/>&amp;&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.size(0)<sp/>==<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.size(1),</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;slogdet(&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.type(),<sp/></highlight><highlight class="stringliteral">&quot;{&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.sizes(),<sp/></highlight><highlight class="stringliteral">&quot;}):<sp/>expected<sp/>a<sp/>2D<sp/>square<sp/>tensor<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;of<sp/>floating<sp/>types&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>det_P;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>Tensor<sp/>diag_U,<sp/>det;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>info;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>std::tie(det_P,<sp/>diag_U,<sp/>info)<sp/>=<sp/>_lu_det_P_diag_U_info(</highlight><highlight class="keyword">self</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>det<sp/>=<sp/>at::zeros({},<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.type());</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>det<sp/>=<sp/>diag_U.prod().mul_(det_P);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_tuple(det.sign(),<sp/>diag_U.abs_().log_().sum());</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal">Tensor<sp/>inverse(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>Tensor<sp/>result<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.type().tensor();</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>at::native::inverse_out(result,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="89"><highlight class="normal">}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal">Tensor&amp;<sp/>inverse_out(Tensor<sp/>&amp;result,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor<sp/>&amp;</highlight><highlight class="keyword">self</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>AT_CHECK(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.type().backend()<sp/>==<sp/>kCPU<sp/>||<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.type().backend()<sp/>==<sp/>kCUDA,</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;tensor<sp/>should<sp/>have<sp/>CPU<sp/>or<sp/>CUDA<sp/>backend&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>AT_CHECK(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.dim()<sp/>==<sp/>2,<sp/></highlight><highlight class="stringliteral">&quot;tensor<sp/>should<sp/>be<sp/>2<sp/>dimensional&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>AT_CHECK(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.size(0)<sp/>==<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.size(1),<sp/></highlight><highlight class="stringliteral">&quot;tensor<sp/>should<sp/>be<sp/>square&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>AT_CHECK(at::isFloatingType(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.type().scalarType()),<sp/></highlight><highlight class="stringliteral">&quot;tensor<sp/>should<sp/>be<sp/>of<sp/>floating-point<sp/>type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.size(0)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result.resize_({0,<sp/>0});</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>at::_getri_out(result,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal">Tensor<sp/>pinverse(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rcond)<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>AT_CHECK(at::isFloatingType(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.type().scalarType())<sp/>&amp;&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.dim()<sp/>==<sp/>2,</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;pinverse(&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.type(),<sp/></highlight><highlight class="stringliteral">&quot;{&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.sizes(),<sp/></highlight><highlight class="stringliteral">&quot;}):<sp/>expected<sp/>a<sp/>2D<sp/>tensor<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;of<sp/>floating<sp/>types&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>AT_CHECK(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.dim()<sp/>==<sp/>2,<sp/></highlight><highlight class="stringliteral">&quot;tensor<sp/>should<sp/>be<sp/>2<sp/>dimensional&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.numel()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Match<sp/>NumPy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.type().tensor({</highlight><highlight class="keyword">self</highlight><highlight class="normal">.size(1),<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.size(0)});</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>Tensor<sp/>U,<sp/>S,<sp/>V;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>std::tie(U,<sp/>S,<sp/>V)<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.svd();</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max_val<sp/>=<sp/>S[0].toCDouble();</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>Tensor<sp/>S_pseudoinv<sp/>=<sp/>at::where(S<sp/>&gt;<sp/>rcond<sp/>*<sp/>max_val,<sp/>S.reciprocal(),<sp/>at::zeros({},<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.options()));</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>V.mm(S_pseudoinv.diag().mm(U.t()));</highlight></codeline>
<codeline lineno="118"><highlight class="normal">}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>check_1d(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/>t,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>arg,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>fn)<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/>AT_CHECK(t.dim()<sp/>==<sp/>1,<sp/>fn,<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>Expected<sp/>1-D<sp/>argument<sp/>&quot;</highlight><highlight class="normal">,<sp/>arg,<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>but<sp/>got<sp/>&quot;</highlight><highlight class="normal">,<sp/>t.dim(),<sp/></highlight><highlight class="stringliteral">&quot;-D&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal">Tensor<sp/>ger(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/>vec2)<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>check_1d(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;self&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ger&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>check_1d(vec2,<sp/></highlight><highlight class="stringliteral">&quot;vec2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ger&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>at::_ger(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>vec2);</highlight></codeline>
<codeline lineno="128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal">Tensor&amp;<sp/>ger_out(Tensor&amp;<sp/>result,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/>vec2)<sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>check_1d(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;self&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ger&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>check_1d(vec2,<sp/></highlight><highlight class="stringliteral">&quot;vec2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ger&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>at::_ger_out(result,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>vec2);</highlight></codeline>
<codeline lineno="134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal">Tensor<sp/>mm(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/>mat2)<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.is_sparse())<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mat2.type().addmm(at::zeros({},<sp/>mat2.type()),<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>mat2,<sp/>0,<sp/>1);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.type()._mm(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>mat2);</highlight></codeline>
<codeline lineno="141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal">Tensor&amp;<sp/>mm_out(Tensor&amp;<sp/>result,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/>mat2)<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.is_sparse())<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mat2.type().addmm_out(result,<sp/>at::zeros({},<sp/>mat2.type()),<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>mat2,<sp/>0,<sp/>1);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.type()._mm_out(result,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>mat2);</highlight></codeline>
<codeline lineno="148"><highlight class="normal">}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal">Tensor<sp/>mv(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/>vec)<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>check_1d(vec,<sp/></highlight><highlight class="stringliteral">&quot;vec&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;mv&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>at::_mv(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>vec);</highlight></codeline>
<codeline lineno="153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal">Tensor&amp;<sp/>mv_out(Tensor&amp;<sp/>result,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/>vec)<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>check_1d(vec,<sp/></highlight><highlight class="stringliteral">&quot;vec&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;mv&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>at::_mv_out(result,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>vec);</highlight></codeline>
<codeline lineno="158"><highlight class="normal">}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal">Tensor<sp/>addmv(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/>mat,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/>vec,<sp/>Scalar<sp/>beta,<sp/>Scalar<sp/>alpha)<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>check_1d(vec,<sp/></highlight><highlight class="stringliteral">&quot;vec&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;addmv&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>at::_addmv(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>mat,<sp/>vec,<sp/>beta,<sp/>alpha);</highlight></codeline>
<codeline lineno="163"><highlight class="normal">}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal">Tensor&amp;<sp/>addmv_(Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/>mat,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/>vec,<sp/>Scalar<sp/>beta,<sp/>Scalar<sp/>alpha)<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>check_1d(vec,<sp/></highlight><highlight class="stringliteral">&quot;vec&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;addmv&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">._addmv_(mat,<sp/>vec,<sp/>beta,<sp/>alpha);</highlight></codeline>
<codeline lineno="168"><highlight class="normal">}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal">Tensor&amp;<sp/>addmv_out(Tensor<sp/>&amp;result,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/>mat,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/>vec,<sp/>Scalar<sp/>beta,<sp/>Scalar<sp/>alpha)<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>check_1d(vec,<sp/></highlight><highlight class="stringliteral">&quot;vec&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;addmv&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>at::_addmv_out(result,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>mat,<sp/>vec,<sp/>beta,<sp/>alpha);</highlight></codeline>
<codeline lineno="173"><highlight class="normal">}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal">Tensor<sp/>addr(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/>vec1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/>vec2,<sp/>Scalar<sp/>beta,<sp/>Scalar<sp/>alpha)<sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>check_1d(vec1,<sp/></highlight><highlight class="stringliteral">&quot;vec1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;addr&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>check_1d(vec2,<sp/></highlight><highlight class="stringliteral">&quot;vec2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;addr&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>at::_addr(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>vec1,<sp/>vec2,<sp/>beta,<sp/>alpha);</highlight></codeline>
<codeline lineno="179"><highlight class="normal">}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal">Tensor&amp;<sp/>addr_(Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/>vec1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/>vec2,<sp/>Scalar<sp/>beta,<sp/>Scalar<sp/>alpha)<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>check_1d(vec1,<sp/></highlight><highlight class="stringliteral">&quot;vec1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;addr&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>check_1d(vec2,<sp/></highlight><highlight class="stringliteral">&quot;vec2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;addr&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">._addr_(vec1,<sp/>vec2,<sp/>beta,<sp/>alpha);</highlight></codeline>
<codeline lineno="185"><highlight class="normal">}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal">Tensor&amp;<sp/>addr_out(Tensor<sp/>&amp;result,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/>vec1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/>vec2,<sp/>Scalar<sp/>beta,<sp/>Scalar<sp/>alpha)<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>check_1d(vec1,<sp/></highlight><highlight class="stringliteral">&quot;vec1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;addr&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>check_1d(vec2,<sp/></highlight><highlight class="stringliteral">&quot;vec2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;addr&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>at::_addr_out(result,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>vec1,<sp/>vec2,<sp/>beta,<sp/>alpha);</highlight></codeline>
<codeline lineno="191"><highlight class="normal">}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal">Tensor<sp/>dot(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/>tensor)<sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>check_1d(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;self&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;dot&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>check_1d(tensor,<sp/></highlight><highlight class="stringliteral">&quot;tensor&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;dot&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">._dot(tensor);</highlight></codeline>
<codeline lineno="197"><highlight class="normal">}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal">Tensor&amp;<sp/>dot_out(Tensor&amp;<sp/>result,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/>tensor)<sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>result.resize_({});</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>dispatching<sp/>through<sp/>type<sp/>ensures<sp/>we<sp/>don&apos;t<sp/>allow<sp/>mismatched<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.type().fill_(result,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.dot(tensor));</highlight></codeline>
<codeline lineno="203"><highlight class="normal">}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="206"><highlight class="comment">Matrix<sp/>product<sp/>of<sp/>two<sp/>Tensors.</highlight></codeline>
<codeline lineno="207"><highlight class="comment">The<sp/>behavior<sp/>depends<sp/>on<sp/>the<sp/>dimensionality<sp/>of<sp/>the<sp/>Tensors<sp/>as<sp/>follows:</highlight></codeline>
<codeline lineno="208"><highlight class="comment">-<sp/>If<sp/>both<sp/>Tensors<sp/>are<sp/>1-dimensional,<sp/>the<sp/>dot<sp/>product<sp/>(scalar)<sp/>is<sp/>returned.</highlight></codeline>
<codeline lineno="209"><highlight class="comment">-<sp/>If<sp/>both<sp/>arguments<sp/>are<sp/>2-dimensional,<sp/>the<sp/>matrix-matrix<sp/>product<sp/>is<sp/>returned.</highlight></codeline>
<codeline lineno="210"><highlight class="comment">-<sp/>If<sp/>the<sp/>first<sp/>argument<sp/>is<sp/>1-dimensional<sp/>and<sp/>the<sp/>second<sp/>argument<sp/>is<sp/>2-dimensional,</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/><sp/>a<sp/>1<sp/>is<sp/>prepended<sp/>to<sp/>its<sp/>dimension<sp/>for<sp/>the<sp/>purpose<sp/>of<sp/>the<sp/>matrix<sp/>multiply.</highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/><sp/>After<sp/>the<sp/>matrix<sp/>multiply,<sp/>the<sp/>prepended<sp/>dimension<sp/>is<sp/>removed.</highlight></codeline>
<codeline lineno="213"><highlight class="comment">-<sp/>If<sp/>the<sp/>first<sp/>argument<sp/>is<sp/>2-dimensional<sp/>and<sp/>the<sp/>second<sp/>argument<sp/>is<sp/>1-dimensional,</highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/><sp/>the<sp/>matrix-vector<sp/>product<sp/>is<sp/>returned.</highlight></codeline>
<codeline lineno="215"><highlight class="comment">-<sp/>If<sp/>both<sp/>arguments<sp/>are<sp/>at<sp/>least<sp/>1-dimensional<sp/>and<sp/>at<sp/>least<sp/>one<sp/>argument<sp/>is</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/><sp/>N-dimensional<sp/>(where<sp/>N<sp/>&gt;<sp/>2),<sp/>then<sp/>a<sp/>batched<sp/>matrix<sp/>multiply<sp/>is<sp/>returned.<sp/><sp/>If<sp/>the<sp/>first</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/><sp/>argument<sp/>is<sp/>1-dimensional,<sp/>a<sp/>1<sp/>is<sp/>prepended<sp/>to<sp/>its<sp/>dimension<sp/>for<sp/>the<sp/>purpose<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/><sp/>batched<sp/>matrix<sp/>multiply<sp/>and<sp/>removed<sp/>after.<sp/><sp/>If<sp/>the<sp/>second<sp/>argument<sp/>is<sp/>1-dimensional,<sp/>a</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/><sp/>1<sp/>is<sp/>appended<sp/>to<sp/>its<sp/>dimension<sp/>for<sp/>the<sp/>purpose<sp/>of<sp/>the<sp/>batched<sp/>matrix<sp/>multiple<sp/>and<sp/>removed<sp/>after.</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/><sp/>The<sp/>non-matrix<sp/>(i.e.<sp/>batch)<sp/>dimensions<sp/>are<sp/>broadcasted<sp/>(and<sp/>thus</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/><sp/>must<sp/>be<sp/>broadcastable).<sp/><sp/>For<sp/>example,<sp/>if<sp/>tensor1<sp/>is<sp/>a<sp/>(j<sp/>x<sp/>1<sp/>x<sp/>n<sp/>x<sp/>m)<sp/>Tensor</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/><sp/>and<sp/>tensor2<sp/>is<sp/>a<sp/>(k<sp/>x<sp/>m<sp/>x<sp/>p)<sp/>Tensor,<sp/>the<sp/>returned<sp/>tensor<sp/>will<sp/>be<sp/>an<sp/>(j<sp/>x<sp/>k<sp/>x<sp/>n<sp/>x<sp/>p)<sp/>Tensor.</highlight></codeline>
<codeline lineno="223"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal">Tensor<sp/>matmul(<ref refid="classat_1_1optional" kindref="compound">at::optional&lt;Tensor&gt;</ref><sp/>out_opt,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/>tensor1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/>tensor2)<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dim_tensor1<sp/>=<sp/>tensor1.dim();</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dim_tensor2<sp/>=<sp/>tensor2.dim();</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>has_out<sp/>=<sp/>out_opt.has_value();</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>Tensor<sp/>out<sp/>=<sp/>out_opt.value_or(Tensor());</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dim_tensor1<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>dim_tensor2<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>has_out<sp/>?<sp/>at::native::dot_out(out,<sp/>tensor1,<sp/>tensor2)<sp/>:<sp/>tensor1.dot(tensor2);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dim_tensor1<sp/>==<sp/>2<sp/>&amp;&amp;<sp/>dim_tensor2<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>has_out<sp/>?<sp/>at::native::mv_out(out,<sp/>tensor1,<sp/>tensor2)<sp/>:<sp/>tensor1.mv(tensor2);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dim_tensor1<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>dim_tensor2<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>has_out<sp/>?<sp/>at::native::mm_out(out,<sp/>tensor1.unsqueeze(0),<sp/>tensor2).squeeze_(0)</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>tensor1.unsqueeze(0).mm(tensor2).squeeze_(0);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dim_tensor1<sp/>==<sp/>2<sp/>&amp;&amp;<sp/>dim_tensor2<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>has_out<sp/>?<sp/>at::native::mm_out(out,<sp/>tensor1,<sp/>tensor2)<sp/>:<sp/>tensor1.mm(tensor2);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dim_tensor1<sp/>&gt;=<sp/>3<sp/>&amp;&amp;<sp/>(dim_tensor2<sp/>==<sp/>1<sp/>||<sp/>dim_tensor2<sp/>==<sp/>2))<sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>optimization:<sp/>use<sp/>mm<sp/>instead<sp/>of<sp/>bmm<sp/>by<sp/>folding<sp/>tensor1&apos;s<sp/>batch<sp/>into</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>its<sp/>leading<sp/>matrix<sp/>dimension.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>Tensor<sp/>t2<sp/>=<sp/>dim_tensor2<sp/>==<sp/>1<sp/>?<sp/>tensor2.unsqueeze(-1)<sp/>:<sp/>tensor2;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>size1<sp/>=<sp/>tensor1.sizes();</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>size2<sp/>=<sp/>t2.sizes();</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int64_t&gt;<sp/>output_size;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>output_size.insert(output_size.end(),<sp/>size1.begin(),<sp/>size1.end()<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dim_tensor2<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>output_size.push_back(size2[dim_tensor2<sp/>-<sp/>1]);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fold<sp/>the<sp/>batch<sp/>into<sp/>the<sp/>first<sp/>dimension</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>Tensor<sp/>t1<sp/>=<sp/>tensor1.contiguous().view({-1,<sp/>size1[size1.size()<sp/>-<sp/>1]});</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>Tensor<sp/>output<sp/>=<sp/>has_out<sp/>?<sp/>at::_unsafe_view(at::mm_out(out,<sp/>t1,<sp/>t2),<sp/>output_size)</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="namespaceat" kindref="compound">at</ref>::_unsafe_view(t1.mm(t2),<sp/>output_size);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>has_out<sp/>?<sp/>out.set_(output)<sp/>:<sp/>output;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((dim_tensor1<sp/>&gt;=<sp/>1<sp/>&amp;&amp;<sp/>dim_tensor2<sp/>&gt;=<sp/>1)<sp/>&amp;&amp;<sp/>(dim_tensor1<sp/>&gt;=<sp/>3<sp/>||<sp/>dim_tensor2<sp/>&gt;=<sp/>3))<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>are<sp/>multiplying<sp/>b1<sp/>x<sp/>n<sp/>x<sp/>m1<sp/>by<sp/>x2<sp/>x<sp/>m2<sp/>x<sp/>p<sp/>(where<sp/>b1<sp/>can<sp/>be<sp/>a<sp/>list);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>track<sp/>m1<sp/>vs<sp/>m2<sp/>separately<sp/>even<sp/>though<sp/>they<sp/>must<sp/>match<sp/>for<sp/>nicer<sp/>error<sp/>messages</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>n<sp/>=<sp/>dim_tensor1<sp/>&gt;<sp/>1<sp/>?<sp/>tensor1.size(-2)<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>m1<sp/>=<sp/>tensor1.size(-1);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>IntList<sp/>batch_tensor1(tensor1.sizes().data(),<sp/>std::max&lt;int64_t&gt;(dim_tensor1<sp/>-<sp/>2,<sp/>0));</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>m2<sp/>=<sp/>dim_tensor2<sp/>&gt;<sp/>1<sp/>?<sp/>tensor2.size(-2)<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>p<sp/>=<sp/>tensor2.size(-1);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>IntList<sp/>batch_tensor2(tensor2.sizes().data(),<sp/>std::max&lt;int64_t&gt;(dim_tensor2<sp/>-<sp/>2,<sp/>0));</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>expand<sp/>the<sp/>batch<sp/>portion<sp/>(i.e.<sp/>cut<sp/>off<sp/>matrix<sp/>dimensions<sp/>and<sp/>expand<sp/>rest)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int64_t&gt;<sp/>expand_batch_portion<sp/>=<sp/>infer_size(batch_tensor1,<sp/>batch_tensor2);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int64_t&gt;<sp/>tensor1_expand_size(expand_batch_portion);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>tensor1_expand_size.insert(tensor1_expand_size.end(),<sp/>{n,<sp/>m1});</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int64_t&gt;<sp/>tensor2_expand_size(expand_batch_portion);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>tensor2_expand_size.insert(tensor2_expand_size.end(),<sp/>{m2,<sp/>p});</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expand_batch_product<sp/>=<sp/>std::accumulate(expand_batch_portion.begin(),<sp/>expand_batch_portion.end(),</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1,<sp/>std::multiplies&lt;int64_t&gt;());</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int64_t&gt;<sp/>tensor1_bmm_view({expand_batch_product});</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>tensor1_bmm_view.insert(tensor1_bmm_view.end(),<sp/>{n,<sp/>m1});</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int64_t&gt;<sp/>tensor2_bmm_view({expand_batch_product});</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>tensor2_bmm_view.insert(tensor2_bmm_view.end(),<sp/>{m2,<sp/>p});</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>flatten<sp/>expanded<sp/>batches</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>Tensor<sp/>tensor1_expanded<sp/>=<sp/>tensor1.expand(tensor1_expand_size).contiguous().view(tensor1_bmm_view);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>Tensor<sp/>tensor2_expanded<sp/>=<sp/>tensor2.expand(tensor2_expand_size).contiguous().view(tensor2_bmm_view);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reshape<sp/>batches<sp/>back<sp/>into<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int64_t&gt;<sp/>output_shape(expand_batch_portion);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dim_tensor1<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>output_shape.push_back(n);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dim_tensor2<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>output_shape.push_back(p);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>Tensor<sp/>output<sp/>=<sp/>has_out<sp/>?<sp/>at::_unsafe_view(at::bmm_out(out,<sp/>tensor1_expanded,<sp/>tensor2_expanded),<sp/>output_shape)</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="namespaceat" kindref="compound">at</ref>::_unsafe_view(tensor1_expanded.bmm(tensor2_expanded),<sp/>output_shape);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>has_out<sp/>?<sp/>out.set_(output)<sp/>:<sp/>output;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/>AT_ERROR(</highlight><highlight class="stringliteral">&quot;both<sp/>arguments<sp/>to<sp/>matmul<sp/>need<sp/>to<sp/>be<sp/>at<sp/>least<sp/>1D,<sp/>but<sp/>they<sp/>are<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dim_tensor1,<sp/></highlight><highlight class="stringliteral">&quot;D<sp/>and<sp/>&quot;</highlight><highlight class="normal">,<sp/>dim_tensor2,<sp/></highlight><highlight class="stringliteral">&quot;D&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal">}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal">Tensor<sp/>matmul(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor<sp/>&amp;<sp/>tensor1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor<sp/>&amp;<sp/>tensor2)<sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>at::native::matmul(at::nullopt,<sp/>tensor1,<sp/>tensor2);</highlight></codeline>
<codeline lineno="311"><highlight class="normal">}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal">Tensor&amp;<sp/>matmul_out(Tensor<sp/>&amp;result,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor<sp/>&amp;<sp/>tensor1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor<sp/>&amp;<sp/>tensor2)<sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/>at::native::matmul(<ref refid="classat_1_1optional" kindref="compound">at::optional&lt;Tensor&gt;</ref>(result),<sp/>tensor1,<sp/>tensor2);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="316"><highlight class="normal">}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal">}</highlight></codeline>
<codeline lineno="319"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/LinearAlgebra.cpp"/>
  </compounddef>
</doxygen>
