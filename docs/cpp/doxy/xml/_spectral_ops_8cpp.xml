<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="_spectral_ops_8cpp" kind="file" language="C++">
    <compoundname>SpectralOps.cpp</compoundname>
    <includes refid="_a_ten_8h" local="yes">ATen/ATen.h</includes>
    <includes refid="_config_8h" local="yes">ATen/Config.h</includes>
    <includes local="yes">ATen/NativeFunctions.h</includes>
    <includes refid="_c_u_d_a_hooks_interface_8h" local="yes">ATen/detail/CUDAHooksInterface.h</includes>
    <includes refid="_spectral_ops_utils_8h" local="yes">ATen/native/SpectralOpsUtils.h</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">vector</includes>
    <includes local="no">cmath</includes>
    <incdepgraph>
      <node id="6898">
        <label>ATen/optional.h</label>
        <link refid="optional_8h_source"/>
        <childnode refid="6899" relation="include">
        </childnode>
        <childnode refid="6900" relation="include">
        </childnode>
        <childnode refid="6901" relation="include">
        </childnode>
        <childnode refid="6902" relation="include">
        </childnode>
        <childnode refid="6903" relation="include">
        </childnode>
        <childnode refid="6904" relation="include">
        </childnode>
        <childnode refid="6905" relation="include">
        </childnode>
      </node>
      <node id="6944">
        <label>ATen/detail/CUDAHooksInterface.h</label>
        <link refid="_c_u_d_a_hooks_interface_8h_source"/>
        <childnode refid="6894" relation="include">
        </childnode>
        <childnode refid="6897" relation="include">
        </childnode>
        <childnode refid="6942" relation="include">
        </childnode>
        <childnode refid="6945" relation="include">
        </childnode>
        <childnode refid="6906" relation="include">
        </childnode>
        <childnode refid="6903" relation="include">
        </childnode>
        <childnode refid="6895" relation="include">
        </childnode>
      </node>
      <node id="6912">
        <label>ATen/Device.h</label>
        <link refid="_device_8h_source"/>
        <childnode refid="6897" relation="include">
        </childnode>
        <childnode refid="6913" relation="include">
        </childnode>
        <childnode refid="6906" relation="include">
        </childnode>
        <childnode refid="6928" relation="include">
        </childnode>
        <childnode refid="6904" relation="include">
        </childnode>
        <childnode refid="6903" relation="include">
        </childnode>
      </node>
      <node id="6911">
        <label>atomic</label>
      </node>
      <node id="6903">
        <label>functional</label>
      </node>
      <node id="6949">
        <label>ATen/Backtrace.h</label>
        <link refid="_backtrace_8h_source"/>
        <childnode refid="6906" relation="include">
        </childnode>
        <childnode refid="6904" relation="include">
        </childnode>
        <childnode refid="6939" relation="include">
        </childnode>
        <childnode refid="6892" relation="include">
        </childnode>
      </node>
      <node id="6913">
        <label>ATen/ScalarType.h</label>
        <link refid="_scalar_type_8h_source"/>
        <childnode refid="6914" relation="include">
        </childnode>
        <childnode refid="6892" relation="include">
        </childnode>
        <childnode refid="6924" relation="include">
        </childnode>
        <childnode refid="6926" relation="include">
        </childnode>
        <childnode refid="6930" relation="include">
        </childnode>
      </node>
      <node id="6925">
        <label>limits</label>
      </node>
      <node id="6933">
        <label>assert.h</label>
      </node>
      <node id="6938">
        <label>ATen/Utils.h</label>
        <link refid="aten_2src_2_a_ten_2utils_8h_source"/>
        <childnode refid="6892" relation="include">
        </childnode>
        <childnode refid="6914" relation="include">
        </childnode>
        <childnode refid="6897" relation="include">
        </childnode>
        <childnode refid="6937" relation="include">
        </childnode>
        <childnode refid="6917" relation="include">
        </childnode>
        <childnode refid="6909" relation="include">
        </childnode>
        <childnode refid="6939" relation="include">
        </childnode>
        <childnode refid="6940" relation="include">
        </childnode>
      </node>
      <node id="6920">
        <label>iterator</label>
      </node>
      <node id="6932">
        <label>ATen/Scalar.h</label>
        <link refid="_scalar_8h_source"/>
        <childnode refid="6933" relation="include">
        </childnode>
        <childnode refid="6934" relation="include">
        </childnode>
        <childnode refid="6905" relation="include">
        </childnode>
        <childnode refid="6904" relation="include">
        </childnode>
        <childnode refid="6899" relation="include">
        </childnode>
        <childnode refid="6892" relation="include">
        </childnode>
        <childnode refid="6924" relation="include">
        </childnode>
        <childnode refid="6913" relation="include">
        </childnode>
        <childnode refid="6935" relation="include">
        </childnode>
        <childnode refid="6938" relation="include">
        </childnode>
      </node>
      <node id="6952">
        <label>TH/THStorageFunctions.hpp</label>
      </node>
      <node id="6973">
        <label>ATen/native/SpectralOpsUtils.h</label>
        <link refid="_spectral_ops_utils_8h_source"/>
        <childnode refid="6904" relation="include">
        </childnode>
        <childnode refid="6905" relation="include">
        </childnode>
        <childnode refid="6909" relation="include">
        </childnode>
      </node>
      <node id="6926">
        <label>cstdint</label>
      </node>
      <node id="6960">
        <label>ATen/Deprecated.h</label>
        <link refid="_deprecated_8h_source"/>
      </node>
      <node id="6934">
        <label>stdint.h</label>
      </node>
      <node id="6971">
        <label>ATen/CUDAGuard.h</label>
        <link refid="_c_u_d_a_guard_8h_source"/>
      </node>
      <node id="6927">
        <label>cmath</label>
      </node>
      <node id="6902">
        <label>cassert</label>
      </node>
      <node id="6943">
        <label>ATen/Context.h</label>
        <link refid="_context_8h_source"/>
        <childnode refid="6892" relation="include">
        </childnode>
        <childnode refid="6893" relation="include">
        </childnode>
        <childnode refid="6942" relation="include">
        </childnode>
        <childnode refid="6941" relation="include">
        </childnode>
        <childnode refid="6938" relation="include">
        </childnode>
        <childnode refid="6897" relation="include">
        </childnode>
        <childnode refid="6944" relation="include">
        </childnode>
        <childnode refid="6950" relation="include">
        </childnode>
        <childnode refid="6895" relation="include">
        </childnode>
        <childnode refid="6947" relation="include">
        </childnode>
        <childnode refid="6926" relation="include">
        </childnode>
      </node>
      <node id="6929">
        <label>Half-inl.h</label>
        <link refid="_half-inl_8h_source"/>
        <childnode refid="6892" relation="include">
        </childnode>
        <childnode refid="6919" relation="include">
        </childnode>
        <childnode refid="6925" relation="include">
        </childnode>
      </node>
      <node id="6905">
        <label>stdexcept</label>
      </node>
      <node id="6966">
        <label>ATen/TensorOperators.h</label>
        <link refid="_tensor_operators_8h_source"/>
        <childnode refid="6932" relation="include">
        </childnode>
        <childnode refid="6953" relation="include">
        </childnode>
        <childnode refid="6941" relation="include">
        </childnode>
        <childnode refid="6904" relation="include">
        </childnode>
        <childnode refid="6905" relation="include">
        </childnode>
      </node>
      <node id="6940">
        <label>numeric</label>
      </node>
      <node id="6936">
        <label>ATen/TensorImpl.h</label>
        <link refid="_tensor_impl_8h_source"/>
        <childnode refid="6911" relation="include">
        </childnode>
        <childnode refid="6895" relation="include">
        </childnode>
        <childnode refid="6910" relation="include">
        </childnode>
        <childnode refid="6913" relation="include">
        </childnode>
        <childnode refid="6898" relation="include">
        </childnode>
      </node>
      <node id="6924">
        <label>ATen/Half.h</label>
        <link refid="_half_8h_source"/>
        <childnode refid="6892" relation="include">
        </childnode>
        <childnode refid="6925" relation="include">
        </childnode>
        <childnode refid="6904" relation="include">
        </childnode>
        <childnode refid="6926" relation="include">
        </childnode>
        <childnode refid="6905" relation="include">
        </childnode>
        <childnode refid="6899" relation="include">
        </childnode>
        <childnode refid="6927" relation="include">
        </childnode>
        <childnode refid="6928" relation="include">
        </childnode>
        <childnode refid="6929" relation="include">
        </childnode>
      </node>
      <node id="6910">
        <label>ATen/Retainable.h</label>
        <link refid="_retainable_8h_source"/>
        <childnode refid="6911" relation="include">
        </childnode>
      </node>
      <node id="6935">
        <label>ATen/TensorBase.h</label>
        <link refid="_tensor_base_8h_source"/>
        <childnode refid="6936" relation="include">
        </childnode>
        <childnode refid="6937" relation="include">
        </childnode>
      </node>
      <node id="6904">
        <label>string</label>
      </node>
      <node id="6969">
        <label>ATen/DimVector.h</label>
        <link refid="_dim_vector_8h_source"/>
        <childnode refid="6915" relation="include">
        </childnode>
        <childnode refid="6934" relation="include">
        </childnode>
      </node>
      <node id="6970">
        <label>ATen/OptionsGuard.h</label>
        <link refid="_options_guard_8h_source"/>
        <childnode refid="6912" relation="include">
        </childnode>
        <childnode refid="6956" relation="include">
        </childnode>
        <childnode refid="6913" relation="include">
        </childnode>
        <childnode refid="6963" relation="include">
        </childnode>
        <childnode refid="6898" relation="include">
        </childnode>
      </node>
      <node id="6972">
        <label>ATen/Config.h</label>
        <link refid="_config_8h_source"/>
      </node>
      <node id="6894">
        <label>ATen/Allocator.h</label>
        <link refid="_allocator_8h_source"/>
        <childnode refid="6895" relation="include">
        </childnode>
        <childnode refid="6896" relation="include">
        </childnode>
        <childnode refid="6897" relation="include">
        </childnode>
        <childnode refid="6910" relation="include">
        </childnode>
        <childnode refid="6912" relation="include">
        </childnode>
        <childnode refid="6931" relation="include">
        </childnode>
      </node>
      <node id="6950">
        <label>ATen/CUDAStream.h</label>
        <link refid="_c_u_d_a_stream_8h_source"/>
      </node>
      <node id="6962">
        <label>ATen/DeviceGuard.h</label>
        <link refid="_device_guard_8h_source"/>
        <childnode refid="6912" relation="include">
        </childnode>
        <childnode refid="6897" relation="include">
        </childnode>
        <childnode refid="6913" relation="include">
        </childnode>
        <childnode refid="6953" relation="include">
        </childnode>
        <childnode refid="6944" relation="include">
        </childnode>
        <childnode refid="6906" relation="include">
        </childnode>
      </node>
      <node id="6907">
        <label>exception</label>
      </node>
      <node id="6896">
        <label>stddef.h</label>
      </node>
      <node id="6937">
        <label>ATen/UndefinedTensor.h</label>
        <link refid="_undefined_tensor_8h_source"/>
        <childnode refid="6936" relation="include">
        </childnode>
      </node>
      <node id="6968">
        <label>ATen/Dispatch.h</label>
        <link refid="_dispatch_8h_source"/>
        <childnode refid="6897" relation="include">
        </childnode>
        <childnode refid="6924" relation="include">
        </childnode>
        <childnode refid="6941" relation="include">
        </childnode>
      </node>
      <node id="6916">
        <label>AlignOf.h</label>
        <link refid="_align_of_8h_source"/>
        <childnode refid="6906" relation="include">
        </childnode>
      </node>
      <node id="6951">
        <label>ATen/Storage.h</label>
        <link refid="_storage_8h_source"/>
        <childnode refid="6932" relation="include">
        </childnode>
        <childnode refid="6952" relation="include">
        </childnode>
      </node>
      <node id="6908">
        <label>ostream</label>
      </node>
      <node id="6893">
        <label>ATen/CPUGeneral.h</label>
        <link refid="_c_p_u_general_8h_source"/>
        <childnode refid="6892" relation="include">
        </childnode>
      </node>
      <node id="6941">
        <label>ATen/Type.h</label>
      </node>
      <node id="6914">
        <label>ATen/ArrayRef.h</label>
        <link refid="_array_ref_8h_source"/>
        <childnode refid="6897" relation="include">
        </childnode>
        <childnode refid="6915" relation="include">
        </childnode>
        <childnode refid="6922" relation="include">
        </childnode>
        <childnode refid="6920" relation="include">
        </childnode>
        <childnode refid="6923" relation="include">
        </childnode>
      </node>
      <node id="6957">
        <label>ATen/TensorGeometry.h</label>
        <link refid="_tensor_geometry_8h_source"/>
        <childnode refid="6941" relation="include">
        </childnode>
        <childnode refid="6958" relation="include">
        </childnode>
      </node>
      <node id="6954">
        <label>ATen/SparseTensorRef.h</label>
        <link refid="_sparse_tensor_ref_8h_source"/>
      </node>
      <node id="6892">
        <label>ATen/ATenGeneral.h</label>
        <link refid="_a_ten_general_8h_source"/>
      </node>
      <node id="6958">
        <label>ATen/WrapDimUtils.h</label>
        <link refid="_wrap_dim_utils_8h_source"/>
        <childnode refid="6936" relation="include">
        </childnode>
        <childnode refid="6909" relation="include">
        </childnode>
      </node>
      <node id="6890">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/SpectralOps.cpp</label>
        <link refid="_spectral_ops_8cpp"/>
        <childnode refid="6891" relation="include">
        </childnode>
        <childnode refid="6972" relation="include">
        </childnode>
        <childnode refid="6961" relation="include">
        </childnode>
        <childnode refid="6944" relation="include">
        </childnode>
        <childnode refid="6973" relation="include">
        </childnode>
        <childnode refid="6917" relation="include">
        </childnode>
        <childnode refid="6923" relation="include">
        </childnode>
        <childnode refid="6927" relation="include">
        </childnode>
      </node>
      <node id="6955">
        <label>ATen/TensorAccessor.h</label>
        <link refid="_tensor_accessor_8h_source"/>
        <childnode refid="6906" relation="include">
        </childnode>
        <childnode refid="6934" relation="include">
        </childnode>
        <childnode refid="6913" relation="include">
        </childnode>
      </node>
      <node id="6939">
        <label>typeinfo</label>
      </node>
      <node id="6946">
        <label>cstdio</label>
      </node>
      <node id="6931">
        <label>ATen/detail/UniqueVoidPtr.h</label>
        <link refid="_unique_void_ptr_8h_source"/>
        <childnode refid="6895" relation="include">
        </childnode>
        <childnode refid="6892" relation="include">
        </childnode>
      </node>
      <node id="6923">
        <label>vector</label>
      </node>
      <node id="6967">
        <label>ATen/TensorMethods.h</label>
      </node>
      <node id="6964">
        <label>THNN/Reduction.h</label>
      </node>
      <node id="6921">
        <label>new</label>
      </node>
      <node id="6899">
        <label>utility</label>
      </node>
      <node id="6922">
        <label>array</label>
      </node>
      <node id="6909">
        <label>sstream</label>
      </node>
      <node id="6959">
        <label>ATen/Functions.h</label>
        <link refid="build_2aten_2src_2_a_ten_2_functions_8h_source"/>
        <childnode refid="6932" relation="include">
        </childnode>
        <childnode refid="6941" relation="include">
        </childnode>
        <childnode refid="6953" relation="include">
        </childnode>
        <childnode refid="6951" relation="include">
        </childnode>
        <childnode refid="6942" relation="include">
        </childnode>
        <childnode refid="6960" relation="include">
        </childnode>
        <childnode refid="6961" relation="include">
        </childnode>
        <childnode refid="6962" relation="include">
        </childnode>
        <childnode refid="6963" relation="include">
        </childnode>
        <childnode refid="6964" relation="include">
        </childnode>
      </node>
      <node id="6961">
        <label>ATen/NativeFunctions.h</label>
      </node>
      <node id="6928">
        <label>iosfwd</label>
      </node>
      <node id="6918">
        <label>cstdlib</label>
      </node>
      <node id="6930">
        <label>iostream</label>
      </node>
      <node id="6906">
        <label>cstddef</label>
      </node>
      <node id="6948">
        <label>unordered_map</label>
      </node>
      <node id="6947">
        <label>mutex</label>
      </node>
      <node id="6891">
        <label>ATen/ATen.h</label>
        <link refid="_a_ten_8h_source"/>
        <childnode refid="6892" relation="include">
        </childnode>
        <childnode refid="6893" relation="include">
        </childnode>
        <childnode refid="6894" relation="include">
        </childnode>
        <childnode refid="6932" relation="include">
        </childnode>
        <childnode refid="6941" relation="include">
        </childnode>
        <childnode refid="6942" relation="include">
        </childnode>
        <childnode refid="6943" relation="include">
        </childnode>
        <childnode refid="6951" relation="include">
        </childnode>
        <childnode refid="6953" relation="include">
        </childnode>
        <childnode refid="6912" relation="include">
        </childnode>
        <childnode refid="6957" relation="include">
        </childnode>
        <childnode refid="6959" relation="include">
        </childnode>
        <childnode refid="6965" relation="include">
        </childnode>
        <childnode refid="6966" relation="include">
        </childnode>
        <childnode refid="6967" relation="include">
        </childnode>
        <childnode refid="6968" relation="include">
        </childnode>
        <childnode refid="6969" relation="include">
        </childnode>
        <childnode refid="6962" relation="include">
        </childnode>
        <childnode refid="6963" relation="include">
        </childnode>
        <childnode refid="6956" relation="include">
        </childnode>
        <childnode refid="6970" relation="include">
        </childnode>
        <childnode refid="6971" relation="include">
        </childnode>
      </node>
      <node id="6945">
        <label>ATen/Registry.h</label>
        <link refid="_registry_8h_source"/>
        <childnode refid="6917" relation="include">
        </childnode>
        <childnode refid="6946" relation="include">
        </childnode>
        <childnode refid="6918" relation="include">
        </childnode>
        <childnode refid="6903" relation="include">
        </childnode>
        <childnode refid="6895" relation="include">
        </childnode>
        <childnode refid="6947" relation="include">
        </childnode>
        <childnode refid="6948" relation="include">
        </childnode>
        <childnode refid="6904" relation="include">
        </childnode>
        <childnode refid="6923" relation="include">
        </childnode>
        <childnode refid="6949" relation="include">
        </childnode>
        <childnode refid="6892" relation="include">
        </childnode>
      </node>
      <node id="6897">
        <label>ATen/Error.h</label>
        <link refid="_error_8h_source"/>
        <childnode refid="6892" relation="include">
        </childnode>
        <childnode refid="6898" relation="include">
        </childnode>
        <childnode refid="6906" relation="include">
        </childnode>
        <childnode refid="6907" relation="include">
        </childnode>
        <childnode refid="6908" relation="include">
        </childnode>
        <childnode refid="6909" relation="include">
        </childnode>
        <childnode refid="6904" relation="include">
        </childnode>
      </node>
      <node id="6963">
        <label>ATen/TensorOptions.h</label>
        <link refid="_tensor_options_8h_source"/>
        <childnode refid="6943" relation="include">
        </childnode>
        <childnode refid="6912" relation="include">
        </childnode>
        <childnode refid="6962" relation="include">
        </childnode>
        <childnode refid="6956" relation="include">
        </childnode>
        <childnode refid="6913" relation="include">
        </childnode>
        <childnode refid="6953" relation="include">
        </childnode>
        <childnode refid="6941" relation="include">
        </childnode>
        <childnode refid="6906" relation="include">
        </childnode>
        <childnode refid="6928" relation="include">
        </childnode>
        <childnode refid="6899" relation="include">
        </childnode>
      </node>
      <node id="6953">
        <label>ATen/Tensor.h</label>
        <link refid="build_2aten_2src_2_a_ten_2tensor_8h_source"/>
        <childnode refid="6942" relation="include">
        </childnode>
        <childnode refid="6932" relation="include">
        </childnode>
        <childnode refid="6913" relation="include">
        </childnode>
        <childnode refid="6954" relation="include">
        </childnode>
        <childnode refid="6951" relation="include">
        </childnode>
        <childnode refid="6955" relation="include">
        </childnode>
        <childnode refid="6935" relation="include">
        </childnode>
        <childnode refid="6936" relation="include">
        </childnode>
        <childnode refid="6938" relation="include">
        </childnode>
        <childnode refid="6912" relation="include">
        </childnode>
        <childnode refid="6956" relation="include">
        </childnode>
        <childnode refid="6898" relation="include">
        </childnode>
      </node>
      <node id="6900">
        <label>type_traits</label>
      </node>
      <node id="6956">
        <label>ATen/Layout.h</label>
        <link refid="_layout_8h_source"/>
        <childnode refid="6913" relation="include">
        </childnode>
        <childnode refid="6897" relation="include">
        </childnode>
        <childnode refid="6930" relation="include">
        </childnode>
      </node>
      <node id="6915">
        <label>ATen/SmallVector.h</label>
        <link refid="_small_vector_8h_source"/>
        <childnode refid="6916" relation="include">
        </childnode>
        <childnode refid="6917" relation="include">
        </childnode>
        <childnode refid="6902" relation="include">
        </childnode>
        <childnode refid="6906" relation="include">
        </childnode>
        <childnode refid="6918" relation="include">
        </childnode>
        <childnode refid="6919" relation="include">
        </childnode>
        <childnode refid="6901" relation="include">
        </childnode>
        <childnode refid="6920" relation="include">
        </childnode>
        <childnode refid="6895" relation="include">
        </childnode>
        <childnode refid="6921" relation="include">
        </childnode>
        <childnode refid="6900" relation="include">
        </childnode>
        <childnode refid="6899" relation="include">
        </childnode>
        <childnode refid="6892" relation="include">
        </childnode>
      </node>
      <node id="6917">
        <label>algorithm</label>
      </node>
      <node id="6942">
        <label>ATen/Generator.h</label>
        <link refid="_generator_8h_source"/>
        <childnode refid="6934" relation="include">
        </childnode>
      </node>
      <node id="6919">
        <label>cstring</label>
      </node>
      <node id="6895">
        <label>memory</label>
      </node>
      <node id="6901">
        <label>initializer_list</label>
      </node>
      <node id="6965">
        <label>ATen/Formatting.h</label>
        <link refid="_formatting_8h_source"/>
        <childnode refid="6930" relation="include">
        </childnode>
        <childnode refid="6941" relation="include">
        </childnode>
        <childnode refid="6932" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceat">at</innernamespace>
    <innernamespace refid="namespaceat_1_1native">at::native</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="_spectral_ops_8cpp_1a73227c052dcd0e64caa7be16e383e006" prot="public" static="no">
        <name>REPR</name>
        <param><defname>SS</defname></param>
        <initializer>SS &lt;&lt; &quot;stft(&quot; &lt;&lt; self.type() &lt;&lt; self.sizes() &lt;&lt; &quot;, n_fft=&quot; &lt;&lt; n_fft \
       &lt;&lt; &quot;, hop_length=&quot; &lt;&lt; hop_length &lt;&lt; &quot;, win_length=&quot; &lt;&lt; win_length \
       &lt;&lt; &quot;, window=&quot;; \
    if (window.defined()) { \
      SS &lt;&lt; window.type() &lt;&lt; &quot;{&quot; &lt;&lt; window.sizes() &lt;&lt; &quot;}&quot;; \
    } else { \
      SS &lt;&lt; &quot;None&quot;; \
    } \
    SS &lt;&lt; &quot;, normalized=&quot; &lt;&lt; normalized &lt;&lt; &quot;, onesided=&quot; &lt;&lt; onesided &lt;&lt; &quot;)&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/SpectralOps.cpp" line="194" column="11"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>define<sp/>constants<sp/>like<sp/>M_PI<sp/>and<sp/>C<sp/>keywords<sp/>for<sp/>MSVC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_USE_MATH_DEFINES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ATen/ATen.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ATen/Config.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ATen/NativeFunctions.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ATen/detail/CUDAHooksInterface.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ATen/native/SpectralOpsUtils.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceat" kindref="compound">at</ref><sp/>{<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">native<sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>a<sp/>pass-through<sp/>wrapper<sp/>function<sp/>that<sp/>does<sp/>the<sp/>size<sp/>check<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>inferences.<sp/>The<sp/>actual<sp/>forward<sp/>implementation<sp/>function<sp/>is<sp/>called</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>at::_fft_with_size<sp/>which<sp/>dispatches<sp/>to<sp/>_fft_cufft<sp/>(CUDA)<sp/>or<sp/>_fft_mkl<sp/>(CPU).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Tensor<sp/>_fft(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor<sp/>&amp;</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int64_t<sp/>signal_ndim,</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>complex_input,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>complex_output,</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>inverse,<sp/>IntList<sp/>signal_sizes,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>normalized,</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>onesided)<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(signal_ndim<sp/>&lt;<sp/>1<sp/>||<sp/>signal_ndim<sp/>&gt;<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostringstream<sp/>ss;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>signal_ndim<sp/>to<sp/>be<sp/>1,<sp/>2,<sp/>or<sp/>3,<sp/>but<sp/>got<sp/>signal_ndim=&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>signal_ndim;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(ss.str());</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!at::isFloatingType(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.type().scalarType()))<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostringstream<sp/>ss;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>an<sp/>input<sp/>tensor<sp/>of<sp/>floating<sp/>types,<sp/>but<sp/>got<sp/>input=&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.type()<sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.sizes();</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(ss.str());</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>signal_tensor_ndim<sp/>=<sp/>signal_ndim<sp/>+<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(complex_input);<sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>complex<sp/>dim</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.dim()<sp/>&lt;<sp/>signal_tensor_ndim)<sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostringstream<sp/>ss;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Given<sp/>signal_ndim=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>signal_ndim<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>expected<sp/>an<sp/>input<sp/>tensor<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;of<sp/>at<sp/>least&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>signal_tensor_ndim<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;D&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(complex_input)<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>(complex<sp/>input<sp/>adds<sp/>an<sp/>extra<sp/>dimension)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>but<sp/>got<sp/>input=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.type()<sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.sizes();</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(ss.str());</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>self_shape<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.sizes();</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>batch_ndim<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.dim()<sp/>-<sp/>signal_tensor_ndim;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>Tensor<sp/>input<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>flatten<sp/>the<sp/>batch<sp/>dims</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(batch_ndim<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>slightly<sp/>faster<sp/>path<sp/>for<sp/>non-batch<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>input<sp/>=<sp/>input.unsqueeze(0);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(batch_ndim<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int64_t&gt;<sp/>flatten_input_shape(signal_tensor_ndim<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>std::copy(self_shape.begin()<sp/>+<sp/>batch_ndim,<sp/>self_shape.end(),<sp/>flatten_input_shape.begin()<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>flatten_input_shape[0]<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>input<sp/>=<sp/>input.reshape(flatten_input_shape);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>we<sp/>assume<sp/>that<sp/>input<sp/>is<sp/>batched<sp/>as<sp/>[<sp/>B<sp/>x<sp/>signal_dims...<sp/>]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(complex_input)<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(input.size(signal_ndim<sp/>+<sp/>1)<sp/>!=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::ostringstream<sp/>ss;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>an<sp/>input<sp/>tensor<sp/>with<sp/>a<sp/>last<sp/>dimension<sp/>of<sp/>size<sp/>2<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;representing<sp/>real<sp/>+<sp/>imaginary<sp/>components,<sp/>but<sp/>got<sp/>input<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.type()<sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.sizes();</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(ss.str());</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>build<sp/>signal_sizes<sp/>and<sp/>output_size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(signal_sizes.size()<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(signal_sizes.size())<sp/>!=<sp/>signal_ndim)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostringstream<sp/>ss;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>signal_sizes<sp/>to<sp/>be<sp/>empty<sp/>(default)<sp/>or<sp/>of<sp/>signal_ndim=&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>signal_ndim<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;D,<sp/>but<sp/>got<sp/>signal_sizes=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>signal_sizes;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(ss.str());</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>std::vector&lt;int64_t&gt;<sp/>output_sizes(signal_ndim<sp/>+<sp/>1<sp/>+<sp/>static_cast&lt;int64_t&gt;(complex_output));</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>output_sizes[0]<sp/>=<sp/>input.size(0);<sp/><sp/></highlight><highlight class="comment">//<sp/>batch<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>std::vector&lt;int64_t&gt;<sp/>checked_signal_sizes(signal_ndim);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int64_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>signal_ndim;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>input_size<sp/>=<sp/>input.size(i<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>signal_ndim<sp/>-<sp/>1<sp/>&amp;&amp;<sp/>onesided<sp/>&amp;&amp;<sp/>complex_input<sp/>&amp;&amp;<sp/>!complex_output)<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>last<sp/>dim<sp/>and<sp/>complex-to-real<sp/>onesided,<sp/>input<sp/>is<sp/>only<sp/>half<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>signal,<sp/>and<sp/>we<sp/>need<sp/>to<sp/>infer<sp/>basing<sp/>on<sp/>signal_sizes,<sp/>if<sp/>given</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>See<sp/>native/SpectralOpsUtils.h<sp/>for<sp/>detailed<sp/>description.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>inferred_size;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(signal_sizes.size()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inferred_size<sp/>=<sp/>infer_ft_complex_to_real_onesided_size(input_size,<sp/>signal_sizes[i]);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inferred_size<sp/>=<sp/>infer_ft_complex_to_real_onesided_size(input_size);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>checked_signal_sizes[i]<sp/>=<sp/>inferred_size;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>output_sizes[i<sp/>+<sp/>1]<sp/>=<sp/>inferred_size;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>signal_ndim<sp/>-<sp/>1<sp/>&amp;&amp;<sp/>onesided<sp/>&amp;&amp;<sp/>!complex_input<sp/>&amp;&amp;<sp/>complex_output)<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>last<sp/>dim<sp/>and<sp/>real-to-complex<sp/>onesided,<sp/>output<sp/>should<sp/>be<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>half<sp/>of<sp/>the<sp/>signal,<sp/>and<sp/>we<sp/>need<sp/>to<sp/>infer<sp/>using<sp/>input_size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_sizes[i<sp/>+<sp/>1]<sp/>=<sp/>infer_ft_real_to_complex_onesided_size(input_size);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_sizes[i<sp/>+<sp/>1]<sp/>=<sp/>input_size;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>checked_signal_sizes[i]<sp/>=<sp/>input_size;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(signal_sizes.size()<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>signal_sizes[i]<sp/>!=<sp/>checked_signal_sizes[i])<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ostringstream<sp/>ss;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>given<sp/>signal_sizes=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>signal_sizes<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>to<sp/>have<sp/>same<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;shape<sp/>with<sp/>input<sp/>at<sp/>signal<sp/>dimension<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>but<sp/>got<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;signal_sizes=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>signal_sizes<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>and<sp/>input=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.type()</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.sizes();</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(ss.str());</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(complex_output)<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>output_sizes[signal_ndim<sp/>+<sp/>1]<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>Tensor<sp/>output<sp/>=<sp/>at::_fft_with_size(input,<sp/>signal_ndim,<sp/>complex_input,</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>complex_output,<sp/>inverse,</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>checked_signal_sizes,<sp/>normalized,<sp/>onesided,</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_sizes);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>unflatten<sp/>the<sp/>batch<sp/>dims</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(batch_ndim<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>slightly<sp/>faster<sp/>path<sp/>for<sp/>non-batch<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>output<sp/>=<sp/>output.squeeze(0);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(batch_ndim<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>output_ndim<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.dim()<sp/>+<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(complex_output)<sp/>-<sp/>static_cast&lt;int64_t&gt;(complex_input);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int64_t&gt;<sp/>unflatten_output_shape(output_ndim);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>std::copy(self_shape.begin(),<sp/>self_shape.begin()<sp/>+<sp/>batch_ndim,<sp/>unflatten_output_shape.begin());</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>std::copy(output_sizes.begin()<sp/>+<sp/>1,<sp/>output_sizes.end(),<sp/>unflatten_output_shape.begin()<sp/>+<sp/>batch_ndim);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>output<sp/>=<sp/>output.reshape(unflatten_output_shape);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>output;</highlight></codeline>
<codeline lineno="144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>call<sp/>the<sp/>following<sp/>methods<sp/>via<sp/>CUDA<sp/>hooks<sp/>because<sp/>they<sp/>are<sp/>really<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="comment">//<sp/>valid<sp/>when<sp/>CUDA<sp/>is<sp/>available.<sp/>See<sp/>native/cuda/CuFFTPlanCache.h<sp/>for<sp/>more<sp/>details.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal">int64_t<sp/>_cufft_get_plan_cache_max_size()<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::getCUDAHooks().cuFFTGetPlanCacheMaxSize();</highlight></codeline>
<codeline lineno="150"><highlight class="normal">}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_cufft_set_plan_cache_max_size(int64_t<sp/>max_size)<sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>detail::getCUDAHooks().cuFFTSetPlanCacheMaxSize(max_size);</highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal">int64_t<sp/>_cufft_get_plan_cache_size()<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::getCUDAHooks().cuFFTGetPlanCacheSize();</highlight></codeline>
<codeline lineno="158"><highlight class="normal">}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_cufft_clear_plan_cache()<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>detail::getCUDAHooks().cuFFTClearPlanCache();</highlight></codeline>
<codeline lineno="162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal">Tensor<sp/>fft(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int64_t<sp/>signal_ndim,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>normalized)<sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_fft(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>signal_ndim,<sp/></highlight><highlight class="comment">/*<sp/>complex_input<sp/>*/</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>complex_output<sp/>*/</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">/*<sp/>inverse<sp/>*/</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>{},<sp/>normalized,</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>onesided<sp/>*/</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="168"><highlight class="normal">}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal">Tensor<sp/>ifft(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int64_t<sp/>signal_ndim,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>normalized)<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_fft(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>signal_ndim,<sp/></highlight><highlight class="comment">/*<sp/>complex_input<sp/>*/</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>complex_output<sp/>*/</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">/*<sp/>inverse<sp/>*/</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>{},<sp/>normalized,</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>onesided<sp/>*/</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="174"><highlight class="normal">}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal">Tensor<sp/>rfft(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int64_t<sp/>signal_ndim,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>normalized,</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>onesided)<sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_fft(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>signal_ndim,<sp/></highlight><highlight class="comment">/*<sp/>complex_input<sp/>*/</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>complex_output<sp/>*/</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">/*<sp/>inverse<sp/>*/</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>{},<sp/>normalized,</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>onesided);</highlight></codeline>
<codeline lineno="181"><highlight class="normal">}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal">Tensor<sp/>irfft(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int64_t<sp/>signal_ndim,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>normalized,</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>onesided,<sp/><sp/>IntList<sp/>signal_sizes)<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_fft(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>signal_ndim,<sp/></highlight><highlight class="comment">/*<sp/>complex_input<sp/>*/</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>complex_output<sp/>*/</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">/*<sp/>inverse<sp/>*/</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>signal_sizes,</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>normalized,<sp/>onesided);</highlight></codeline>
<codeline lineno="188"><highlight class="normal">}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal">Tensor<sp/>stft(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int64_t<sp/>n_fft,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int64_t<sp/>hop_length,</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int64_t<sp/>win_length,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/>window,</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>normalized,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>onesided)<sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>REPR(SS)<sp/>\</highlight></codeline>
<codeline lineno="195"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>SS<sp/>&lt;&lt;<sp/>&quot;stft(&quot;<sp/>&lt;&lt;<sp/>self.type()<sp/>&lt;&lt;<sp/>self.sizes()<sp/>&lt;&lt;<sp/>&quot;,<sp/>n_fft=&quot;<sp/>&lt;&lt;<sp/>n_fft<sp/>\</highlight></codeline>
<codeline lineno="196"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;,<sp/>hop_length=&quot;<sp/>&lt;&lt;<sp/>hop_length<sp/>&lt;&lt;<sp/>&quot;,<sp/>win_length=&quot;<sp/>&lt;&lt;<sp/>win_length<sp/>\</highlight></codeline>
<codeline lineno="197"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;,<sp/>window=&quot;;<sp/>\</highlight></codeline>
<codeline lineno="198"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(window.defined())<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="199"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>SS<sp/>&lt;&lt;<sp/>window.type()<sp/>&lt;&lt;<sp/>&quot;{&quot;<sp/>&lt;&lt;<sp/>window.sizes()<sp/>&lt;&lt;<sp/>&quot;}&quot;;<sp/>\</highlight></codeline>
<codeline lineno="200"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="201"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>SS<sp/>&lt;&lt;<sp/>&quot;None&quot;;<sp/>\</highlight></codeline>
<codeline lineno="202"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="203"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>SS<sp/>&lt;&lt;<sp/>&quot;,<sp/>normalized=&quot;<sp/>&lt;&lt;<sp/>normalized<sp/>&lt;&lt;<sp/>&quot;,<sp/>onesided=&quot;<sp/>&lt;&lt;<sp/>onesided<sp/>&lt;&lt;<sp/>&quot;)&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!at::isFloatingType(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.type().scalarType())<sp/>||<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.dim()<sp/>&gt;<sp/>2<sp/>||<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.dim()<sp/>&lt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostringstream<sp/>ss;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>REPR(ss)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>expected<sp/>a<sp/>1D<sp/>or<sp/>2D<sp/>tensor<sp/>of<sp/>floating<sp/>types&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>AT_ERROR(ss.str());</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>Tensor<sp/>input<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.dim()<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>input<sp/>=<sp/>input.unsqueeze(0);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>int64_t<sp/>batch<sp/>=<sp/>input.size(0);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>int64_t<sp/>len<sp/>=<sp/>input.size(1);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n_fft<sp/>&lt;=<sp/>0<sp/>||<sp/>n_fft<sp/>&gt;<sp/>len)<sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostringstream<sp/>ss;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>REPR(ss)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>expected<sp/>0<sp/>&lt;<sp/>n_fft<sp/>&lt;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>len</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>but<sp/>got<sp/>n_fft=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>win_length;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>AT_ERROR(ss.str());</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hop_length<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostringstream<sp/>ss;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>REPR(ss)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>expected<sp/>hop_length<sp/>&gt;<sp/>0,<sp/>but<sp/>got<sp/>hop_length=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>hop_length;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(ss.str());</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(win_length<sp/>&lt;=<sp/>0<sp/>||<sp/>win_length<sp/>&gt;<sp/>n_fft)<sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostringstream<sp/>ss;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>REPR(ss)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>expected<sp/>0<sp/>&lt;<sp/>win_length<sp/>&lt;=<sp/>n_fft,<sp/>but<sp/>got<sp/>win_length=&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>win_length;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>AT_ERROR(ss.str());</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(window.defined()<sp/>&amp;&amp;<sp/>(window.dim()<sp/>!=<sp/>1<sp/>||<sp/>window.size(0)<sp/>!=<sp/>win_length))<sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostringstream<sp/>ss;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>REPR(ss)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>expected<sp/>a<sp/>1D<sp/>window<sp/>tensor<sp/>of<sp/>size<sp/>equal<sp/>to<sp/>win_length=&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>win_length<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>but<sp/>got<sp/>window<sp/>with<sp/>size<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>window.sizes();</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>AT_ERROR(ss.str());</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#undef<sp/>REPR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>window_<sp/>=<sp/>window;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(win_length<sp/>&lt;<sp/>n_fft)<sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pad<sp/>center</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>window_<sp/>=<sp/>at::zeros({n_fft},<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.options());</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>left<sp/>=<sp/>(n_fft<sp/>-<sp/>win_length)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(window.defined())<sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>window_.narrow(0,<sp/>left,<sp/>win_length).copy_(window);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>window_.narrow(0,<sp/>left,<sp/>win_length).fill_(1);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>int64_t<sp/>n_frames<sp/>=<sp/>1<sp/>+<sp/>(len<sp/>-<sp/>n_fft)<sp/>/<sp/>hop_length;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>time2col</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>input<sp/>=<sp/>input.as_strided(</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>{batch,<sp/>n_frames,<sp/>n_fft},</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>{input.stride(0),<sp/>hop_length<sp/>*<sp/>input.stride(1),<sp/>input.stride(1)}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(window_.defined())<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>input<sp/>=<sp/>input.mul(window_);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>rfft<sp/>and<sp/>transpose<sp/>to<sp/>get<sp/>(batch<sp/>x<sp/>fft_size<sp/>x<sp/>num_frames)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>out<sp/>=<sp/>input.rfft(1,<sp/>normalized,<sp/>onesided).transpose_(1,<sp/>2);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.dim()<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out.squeeze_(0);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="267"><highlight class="normal">}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal">}}<sp/></highlight><highlight class="comment">//<sp/>at::native</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/SpectralOps.cpp"/>
  </compounddef>
</doxygen>
