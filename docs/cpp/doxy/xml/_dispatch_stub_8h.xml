<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="_dispatch_stub_8h" kind="file" language="C++">
    <compoundname>DispatchStub.h</compoundname>
    <includes refid="_error_8h" local="no">ATen/Error.h</includes>
    <includes refid="_scalar_type_8h" local="no">ATen/ScalarType.h</includes>
    <includes local="no">type_traits</includes>
    <includedby refid="_reduce_ops_kernel_8h" local="no">/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/ReduceOpsKernel.h</includedby>
    <includedby refid="_softmax_kernel_8h" local="no">/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/SoftmaxKernel.h</includedby>
    <includedby refid="_unary_ops_kernel_8cpp" local="yes">/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/UnaryOpsKernel.cpp</includedby>
    <includedby refid="_unary_ops_kernel_8h" local="no">/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/UnaryOpsKernel.h</includedby>
    <includedby refid="_dispatch_stub_8cpp" local="yes">/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/DispatchStub.cpp</includedby>
    <incdepgraph>
      <node id="5827">
        <label>ATen/optional.h</label>
        <link refid="optional_8h_source"/>
        <childnode refid="5828" relation="include">
        </childnode>
        <childnode refid="5829" relation="include">
        </childnode>
        <childnode refid="5830" relation="include">
        </childnode>
        <childnode refid="5831" relation="include">
        </childnode>
        <childnode refid="5832" relation="include">
        </childnode>
        <childnode refid="5833" relation="include">
        </childnode>
        <childnode refid="5834" relation="include">
        </childnode>
      </node>
      <node id="5832">
        <label>functional</label>
      </node>
      <node id="5839">
        <label>ATen/ScalarType.h</label>
        <link refid="_scalar_type_8h_source"/>
        <childnode refid="5840" relation="include">
        </childnode>
        <childnode refid="5826" relation="include">
        </childnode>
        <childnode refid="5851" relation="include">
        </childnode>
        <childnode refid="5853" relation="include">
        </childnode>
        <childnode refid="5857" relation="include">
        </childnode>
      </node>
      <node id="5852">
        <label>limits</label>
      </node>
      <node id="5846">
        <label>iterator</label>
      </node>
      <node id="5853">
        <label>cstdint</label>
      </node>
      <node id="5854">
        <label>cmath</label>
      </node>
      <node id="5831">
        <label>cassert</label>
      </node>
      <node id="5856">
        <label>Half-inl.h</label>
        <link refid="_half-inl_8h_source"/>
        <childnode refid="5826" relation="include">
        </childnode>
        <childnode refid="5845" relation="include">
        </childnode>
        <childnode refid="5852" relation="include">
        </childnode>
      </node>
      <node id="5834">
        <label>stdexcept</label>
      </node>
      <node id="5851">
        <label>ATen/Half.h</label>
        <link refid="_half_8h_source"/>
        <childnode refid="5826" relation="include">
        </childnode>
        <childnode refid="5852" relation="include">
        </childnode>
        <childnode refid="5833" relation="include">
        </childnode>
        <childnode refid="5853" relation="include">
        </childnode>
        <childnode refid="5834" relation="include">
        </childnode>
        <childnode refid="5828" relation="include">
        </childnode>
        <childnode refid="5854" relation="include">
        </childnode>
        <childnode refid="5855" relation="include">
        </childnode>
        <childnode refid="5856" relation="include">
        </childnode>
      </node>
      <node id="5833">
        <label>string</label>
      </node>
      <node id="5836">
        <label>exception</label>
      </node>
      <node id="5842">
        <label>AlignOf.h</label>
        <link refid="_align_of_8h_source"/>
        <childnode refid="5835" relation="include">
        </childnode>
      </node>
      <node id="5837">
        <label>ostream</label>
      </node>
      <node id="5840">
        <label>ATen/ArrayRef.h</label>
        <link refid="_array_ref_8h_source"/>
        <childnode refid="5825" relation="include">
        </childnode>
        <childnode refid="5841" relation="include">
        </childnode>
        <childnode refid="5849" relation="include">
        </childnode>
        <childnode refid="5846" relation="include">
        </childnode>
        <childnode refid="5850" relation="include">
        </childnode>
      </node>
      <node id="5826">
        <label>ATen/ATenGeneral.h</label>
        <link refid="_a_ten_general_8h_source"/>
      </node>
      <node id="5824">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/DispatchStub.h</label>
        <link refid="_dispatch_stub_8h"/>
        <childnode refid="5825" relation="include">
        </childnode>
        <childnode refid="5839" relation="include">
        </childnode>
        <childnode refid="5829" relation="include">
        </childnode>
      </node>
      <node id="5850">
        <label>vector</label>
      </node>
      <node id="5848">
        <label>new</label>
      </node>
      <node id="5828">
        <label>utility</label>
      </node>
      <node id="5849">
        <label>array</label>
      </node>
      <node id="5838">
        <label>sstream</label>
      </node>
      <node id="5855">
        <label>iosfwd</label>
      </node>
      <node id="5844">
        <label>cstdlib</label>
      </node>
      <node id="5857">
        <label>iostream</label>
      </node>
      <node id="5835">
        <label>cstddef</label>
      </node>
      <node id="5825">
        <label>ATen/Error.h</label>
        <link refid="_error_8h_source"/>
        <childnode refid="5826" relation="include">
        </childnode>
        <childnode refid="5827" relation="include">
        </childnode>
        <childnode refid="5835" relation="include">
        </childnode>
        <childnode refid="5836" relation="include">
        </childnode>
        <childnode refid="5837" relation="include">
        </childnode>
        <childnode refid="5838" relation="include">
        </childnode>
        <childnode refid="5833" relation="include">
        </childnode>
      </node>
      <node id="5829">
        <label>type_traits</label>
      </node>
      <node id="5841">
        <label>ATen/SmallVector.h</label>
        <link refid="_small_vector_8h_source"/>
        <childnode refid="5842" relation="include">
        </childnode>
        <childnode refid="5843" relation="include">
        </childnode>
        <childnode refid="5831" relation="include">
        </childnode>
        <childnode refid="5835" relation="include">
        </childnode>
        <childnode refid="5844" relation="include">
        </childnode>
        <childnode refid="5845" relation="include">
        </childnode>
        <childnode refid="5830" relation="include">
        </childnode>
        <childnode refid="5846" relation="include">
        </childnode>
        <childnode refid="5847" relation="include">
        </childnode>
        <childnode refid="5848" relation="include">
        </childnode>
        <childnode refid="5829" relation="include">
        </childnode>
        <childnode refid="5828" relation="include">
        </childnode>
        <childnode refid="5826" relation="include">
        </childnode>
      </node>
      <node id="5843">
        <label>algorithm</label>
      </node>
      <node id="5845">
        <label>cstring</label>
      </node>
      <node id="5847">
        <label>memory</label>
      </node>
      <node id="5830">
        <label>initializer_list</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="5861">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/UnaryOpsKernel.h</label>
        <link refid="_unary_ops_kernel_8h_source"/>
      </node>
      <node id="5858">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/DispatchStub.h</label>
        <link refid="_dispatch_stub_8h"/>
        <childnode refid="5859" relation="include">
        </childnode>
        <childnode refid="5860" relation="include">
        </childnode>
        <childnode refid="5861" relation="include">
        </childnode>
      </node>
      <node id="5859">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/ReduceOpsKernel.h</label>
        <link refid="_reduce_ops_kernel_8h_source"/>
      </node>
      <node id="5860">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/SoftmaxKernel.h</label>
        <link refid="_softmax_kernel_8h_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structat_1_1native_1_1_dispatch_stub" prot="public">at::native::DispatchStub</innerclass>
    <innernamespace refid="namespaceat">at</innernamespace>
    <innernamespace refid="namespaceat_1_1native">at::native</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="_dispatch_stub_8h_1a5011960f72d39bac275be5222bd7ab44" prot="public" static="no">
        <name>DECLARE_DISPATCH</name>
        <param><defname>fn</defname></param>
        <param><defname>name</defname></param>
        <initializer>extern struct name : DispatchStub&lt;fn, name&gt; {} name</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/DispatchStub.h" line="106" column="9" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/DispatchStub.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_dispatch_stub_8h_1a04a02387d399f42e0133504534d4c1c5" prot="public" static="no">
        <name>DEFINE_DISPATCH</name>
        <param><defname>name</defname></param>
        <initializer>struct name name</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/DispatchStub.h" line="109" column="9" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/DispatchStub.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ATen/Error.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ATen/ScalarType.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>instruction<sp/>set<sp/>specific<sp/>function<sp/>dispatch.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Kernels<sp/>that<sp/>may<sp/>make<sp/>use<sp/>of<sp/>specialized<sp/>instruction<sp/>sets<sp/>(e.g.<sp/>AVX)<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compiled<sp/>multiple<sp/>times<sp/>with<sp/>different<sp/>compiler<sp/>flags<sp/>(e.g.<sp/>-mavx).<sp/>A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DispatchStub<sp/>contains<sp/>a<sp/>table<sp/>of<sp/>function<sp/>pointers<sp/>for<sp/>a<sp/>kernel.<sp/>At<sp/>runtime,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>fastest<sp/>available<sp/>kernel<sp/>is<sp/>chosen<sp/>based<sp/>on<sp/>the<sp/>features<sp/>reported<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>cpuinfo.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Example:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>In<sp/>native/MyKernel.h:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>using<sp/>fn_type<sp/>=<sp/>void(*)(const<sp/>Tensor&amp;<sp/>x);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>DECLARE_DISPATCH(fn_type,<sp/>stub);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>In<sp/>native/MyKernel.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>DEFINE_DISPATCH(stub);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>In<sp/>native/cpu/MyKernel.cpp:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>void<sp/>kernel(const<sp/>Tensor&amp;<sp/>x)<sp/>{<sp/>...<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>REGISTER_DISPATCH(stub,<sp/>&amp;kernel);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>call:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>stub(kCPU,<sp/>tensor);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ignore<sp/>warnings<sp/>about<sp/>DispatchStub::DEFAULT,<sp/>AVX,<sp/>AVX2<sp/>defined<sp/>elsewhere</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>clang<sp/>diagnostic<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>clang<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wundefined-var-template&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceat" kindref="compound">at</ref><sp/>{<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">native<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>CPUCapability<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>DEFAULT<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>AVX<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>AVX2<sp/>=<sp/>2,</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>NUM_OPTIONS</highlight></codeline>
<codeline lineno="44"><highlight class="normal">};</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal">CPUCapability<sp/>get_cpu_capability();</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FnPtr,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="49" refid="structat_1_1native_1_1_dispatch_stub" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structat_1_1native_1_1_dispatch_stub" kindref="compound">DispatchStub</ref><sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>static_assert(std::is_pointer&lt;FnPtr&gt;::value,<sp/></highlight><highlight class="stringliteral">&quot;FnPtr<sp/>should<sp/>be<sp/>a<sp/>pointer<sp/>type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>ArgTypes&gt;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(Backend<sp/>backend,<sp/>ArgTypes...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(backend<sp/>==<sp/>Backend::CPU)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!cpu_dispatch_ptr)<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cpu_dispatch_ptr<sp/>=<sp/>choose_cpu_impl();</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*cpu_dispatch_ptr)(args...);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(backend<sp/>==<sp/>Backend::CUDA)<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>AT_ASSERTM(cuda_dispatch_ptr,<sp/></highlight><highlight class="stringliteral">&quot;DispatchStub:<sp/>missing<sp/>CUDA<sp/>kernel&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*cuda_dispatch_ptr)(args...);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>AT_ERROR(</highlight><highlight class="stringliteral">&quot;DispatchStub:<sp/>unsupported<sp/>backend&quot;</highlight><highlight class="normal">,<sp/>backend);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>FnPtr<sp/>choose_cpu_impl()<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>capability<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(get_cpu_capability());</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)capability;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_AVX2_CPU_DEFINITION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(capability<sp/>&gt;=<sp/>static_cast&lt;int&gt;(CPUCapability::AVX2))<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>AT_ASSERTM(AVX2,<sp/></highlight><highlight class="stringliteral">&quot;DispatchStub:<sp/>missing<sp/>AVX2<sp/>kernel&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AVX2;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_AVX_CPU_DEFINITION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(capability<sp/>&gt;=<sp/>static_cast&lt;int&gt;(CPUCapability::AVX))<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>AT_ASSERTM(AVX,<sp/></highlight><highlight class="stringliteral">&quot;DispatchStub:<sp/>missing<sp/>AVX<sp/>kernel&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AVX;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>AT_ASSERTM(DEFAULT,<sp/></highlight><highlight class="stringliteral">&quot;DispatchStub:<sp/>missing<sp/>default<sp/>kernel&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DEFAULT;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>FnPtr<sp/>cpu_dispatch_ptr<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>FnPtr<sp/>cuda_dispatch_ptr<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>FnPtr<sp/>DEFAULT;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_AVX_CPU_DEFINITION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>FnPtr<sp/>AVX;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_AVX2_CPU_DEFINITION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>FnPtr<sp/>AVX2;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal">};</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FnPtr,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">RegisterDispatch<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>RegisterDispatch(<ref refid="structat_1_1native_1_1_dispatch_stub" kindref="compound">DispatchStub&lt;FnPtr, T&gt;</ref>&amp;<sp/>stub,<sp/>FnPtr<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>stub.cuda_dispatch_ptr<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal">};</highlight></codeline>
<codeline lineno="104"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>anonymous<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DECLARE_DISPATCH(fn,<sp/>name)<sp/>\</highlight></codeline>
<codeline lineno="107"><highlight class="preprocessor"><sp/><sp/>extern<sp/>struct<sp/>name<sp/>:<sp/>DispatchStub&lt;fn,<sp/>name&gt;<sp/>{}<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEFINE_DISPATCH(name)<sp/>struct<sp/>name<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__CUDACC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REGISTER_DISPATCH(name,<sp/>fn)<sp/>\</highlight></codeline>
<codeline lineno="113"><highlight class="preprocessor"><sp/><sp/>static<sp/>RegisterDispatch&lt;decltype(fn),<sp/>struct<sp/>name&gt;<sp/>name<sp/>##<sp/>__register(name,<sp/>fn);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(CPU_CAPABILITY)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REGISTER_DISPATCH(name,<sp/>fn)<sp/>\</highlight></codeline>
<codeline lineno="116"><highlight class="preprocessor"><sp/><sp/>template<sp/>&lt;&gt;<sp/>decltype(fn)<sp/>DispatchStub&lt;decltype(fn),<sp/>struct<sp/>name&gt;::CPU_CAPABILITY<sp/>=<sp/>fn;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal">}}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>at::native</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>clang<sp/>diagnostic<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/DispatchStub.h"/>
  </compounddef>
</doxygen>
