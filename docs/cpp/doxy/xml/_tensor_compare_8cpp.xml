<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="_tensor_compare_8cpp" kind="file" language="C++">
    <compoundname>TensorCompare.cpp</compoundname>
    <includes refid="_a_ten_8h" local="yes">ATen/ATen.h</includes>
    <includes refid="_c_p_u_apply_utils_8h" local="yes">ATen/CPUApplyUtils.h</includes>
    <includes refid="_dispatch_8h" local="yes">ATen/Dispatch.h</includes>
    <includes refid="_error_8h" local="yes">ATen/Error.h</includes>
    <includes refid="_expand_utils_8h" local="yes">ATen/ExpandUtils.h</includes>
    <includes local="yes">ATen/NativeFunctions.h</includes>
    <includes refid="_reduce_ops_utils_8h" local="yes">ReduceOpsUtils.h</includes>
    <incdepgraph>
      <node id="7854">
        <label>ATen/optional.h</label>
        <link refid="optional_8h_source"/>
        <childnode refid="7855" relation="include">
        </childnode>
        <childnode refid="7856" relation="include">
        </childnode>
        <childnode refid="7857" relation="include">
        </childnode>
        <childnode refid="7858" relation="include">
        </childnode>
        <childnode refid="7859" relation="include">
        </childnode>
        <childnode refid="7860" relation="include">
        </childnode>
        <childnode refid="7861" relation="include">
        </childnode>
      </node>
      <node id="7900">
        <label>ATen/detail/CUDAHooksInterface.h</label>
        <link refid="_c_u_d_a_hooks_interface_8h_source"/>
        <childnode refid="7850" relation="include">
        </childnode>
        <childnode refid="7853" relation="include">
        </childnode>
        <childnode refid="7898" relation="include">
        </childnode>
        <childnode refid="7901" relation="include">
        </childnode>
        <childnode refid="7862" relation="include">
        </childnode>
        <childnode refid="7859" relation="include">
        </childnode>
        <childnode refid="7851" relation="include">
        </childnode>
      </node>
      <node id="7868">
        <label>ATen/Device.h</label>
        <link refid="_device_8h_source"/>
        <childnode refid="7853" relation="include">
        </childnode>
        <childnode refid="7869" relation="include">
        </childnode>
        <childnode refid="7862" relation="include">
        </childnode>
        <childnode refid="7884" relation="include">
        </childnode>
        <childnode refid="7860" relation="include">
        </childnode>
        <childnode refid="7859" relation="include">
        </childnode>
      </node>
      <node id="7867">
        <label>atomic</label>
      </node>
      <node id="7859">
        <label>functional</label>
      </node>
      <node id="7905">
        <label>ATen/Backtrace.h</label>
        <link refid="_backtrace_8h_source"/>
        <childnode refid="7862" relation="include">
        </childnode>
        <childnode refid="7860" relation="include">
        </childnode>
        <childnode refid="7895" relation="include">
        </childnode>
        <childnode refid="7848" relation="include">
        </childnode>
      </node>
      <node id="7869">
        <label>ATen/ScalarType.h</label>
        <link refid="_scalar_type_8h_source"/>
        <childnode refid="7870" relation="include">
        </childnode>
        <childnode refid="7848" relation="include">
        </childnode>
        <childnode refid="7880" relation="include">
        </childnode>
        <childnode refid="7882" relation="include">
        </childnode>
        <childnode refid="7886" relation="include">
        </childnode>
      </node>
      <node id="7881">
        <label>limits</label>
      </node>
      <node id="7889">
        <label>assert.h</label>
      </node>
      <node id="7894">
        <label>ATen/Utils.h</label>
        <link refid="aten_2src_2_a_ten_2utils_8h_source"/>
        <childnode refid="7848" relation="include">
        </childnode>
        <childnode refid="7870" relation="include">
        </childnode>
        <childnode refid="7853" relation="include">
        </childnode>
        <childnode refid="7893" relation="include">
        </childnode>
        <childnode refid="7873" relation="include">
        </childnode>
        <childnode refid="7865" relation="include">
        </childnode>
        <childnode refid="7895" relation="include">
        </childnode>
        <childnode refid="7896" relation="include">
        </childnode>
      </node>
      <node id="7876">
        <label>iterator</label>
      </node>
      <node id="7888">
        <label>ATen/Scalar.h</label>
        <link refid="_scalar_8h_source"/>
        <childnode refid="7889" relation="include">
        </childnode>
        <childnode refid="7890" relation="include">
        </childnode>
        <childnode refid="7861" relation="include">
        </childnode>
        <childnode refid="7860" relation="include">
        </childnode>
        <childnode refid="7855" relation="include">
        </childnode>
        <childnode refid="7848" relation="include">
        </childnode>
        <childnode refid="7880" relation="include">
        </childnode>
        <childnode refid="7869" relation="include">
        </childnode>
        <childnode refid="7891" relation="include">
        </childnode>
        <childnode refid="7894" relation="include">
        </childnode>
      </node>
      <node id="7908">
        <label>TH/THStorageFunctions.hpp</label>
      </node>
      <node id="7882">
        <label>cstdint</label>
      </node>
      <node id="7916">
        <label>ATen/Deprecated.h</label>
        <link refid="_deprecated_8h_source"/>
      </node>
      <node id="7890">
        <label>stdint.h</label>
      </node>
      <node id="7927">
        <label>ATen/CUDAGuard.h</label>
        <link refid="_c_u_d_a_guard_8h_source"/>
      </node>
      <node id="7883">
        <label>cmath</label>
      </node>
      <node id="7858">
        <label>cassert</label>
      </node>
      <node id="7899">
        <label>ATen/Context.h</label>
        <link refid="_context_8h_source"/>
        <childnode refid="7848" relation="include">
        </childnode>
        <childnode refid="7849" relation="include">
        </childnode>
        <childnode refid="7898" relation="include">
        </childnode>
        <childnode refid="7897" relation="include">
        </childnode>
        <childnode refid="7894" relation="include">
        </childnode>
        <childnode refid="7853" relation="include">
        </childnode>
        <childnode refid="7900" relation="include">
        </childnode>
        <childnode refid="7906" relation="include">
        </childnode>
        <childnode refid="7851" relation="include">
        </childnode>
        <childnode refid="7903" relation="include">
        </childnode>
        <childnode refid="7882" relation="include">
        </childnode>
      </node>
      <node id="7885">
        <label>Half-inl.h</label>
        <link refid="_half-inl_8h_source"/>
        <childnode refid="7848" relation="include">
        </childnode>
        <childnode refid="7875" relation="include">
        </childnode>
        <childnode refid="7881" relation="include">
        </childnode>
      </node>
      <node id="7861">
        <label>stdexcept</label>
      </node>
      <node id="7922">
        <label>ATen/TensorOperators.h</label>
        <link refid="_tensor_operators_8h_source"/>
        <childnode refid="7888" relation="include">
        </childnode>
        <childnode refid="7909" relation="include">
        </childnode>
        <childnode refid="7897" relation="include">
        </childnode>
        <childnode refid="7860" relation="include">
        </childnode>
        <childnode refid="7861" relation="include">
        </childnode>
      </node>
      <node id="7896">
        <label>numeric</label>
      </node>
      <node id="7892">
        <label>ATen/TensorImpl.h</label>
        <link refid="_tensor_impl_8h_source"/>
        <childnode refid="7867" relation="include">
        </childnode>
        <childnode refid="7851" relation="include">
        </childnode>
        <childnode refid="7866" relation="include">
        </childnode>
        <childnode refid="7869" relation="include">
        </childnode>
        <childnode refid="7854" relation="include">
        </childnode>
      </node>
      <node id="7880">
        <label>ATen/Half.h</label>
        <link refid="_half_8h_source"/>
        <childnode refid="7848" relation="include">
        </childnode>
        <childnode refid="7881" relation="include">
        </childnode>
        <childnode refid="7860" relation="include">
        </childnode>
        <childnode refid="7882" relation="include">
        </childnode>
        <childnode refid="7861" relation="include">
        </childnode>
        <childnode refid="7855" relation="include">
        </childnode>
        <childnode refid="7883" relation="include">
        </childnode>
        <childnode refid="7884" relation="include">
        </childnode>
        <childnode refid="7885" relation="include">
        </childnode>
      </node>
      <node id="7866">
        <label>ATen/Retainable.h</label>
        <link refid="_retainable_8h_source"/>
        <childnode refid="7867" relation="include">
        </childnode>
      </node>
      <node id="7891">
        <label>ATen/TensorBase.h</label>
        <link refid="_tensor_base_8h_source"/>
        <childnode refid="7892" relation="include">
        </childnode>
        <childnode refid="7893" relation="include">
        </childnode>
      </node>
      <node id="7860">
        <label>string</label>
      </node>
      <node id="7925">
        <label>ATen/DimVector.h</label>
        <link refid="_dim_vector_8h_source"/>
        <childnode refid="7871" relation="include">
        </childnode>
        <childnode refid="7890" relation="include">
        </childnode>
      </node>
      <node id="7926">
        <label>ATen/OptionsGuard.h</label>
        <link refid="_options_guard_8h_source"/>
        <childnode refid="7868" relation="include">
        </childnode>
        <childnode refid="7912" relation="include">
        </childnode>
        <childnode refid="7869" relation="include">
        </childnode>
        <childnode refid="7919" relation="include">
        </childnode>
        <childnode refid="7854" relation="include">
        </childnode>
      </node>
      <node id="7931">
        <label>ATen/ExpandUtils.h</label>
        <link refid="_expand_utils_8h_source"/>
        <childnode refid="7909" relation="include">
        </childnode>
        <childnode refid="7853" relation="include">
        </childnode>
        <childnode refid="7859" relation="include">
        </childnode>
        <childnode refid="7865" relation="include">
        </childnode>
        <childnode refid="7932" relation="include">
        </childnode>
      </node>
      <node id="7850">
        <label>ATen/Allocator.h</label>
        <link refid="_allocator_8h_source"/>
        <childnode refid="7851" relation="include">
        </childnode>
        <childnode refid="7852" relation="include">
        </childnode>
        <childnode refid="7853" relation="include">
        </childnode>
        <childnode refid="7866" relation="include">
        </childnode>
        <childnode refid="7868" relation="include">
        </childnode>
        <childnode refid="7887" relation="include">
        </childnode>
      </node>
      <node id="7906">
        <label>ATen/CUDAStream.h</label>
        <link refid="_c_u_d_a_stream_8h_source"/>
      </node>
      <node id="7918">
        <label>ATen/DeviceGuard.h</label>
        <link refid="_device_guard_8h_source"/>
        <childnode refid="7868" relation="include">
        </childnode>
        <childnode refid="7853" relation="include">
        </childnode>
        <childnode refid="7869" relation="include">
        </childnode>
        <childnode refid="7909" relation="include">
        </childnode>
        <childnode refid="7900" relation="include">
        </childnode>
        <childnode refid="7862" relation="include">
        </childnode>
      </node>
      <node id="7863">
        <label>exception</label>
      </node>
      <node id="7852">
        <label>stddef.h</label>
      </node>
      <node id="7893">
        <label>ATen/UndefinedTensor.h</label>
        <link refid="_undefined_tensor_8h_source"/>
        <childnode refid="7892" relation="include">
        </childnode>
      </node>
      <node id="7924">
        <label>ATen/Dispatch.h</label>
        <link refid="_dispatch_8h_source"/>
        <childnode refid="7853" relation="include">
        </childnode>
        <childnode refid="7880" relation="include">
        </childnode>
        <childnode refid="7897" relation="include">
        </childnode>
      </node>
      <node id="7872">
        <label>AlignOf.h</label>
        <link refid="_align_of_8h_source"/>
        <childnode refid="7862" relation="include">
        </childnode>
      </node>
      <node id="7907">
        <label>ATen/Storage.h</label>
        <link refid="_storage_8h_source"/>
        <childnode refid="7888" relation="include">
        </childnode>
        <childnode refid="7908" relation="include">
        </childnode>
      </node>
      <node id="7864">
        <label>ostream</label>
      </node>
      <node id="7849">
        <label>ATen/CPUGeneral.h</label>
        <link refid="_c_p_u_general_8h_source"/>
        <childnode refid="7848" relation="include">
        </childnode>
      </node>
      <node id="7897">
        <label>ATen/Type.h</label>
      </node>
      <node id="7870">
        <label>ATen/ArrayRef.h</label>
        <link refid="_array_ref_8h_source"/>
        <childnode refid="7853" relation="include">
        </childnode>
        <childnode refid="7871" relation="include">
        </childnode>
        <childnode refid="7878" relation="include">
        </childnode>
        <childnode refid="7876" relation="include">
        </childnode>
        <childnode refid="7879" relation="include">
        </childnode>
      </node>
      <node id="7913">
        <label>ATen/TensorGeometry.h</label>
        <link refid="_tensor_geometry_8h_source"/>
        <childnode refid="7897" relation="include">
        </childnode>
        <childnode refid="7914" relation="include">
        </childnode>
      </node>
      <node id="7910">
        <label>ATen/SparseTensorRef.h</label>
        <link refid="_sparse_tensor_ref_8h_source"/>
      </node>
      <node id="7930">
        <label>ATen/TensorUtils.h</label>
        <link refid="_tensor_utils_8h_source"/>
        <childnode refid="7909" relation="include">
        </childnode>
        <childnode refid="7913" relation="include">
        </childnode>
        <childnode refid="7894" relation="include">
        </childnode>
      </node>
      <node id="7848">
        <label>ATen/ATenGeneral.h</label>
        <link refid="_a_ten_general_8h_source"/>
      </node>
      <node id="7914">
        <label>ATen/WrapDimUtils.h</label>
        <link refid="_wrap_dim_utils_8h_source"/>
        <childnode refid="7892" relation="include">
        </childnode>
        <childnode refid="7865" relation="include">
        </childnode>
      </node>
      <node id="7911">
        <label>ATen/TensorAccessor.h</label>
        <link refid="_tensor_accessor_8h_source"/>
        <childnode refid="7862" relation="include">
        </childnode>
        <childnode refid="7890" relation="include">
        </childnode>
        <childnode refid="7869" relation="include">
        </childnode>
      </node>
      <node id="7895">
        <label>typeinfo</label>
      </node>
      <node id="7902">
        <label>cstdio</label>
      </node>
      <node id="7932">
        <label>tuple</label>
      </node>
      <node id="7887">
        <label>ATen/detail/UniqueVoidPtr.h</label>
        <link refid="_unique_void_ptr_8h_source"/>
        <childnode refid="7851" relation="include">
        </childnode>
        <childnode refid="7848" relation="include">
        </childnode>
      </node>
      <node id="7879">
        <label>vector</label>
      </node>
      <node id="7923">
        <label>ATen/TensorMethods.h</label>
      </node>
      <node id="7920">
        <label>THNN/Reduction.h</label>
      </node>
      <node id="7877">
        <label>new</label>
      </node>
      <node id="7855">
        <label>utility</label>
      </node>
      <node id="7878">
        <label>array</label>
      </node>
      <node id="7865">
        <label>sstream</label>
      </node>
      <node id="7915">
        <label>ATen/Functions.h</label>
        <link refid="build_2aten_2src_2_a_ten_2_functions_8h_source"/>
        <childnode refid="7888" relation="include">
        </childnode>
        <childnode refid="7897" relation="include">
        </childnode>
        <childnode refid="7909" relation="include">
        </childnode>
        <childnode refid="7907" relation="include">
        </childnode>
        <childnode refid="7898" relation="include">
        </childnode>
        <childnode refid="7916" relation="include">
        </childnode>
        <childnode refid="7917" relation="include">
        </childnode>
        <childnode refid="7918" relation="include">
        </childnode>
        <childnode refid="7919" relation="include">
        </childnode>
        <childnode refid="7920" relation="include">
        </childnode>
      </node>
      <node id="7917">
        <label>ATen/NativeFunctions.h</label>
      </node>
      <node id="7928">
        <label>ATen/CPUApplyUtils.h</label>
        <link refid="_c_p_u_apply_utils_8h_source"/>
        <childnode refid="7929" relation="include">
        </childnode>
        <childnode refid="7930" relation="include">
        </childnode>
        <childnode refid="7881" relation="include">
        </childnode>
      </node>
      <node id="7884">
        <label>iosfwd</label>
      </node>
      <node id="7874">
        <label>cstdlib</label>
      </node>
      <node id="7886">
        <label>iostream</label>
      </node>
      <node id="7862">
        <label>cstddef</label>
      </node>
      <node id="7904">
        <label>unordered_map</label>
      </node>
      <node id="7903">
        <label>mutex</label>
      </node>
      <node id="7933">
        <label>ReduceOpsUtils.h</label>
        <link refid="_reduce_ops_utils_8h_source"/>
      </node>
      <node id="7847">
        <label>ATen/ATen.h</label>
        <link refid="_a_ten_8h_source"/>
        <childnode refid="7848" relation="include">
        </childnode>
        <childnode refid="7849" relation="include">
        </childnode>
        <childnode refid="7850" relation="include">
        </childnode>
        <childnode refid="7888" relation="include">
        </childnode>
        <childnode refid="7897" relation="include">
        </childnode>
        <childnode refid="7898" relation="include">
        </childnode>
        <childnode refid="7899" relation="include">
        </childnode>
        <childnode refid="7907" relation="include">
        </childnode>
        <childnode refid="7909" relation="include">
        </childnode>
        <childnode refid="7868" relation="include">
        </childnode>
        <childnode refid="7913" relation="include">
        </childnode>
        <childnode refid="7915" relation="include">
        </childnode>
        <childnode refid="7921" relation="include">
        </childnode>
        <childnode refid="7922" relation="include">
        </childnode>
        <childnode refid="7923" relation="include">
        </childnode>
        <childnode refid="7924" relation="include">
        </childnode>
        <childnode refid="7925" relation="include">
        </childnode>
        <childnode refid="7918" relation="include">
        </childnode>
        <childnode refid="7919" relation="include">
        </childnode>
        <childnode refid="7912" relation="include">
        </childnode>
        <childnode refid="7926" relation="include">
        </childnode>
        <childnode refid="7927" relation="include">
        </childnode>
      </node>
      <node id="7846">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/TensorCompare.cpp</label>
        <link refid="_tensor_compare_8cpp"/>
        <childnode refid="7847" relation="include">
        </childnode>
        <childnode refid="7928" relation="include">
        </childnode>
        <childnode refid="7924" relation="include">
        </childnode>
        <childnode refid="7853" relation="include">
        </childnode>
        <childnode refid="7931" relation="include">
        </childnode>
        <childnode refid="7917" relation="include">
        </childnode>
        <childnode refid="7933" relation="include">
        </childnode>
      </node>
      <node id="7901">
        <label>ATen/Registry.h</label>
        <link refid="_registry_8h_source"/>
        <childnode refid="7873" relation="include">
        </childnode>
        <childnode refid="7902" relation="include">
        </childnode>
        <childnode refid="7874" relation="include">
        </childnode>
        <childnode refid="7859" relation="include">
        </childnode>
        <childnode refid="7851" relation="include">
        </childnode>
        <childnode refid="7903" relation="include">
        </childnode>
        <childnode refid="7904" relation="include">
        </childnode>
        <childnode refid="7860" relation="include">
        </childnode>
        <childnode refid="7879" relation="include">
        </childnode>
        <childnode refid="7905" relation="include">
        </childnode>
        <childnode refid="7848" relation="include">
        </childnode>
      </node>
      <node id="7853">
        <label>ATen/Error.h</label>
        <link refid="_error_8h_source"/>
        <childnode refid="7848" relation="include">
        </childnode>
        <childnode refid="7854" relation="include">
        </childnode>
        <childnode refid="7862" relation="include">
        </childnode>
        <childnode refid="7863" relation="include">
        </childnode>
        <childnode refid="7864" relation="include">
        </childnode>
        <childnode refid="7865" relation="include">
        </childnode>
        <childnode refid="7860" relation="include">
        </childnode>
      </node>
      <node id="7919">
        <label>ATen/TensorOptions.h</label>
        <link refid="_tensor_options_8h_source"/>
        <childnode refid="7899" relation="include">
        </childnode>
        <childnode refid="7868" relation="include">
        </childnode>
        <childnode refid="7918" relation="include">
        </childnode>
        <childnode refid="7912" relation="include">
        </childnode>
        <childnode refid="7869" relation="include">
        </childnode>
        <childnode refid="7909" relation="include">
        </childnode>
        <childnode refid="7897" relation="include">
        </childnode>
        <childnode refid="7862" relation="include">
        </childnode>
        <childnode refid="7884" relation="include">
        </childnode>
        <childnode refid="7855" relation="include">
        </childnode>
      </node>
      <node id="7909">
        <label>ATen/Tensor.h</label>
        <link refid="build_2aten_2src_2_a_ten_2tensor_8h_source"/>
        <childnode refid="7898" relation="include">
        </childnode>
        <childnode refid="7888" relation="include">
        </childnode>
        <childnode refid="7869" relation="include">
        </childnode>
        <childnode refid="7910" relation="include">
        </childnode>
        <childnode refid="7907" relation="include">
        </childnode>
        <childnode refid="7911" relation="include">
        </childnode>
        <childnode refid="7891" relation="include">
        </childnode>
        <childnode refid="7892" relation="include">
        </childnode>
        <childnode refid="7894" relation="include">
        </childnode>
        <childnode refid="7868" relation="include">
        </childnode>
        <childnode refid="7912" relation="include">
        </childnode>
        <childnode refid="7854" relation="include">
        </childnode>
      </node>
      <node id="7856">
        <label>type_traits</label>
      </node>
      <node id="7912">
        <label>ATen/Layout.h</label>
        <link refid="_layout_8h_source"/>
        <childnode refid="7869" relation="include">
        </childnode>
        <childnode refid="7853" relation="include">
        </childnode>
        <childnode refid="7886" relation="include">
        </childnode>
      </node>
      <node id="7871">
        <label>ATen/SmallVector.h</label>
        <link refid="_small_vector_8h_source"/>
        <childnode refid="7872" relation="include">
        </childnode>
        <childnode refid="7873" relation="include">
        </childnode>
        <childnode refid="7858" relation="include">
        </childnode>
        <childnode refid="7862" relation="include">
        </childnode>
        <childnode refid="7874" relation="include">
        </childnode>
        <childnode refid="7875" relation="include">
        </childnode>
        <childnode refid="7857" relation="include">
        </childnode>
        <childnode refid="7876" relation="include">
        </childnode>
        <childnode refid="7851" relation="include">
        </childnode>
        <childnode refid="7877" relation="include">
        </childnode>
        <childnode refid="7856" relation="include">
        </childnode>
        <childnode refid="7855" relation="include">
        </childnode>
        <childnode refid="7848" relation="include">
        </childnode>
      </node>
      <node id="7873">
        <label>algorithm</label>
      </node>
      <node id="7898">
        <label>ATen/Generator.h</label>
        <link refid="_generator_8h_source"/>
        <childnode refid="7890" relation="include">
        </childnode>
      </node>
      <node id="7875">
        <label>cstring</label>
      </node>
      <node id="7851">
        <label>memory</label>
      </node>
      <node id="7857">
        <label>initializer_list</label>
      </node>
      <node id="7929">
        <label>ATen/Parallel.h</label>
        <link refid="_parallel_8h_source"/>
        <childnode refid="7847" relation="include">
        </childnode>
        <childnode refid="7862" relation="include">
        </childnode>
      </node>
      <node id="7921">
        <label>ATen/Formatting.h</label>
        <link refid="_formatting_8h_source"/>
        <childnode refid="7886" relation="include">
        </childnode>
        <childnode refid="7897" relation="include">
        </childnode>
        <childnode refid="7888" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceat">at</innernamespace>
    <innernamespace refid="namespaceat_1_1native">at::native</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;ATen/ATen.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ATen/CPUApplyUtils.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ATen/Dispatch.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ATen/Error.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ATen/ExpandUtils.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ATen/NativeFunctions.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ReduceOpsUtils.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>scalar_t&gt;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>where_cpu(</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structat_1_1_tensor" kindref="compound">at::Tensor</ref>&amp;<sp/>ret,</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structat_1_1_tensor" kindref="compound">at::Tensor</ref>&amp;<sp/>condition,</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structat_1_1_tensor" kindref="compound">at::Tensor</ref>&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structat_1_1_tensor" kindref="compound">at::Tensor</ref>&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/>at::CPU_tensor_apply4&lt;scalar_t,<sp/>uint8_t,<sp/>scalar_t,<sp/>scalar_t&gt;(</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret,</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>condition,</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>other,</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>[](scalar_t&amp;<sp/>ret_val,</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t&amp;<sp/>cond_val,</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>scalar_t&amp;<sp/>self_val,</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>scalar_t&amp;<sp/>other_val)<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret_val<sp/>=<sp/>cond_val<sp/>?<sp/>self_val<sp/>:<sp/>other_val;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="27"><highlight class="normal">}</highlight></codeline>
<codeline lineno="28"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceat" kindref="compound">at</ref><sp/>{<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">native<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>allclose(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/>other,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rtol,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>atol,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>equal_nan)<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>at::isclose(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>other,<sp/>rtol,<sp/>atol,<sp/>equal_nan).all().toCByte();</highlight></codeline>
<codeline lineno="34"><highlight class="normal">}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal">Tensor<sp/>isclose(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/>other,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rtol,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>atol,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>equal_nan)<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>use<sp/>bitwise<sp/>operator<sp/>overloads<sp/>once<sp/>we<sp/>add<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>actual_error<sp/>=<sp/>(</highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>-<sp/>other).abs();</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>max_error<sp/>=<sp/>atol<sp/>+<sp/>rtol<sp/>*<sp/>other.abs();</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>close<sp/>=<sp/>actual_error<sp/>&lt;=<sp/>max_error;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Handle<sp/>+/-inf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>close.__ior__(</highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>==<sp/>other);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>close.__iand__((</highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>==<sp/>INFINITY)<sp/>==<sp/>(other<sp/>==<sp/>INFINITY));</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>close.__iand__((</highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>==<sp/>-INFINITY)<sp/>==<sp/>(other<sp/>==<sp/>-INFINITY));</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(equal_nan)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>close.__ior__((</highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>!=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">).__and__((other<sp/>!=<sp/>other)));</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>close;</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_nonzero(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.numel();</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>AT_ASSERT(n<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>AT_ERROR(</highlight><highlight class="stringliteral">&quot;bool<sp/>value<sp/>of<sp/>Tensor<sp/>with<sp/>no<sp/>values<sp/>is<sp/>ambiguous&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>AT_ERROR(</highlight><highlight class="stringliteral">&quot;bool<sp/>value<sp/>of<sp/>Tensor<sp/>with<sp/>more<sp/>than<sp/>one<sp/>value<sp/>is<sp/>ambiguous&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>Scalar<sp/>localScalar<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.pImpl-&gt;localScalar();</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(localScalar.isFloatingPoint())<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>localScalar.to&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;()<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(localScalar.isIntegral()){</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>localScalar.to&lt;int64_t&gt;()<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>AT_ERROR(</highlight><highlight class="stringliteral">&quot;expected<sp/>non-Tensor<sp/>backed<sp/>scalar&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal">Tensor<sp/>where(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/>condition,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(condition.type().scalarType()<sp/>!=<sp/>ScalarType::Byte)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>AT_ERROR(</highlight><highlight class="stringliteral">&quot;Expected<sp/>condition<sp/>to<sp/>have<sp/>ScalarType<sp/>Byte,<sp/>but<sp/>got<sp/>ScalarType<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>toString(condition.type().scalarType()));</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>Tensor<sp/>b_condition,<sp/>b_self,<sp/>b_other;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>std::tie(b_condition,<sp/>b_self,<sp/>b_other)<sp/>=<sp/>expand_outplace(condition,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>other,<sp/></highlight><highlight class="stringliteral">&quot;where&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>at::_s_where(b_condition,<sp/>b_self,<sp/>b_other);</highlight></codeline>
<codeline lineno="79"><highlight class="normal">}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal">Tensor<sp/>_s_where_cpu(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/>condition,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>Tensor<sp/>ret<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.type().tensor(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.sizes());</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>AT_DISPATCH_ALL_TYPES(ret.type(),<sp/></highlight><highlight class="stringliteral">&quot;where&quot;</highlight><highlight class="normal">,<sp/>[&amp;]<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>where_cpu&lt;scalar_t&gt;(ret,<sp/>condition,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>other);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="87"><highlight class="normal">}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal">std::tuple&lt;Tensor,<sp/>Tensor&gt;<sp/>kthvalue(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>int64_t<sp/>k,<sp/>int64_t<sp/>dim,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>keepdim)<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>Tensor<sp/>values<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.type().tensor();</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>Tensor<sp/>indices<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.type().toScalarType(kLong).tensor();</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>at::native::kthvalue_out(values,<sp/>indices,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>k,<sp/>dim,<sp/>keepdim);</highlight></codeline>
<codeline lineno="93"><highlight class="normal">}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal">std::tuple&lt;Tensor<sp/>&amp;,Tensor<sp/>&amp;&gt;<sp/>kthvalue_out(Tensor&amp;<sp/>values,<sp/>Tensor&amp;<sp/>indices,</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>int64_t<sp/>k,<sp/>int64_t<sp/>dim,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>keepdim)<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>AT_CHECK(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.type().backend()<sp/>==<sp/>Backend::CPU<sp/>||<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.type().backend()<sp/>==<sp/>Backend::CUDA,</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;kthvalue<sp/>only<sp/>supports<sp/>CPU<sp/>AND<sp/>CUDA<sp/>backend,<sp/>got:<sp/>&quot;</highlight><highlight class="normal">,<sp/>at::toString(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.type().backend()));</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>dim<sp/>=<sp/>maybe_wrap_dim(dim,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.dim());</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_dimreduce_return_trivial_no_ident(values,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>dim,<sp/>keepdim,<sp/></highlight><highlight class="stringliteral">&quot;kthvalue&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>AT_ASSERT(values.dim()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>indices.resize_({}).fill_(0);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::forward_as_tuple(values,<sp/>indices);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>at::_th_kthvalue_out(values,<sp/>indices,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>k,<sp/>dim,<sp/>keepdim);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal">std::tuple&lt;Tensor,<sp/>Tensor&gt;<sp/>median(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>int64_t<sp/>dim,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>keepdim)<sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>Tensor<sp/>values<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.type().tensor();</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>Tensor<sp/>indices<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.type().toScalarType(kLong).tensor();</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>at::native::median_out(values,<sp/>indices,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>dim,<sp/>keepdim);</highlight></codeline>
<codeline lineno="113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal">std::tuple&lt;Tensor<sp/>&amp;,Tensor<sp/>&amp;&gt;<sp/>median_out(Tensor&amp;<sp/>values,<sp/>Tensor&amp;<sp/>indices,</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>int64_t<sp/>dim,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>keepdim)<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>AT_CHECK(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.type().backend()<sp/>==<sp/>Backend::CPU<sp/>||<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.type().backend()<sp/>==<sp/>Backend::CUDA,</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;median<sp/>only<sp/>supports<sp/>CPU<sp/>AND<sp/>CUDA<sp/>backend,<sp/>got:<sp/>&quot;</highlight><highlight class="normal">,<sp/>at::toString(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.type().backend()));</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>dim<sp/>=<sp/>maybe_wrap_dim(dim,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.dim());</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_dimreduce_return_trivial_no_ident(values,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>dim,<sp/>keepdim,<sp/></highlight><highlight class="stringliteral">&quot;median&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>AT_ASSERT(values.dim()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>indices.resize_({}).fill_(0);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::forward_as_tuple(values,<sp/>indices);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>at::_th_median_out(values,<sp/>indices,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>dim,<sp/>keepdim);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal">}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal">std::tuple&lt;Tensor,<sp/>Tensor&gt;<sp/>mode(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>int64_t<sp/>dim,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>keepdim)<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>Tensor<sp/>values<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.type().tensor();</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>Tensor<sp/>indices<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.type().toScalarType(kLong).tensor();</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>at::native::mode_out(values,<sp/>indices,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>dim,<sp/>keepdim);</highlight></codeline>
<codeline lineno="133"><highlight class="normal">}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal">std::tuple&lt;Tensor<sp/>&amp;,Tensor<sp/>&amp;&gt;<sp/>mode_out(Tensor&amp;<sp/>values,<sp/>Tensor&amp;<sp/>indices,</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>int64_t<sp/>dim,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>keepdim)<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>AT_CHECK(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.type().backend()<sp/>==<sp/>Backend::CPU<sp/>||<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.type().backend()<sp/>==<sp/>Backend::CUDA,</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;mode<sp/>only<sp/>supports<sp/>CPU<sp/>AND<sp/>CUDA<sp/>backend,<sp/>got:<sp/>&quot;</highlight><highlight class="normal">,<sp/>at::toString(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.type().backend()));</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>dim<sp/>=<sp/>maybe_wrap_dim(dim,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.dim());</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_dimreduce_return_trivial_no_ident(values,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>dim,<sp/>keepdim,<sp/></highlight><highlight class="stringliteral">&quot;mode&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>AT_ASSERT(values.dim()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>indices.resize_({}).fill_(0);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::forward_as_tuple(values,<sp/>indices);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>at::_th_mode_out(values,<sp/>indices,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>dim,<sp/>keepdim);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal">std::tuple&lt;Tensor,<sp/>Tensor&gt;<sp/>max(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>int64_t<sp/>dim,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>keepdim)<sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>Tensor<sp/>max<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.type().tensor();</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>Tensor<sp/>max_indices<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.type().toScalarType(kLong).tensor();</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>at::native::max_out(max,<sp/>max_indices,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>dim,<sp/>keepdim);</highlight></codeline>
<codeline lineno="153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal">std::tuple&lt;Tensor<sp/>&amp;,Tensor<sp/>&amp;&gt;<sp/>max_out(Tensor&amp;<sp/>max,<sp/>Tensor&amp;<sp/>max_indices,</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>int64_t<sp/>dim,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>keepdim)<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>AT_CHECK(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.type().backend()<sp/>==<sp/>Backend::CPU<sp/>||<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.type().backend()<sp/>==<sp/>Backend::CUDA,</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;max<sp/>only<sp/>supports<sp/>CPU<sp/>AND<sp/>CUDA<sp/>backend,<sp/>got:<sp/>&quot;</highlight><highlight class="normal">,<sp/>at::toString(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.type().backend()));</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>dim<sp/>=<sp/>maybe_wrap_dim(dim,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.dim());</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_dimreduce_return_trivial_no_ident(max,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>dim,<sp/>keepdim,<sp/></highlight><highlight class="stringliteral">&quot;max&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>AT_ASSERT(max.dim()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>max_indices.resize_({}).fill_(0);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::forward_as_tuple(max,<sp/>max_indices);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>at::_th_max_out(max,<sp/>max_indices,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>dim,<sp/>keepdim);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal">}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal">Tensor<sp/>max_values(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>int64_t<sp/>dim,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>keepdim)<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::get&lt;0&gt;(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.max(dim,<sp/>keepdim));</highlight></codeline>
<codeline lineno="171"><highlight class="normal">}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal">std::tuple&lt;Tensor,<sp/>Tensor&gt;<sp/>min(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>int64_t<sp/>dim,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>keepdim)<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>Tensor<sp/>min<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.type().tensor();</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>Tensor<sp/>min_indices<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.type().toScalarType(kLong).tensor();</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>at::native::min_out(min,<sp/>min_indices,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>dim,<sp/>keepdim);</highlight></codeline>
<codeline lineno="177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal">std::tuple&lt;Tensor<sp/>&amp;,Tensor<sp/>&amp;&gt;<sp/>min_out(Tensor&amp;<sp/>min,<sp/>Tensor&amp;<sp/>min_indices,</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>int64_t<sp/>dim,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>keepdim)<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>AT_CHECK(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.type().backend()<sp/>==<sp/>Backend::CPU<sp/>||<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.type().backend()<sp/>==<sp/>Backend::CUDA,</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;min<sp/>only<sp/>supports<sp/>CPU<sp/>AND<sp/>CUDA<sp/>backend,<sp/>got:<sp/>&quot;</highlight><highlight class="normal">,<sp/>at::toString(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.type().backend()));</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>dim<sp/>=<sp/>maybe_wrap_dim(dim,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.dim());</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_dimreduce_return_trivial_no_ident(min,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>dim,<sp/>keepdim,<sp/></highlight><highlight class="stringliteral">&quot;min&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>AT_ASSERT(min.dim()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>min_indices.resize_({}).fill_(0);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::forward_as_tuple(min,<sp/>min_indices);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>at::_th_min_out(min,<sp/>min_indices,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>dim,<sp/>keepdim);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal">}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal">Tensor<sp/>min_values(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>int64_t<sp/>dim,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>keepdim)<sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::get&lt;0&gt;(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.min(dim,<sp/>keepdim));</highlight></codeline>
<codeline lineno="195"><highlight class="normal">}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="comment">//<sp/>argmax<sp/>and<sp/>argmin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal">Tensor<sp/>argmax(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>int64_t<sp/>dim,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>keepdim)<sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::get&lt;1&gt;(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.max(dim,<sp/>keepdim));</highlight></codeline>
<codeline lineno="201"><highlight class="normal">}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal">Tensor<sp/>argmax(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::get&lt;1&gt;(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.reshape({-1}).max(</highlight><highlight class="comment">/*dim=*/</highlight><highlight class="normal">0));</highlight></codeline>
<codeline lineno="205"><highlight class="normal">}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal">Tensor<sp/>argmin(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>int64_t<sp/>dim,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>keepdim)<sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::get&lt;1&gt;(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.min(dim,<sp/>keepdim));</highlight></codeline>
<codeline lineno="209"><highlight class="normal">}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal">Tensor<sp/>argmin(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::get&lt;1&gt;(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.reshape({-1}).min(</highlight><highlight class="comment">/*dim=*/</highlight><highlight class="normal">0));</highlight></codeline>
<codeline lineno="213"><highlight class="normal">}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="comment">//<sp/>`argmin`<sp/>and<sp/>`argmax`<sp/>are<sp/>exposed<sp/>in<sp/>C++<sp/>but<sp/>not<sp/>in<sp/>Python,<sp/>where<sp/>we<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="comment">//<sp/>expose<sp/>`_argmin`<sp/>and<sp/>`_argmax`<sp/>(which<sp/>call<sp/>the<sp/>first<sp/>versions).<sp/>In<sp/>Python,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="comment">//<sp/>we<sp/>then<sp/>define<sp/>our<sp/>own<sp/>`argmax`<sp/>and<sp/>`argmin`<sp/>that<sp/>handle<sp/>passing<sp/>`dim=None`,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="comment">//<sp/>which<sp/>gets<sp/>the<sp/>argmax/argmin<sp/>of<sp/>the<sp/>flattened<sp/>array.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal">Tensor<sp/>_argmax(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>int64_t<sp/>dim,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>keepdim)<sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>at::argmax(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>dim,<sp/>keepdim);</highlight></codeline>
<codeline lineno="222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal">Tensor<sp/>_argmin(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tensor&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>int64_t<sp/>dim,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>keepdim)<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>at::argmin(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>dim,<sp/>keepdim);</highlight></codeline>
<codeline lineno="226"><highlight class="normal">}</highlight></codeline>
<codeline lineno="227"><highlight class="normal">}}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>at::native</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/TensorCompare.cpp"/>
  </compounddef>
</doxygen>
