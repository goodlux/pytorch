<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="_dispatch_8h" kind="file" language="C++">
    <compoundname>Dispatch.h</compoundname>
    <includes refid="_error_8h" local="no">ATen/Error.h</includes>
    <includes refid="_half_8h" local="no">ATen/Half.h</includes>
    <includes local="no">ATen/Type.h</includes>
    <includedby refid="_a_ten_8h" local="yes">/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/ATen.h</includedby>
    <includedby refid="_activation_8cpp" local="yes">/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/Activation.cpp</includedby>
    <includedby refid="_reduce_ops_kernel_8cpp" local="yes">/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/ReduceOpsKernel.cpp</includedby>
    <includedby refid="_soft_max_kernel_8cpp" local="yes">/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/SoftMaxKernel.cpp</includedby>
    <includedby refid="_unary_ops_kernel_8cpp" local="yes">/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/UnaryOpsKernel.cpp</includedby>
    <includedby refid="_distributions_8cpp" local="yes">/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/Distributions.cpp</includedby>
    <includedby refid="_gesv_8cpp" local="yes">/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/Gesv.cpp</includedby>
    <includedby refid="_reduce_ops_8cpp" local="yes">/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/ReduceOps.cpp</includedby>
    <includedby refid="_summary_ops_8cpp" local="yes">/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/SummaryOps.cpp</includedby>
    <includedby refid="_tensor_compare_8cpp" local="yes">/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/TensorCompare.cpp</includedby>
    <includedby refid="_tensor_factories_8cpp" local="yes">/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/TensorFactories.cpp</includedby>
    <includedby refid="_type_properties_8cpp" local="yes">/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/TypeProperties.cpp</includedby>
    <includedby refid="_unary_ops_8cpp" local="yes">/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/UnaryOps.cpp</includedby>
    <includedby refid="_unique_8cpp" local="yes">/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/Unique.cpp</includedby>
    <includedby refid="scalar__test_8cpp" local="yes">/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/test/scalar_test.cpp</includedby>
    <incdepgraph>
      <node id="3313">
        <label>ATen/optional.h</label>
        <link refid="optional_8h_source"/>
        <childnode refid="3314" relation="include">
        </childnode>
        <childnode refid="3315" relation="include">
        </childnode>
        <childnode refid="3316" relation="include">
        </childnode>
        <childnode refid="3317" relation="include">
        </childnode>
        <childnode refid="3318" relation="include">
        </childnode>
        <childnode refid="3319" relation="include">
        </childnode>
        <childnode refid="3320" relation="include">
        </childnode>
      </node>
      <node id="3318">
        <label>functional</label>
      </node>
      <node id="3326">
        <label>limits</label>
      </node>
      <node id="3327">
        <label>cstdint</label>
      </node>
      <node id="3328">
        <label>cmath</label>
      </node>
      <node id="3317">
        <label>cassert</label>
      </node>
      <node id="3330">
        <label>Half-inl.h</label>
        <link refid="_half-inl_8h_source"/>
        <childnode refid="3312" relation="include">
        </childnode>
        <childnode refid="3331" relation="include">
        </childnode>
        <childnode refid="3326" relation="include">
        </childnode>
      </node>
      <node id="3320">
        <label>stdexcept</label>
      </node>
      <node id="3325">
        <label>ATen/Half.h</label>
        <link refid="_half_8h_source"/>
        <childnode refid="3312" relation="include">
        </childnode>
        <childnode refid="3326" relation="include">
        </childnode>
        <childnode refid="3319" relation="include">
        </childnode>
        <childnode refid="3327" relation="include">
        </childnode>
        <childnode refid="3320" relation="include">
        </childnode>
        <childnode refid="3314" relation="include">
        </childnode>
        <childnode refid="3328" relation="include">
        </childnode>
        <childnode refid="3329" relation="include">
        </childnode>
        <childnode refid="3330" relation="include">
        </childnode>
      </node>
      <node id="3319">
        <label>string</label>
      </node>
      <node id="3322">
        <label>exception</label>
      </node>
      <node id="3310">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/Dispatch.h</label>
        <link refid="_dispatch_8h"/>
        <childnode refid="3311" relation="include">
        </childnode>
        <childnode refid="3325" relation="include">
        </childnode>
        <childnode refid="3332" relation="include">
        </childnode>
      </node>
      <node id="3323">
        <label>ostream</label>
      </node>
      <node id="3332">
        <label>ATen/Type.h</label>
      </node>
      <node id="3312">
        <label>ATen/ATenGeneral.h</label>
        <link refid="_a_ten_general_8h_source"/>
      </node>
      <node id="3314">
        <label>utility</label>
      </node>
      <node id="3324">
        <label>sstream</label>
      </node>
      <node id="3329">
        <label>iosfwd</label>
      </node>
      <node id="3321">
        <label>cstddef</label>
      </node>
      <node id="3311">
        <label>ATen/Error.h</label>
        <link refid="_error_8h_source"/>
        <childnode refid="3312" relation="include">
        </childnode>
        <childnode refid="3313" relation="include">
        </childnode>
        <childnode refid="3321" relation="include">
        </childnode>
        <childnode refid="3322" relation="include">
        </childnode>
        <childnode refid="3323" relation="include">
        </childnode>
        <childnode refid="3324" relation="include">
        </childnode>
        <childnode refid="3319" relation="include">
        </childnode>
      </node>
      <node id="3315">
        <label>type_traits</label>
      </node>
      <node id="3331">
        <label>cstring</label>
      </node>
      <node id="3316">
        <label>initializer_list</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3343">
        <label>/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/modules/rnn.h</label>
        <link refid="rnn_8h_source"/>
        <childnode refid="3338" relation="include">
        </childnode>
      </node>
      <node id="3368">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/UnaryOpsKernel.h</label>
        <link refid="_unary_ops_kernel_8h_source"/>
      </node>
      <node id="3340">
        <label>/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/torch.h</label>
        <link refid="torch_8h_source"/>
      </node>
      <node id="3357">
        <label>/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/tensor.h</label>
        <link refid="torch_2csrc_2api_2include_2torch_2tensor_8h_source"/>
        <childnode refid="3336" relation="include">
        </childnode>
        <childnode refid="3358" relation="include">
        </childnode>
        <childnode refid="3360" relation="include">
        </childnode>
        <childnode refid="3335" relation="include">
        </childnode>
        <childnode refid="3347" relation="include">
        </childnode>
        <childnode refid="3337" relation="include">
        </childnode>
        <childnode refid="3341" relation="include">
        </childnode>
        <childnode refid="3342" relation="include">
        </childnode>
        <childnode refid="3344" relation="include">
        </childnode>
        <childnode refid="3345" relation="include">
        </childnode>
        <childnode refid="3346" relation="include">
        </childnode>
        <childnode refid="3343" relation="include">
        </childnode>
        <childnode refid="3348" relation="include">
        </childnode>
        <childnode refid="3349" relation="include">
        </childnode>
        <childnode refid="3361" relation="include">
        </childnode>
        <childnode refid="3350" relation="include">
        </childnode>
        <childnode refid="3359" relation="include">
        </childnode>
        <childnode refid="3356" relation="include">
        </childnode>
        <childnode refid="3352" relation="include">
        </childnode>
        <childnode refid="3362" relation="include">
        </childnode>
        <childnode refid="3340" relation="include">
        </childnode>
      </node>
      <node id="3337">
        <label>/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/modules/batchnorm.h</label>
        <link refid="batchnorm_8h_source"/>
        <childnode refid="3338" relation="include">
        </childnode>
      </node>
      <node id="3370">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cuda/CuFFTUtils.h</label>
        <link refid="_cu_f_f_t_utils_8h_source"/>
        <childnode refid="3369" relation="include">
        </childnode>
      </node>
      <node id="3356">
        <label>/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/optim/sgd.h</label>
        <link refid="sgd_8h_source"/>
        <childnode refid="3351" relation="include">
        </childnode>
      </node>
      <node id="3359">
        <label>/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/optim/optimizer.h</label>
        <link refid="optimizer_8h_source"/>
        <childnode refid="3350" relation="include">
        </childnode>
        <childnode refid="3353" relation="include">
        </childnode>
        <childnode refid="3354" relation="include">
        </childnode>
        <childnode refid="3355" relation="include">
        </childnode>
        <childnode refid="3356" relation="include">
        </childnode>
        <childnode refid="3351" relation="include">
        </childnode>
      </node>
      <node id="3376">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/cpu/vml.h</label>
        <link refid="vml_8h_source"/>
      </node>
      <node id="3348">
        <label>/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/modules/sequential.h</label>
        <link refid="sequential_8h_source"/>
        <childnode refid="3338" relation="include">
        </childnode>
      </node>
      <node id="3353">
        <label>/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/optim/adam.h</label>
        <link refid="adam_8h_source"/>
        <childnode refid="3351" relation="include">
        </childnode>
      </node>
      <node id="3358">
        <label>/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/cursor.h</label>
        <link refid="cursor_8h_source"/>
        <childnode refid="3335" relation="include">
        </childnode>
        <childnode refid="3339" relation="include">
        </childnode>
        <childnode refid="3359" relation="include">
        </childnode>
      </node>
      <node id="3333">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/Dispatch.h</label>
        <link refid="_dispatch_8h"/>
        <childnode refid="3334" relation="include">
        </childnode>
      </node>
      <node id="3360">
        <label>/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/init.h</label>
        <link refid="init_8h_source"/>
      </node>
      <node id="3361">
        <label>/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/pimpl.h</label>
        <link refid="pimpl_8h_source"/>
        <childnode refid="3335" relation="include">
        </childnode>
        <childnode refid="3347" relation="include">
        </childnode>
        <childnode refid="3337" relation="include">
        </childnode>
        <childnode refid="3341" relation="include">
        </childnode>
        <childnode refid="3342" relation="include">
        </childnode>
        <childnode refid="3344" relation="include">
        </childnode>
        <childnode refid="3345" relation="include">
        </childnode>
        <childnode refid="3346" relation="include">
        </childnode>
        <childnode refid="3343" relation="include">
        </childnode>
        <childnode refid="3348" relation="include">
        </childnode>
        <childnode refid="3349" relation="include">
        </childnode>
        <childnode refid="3339" relation="include">
        </childnode>
        <childnode refid="3353" relation="include">
        </childnode>
        <childnode refid="3356" relation="include">
        </childnode>
      </node>
      <node id="3362">
        <label>/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/tensor_list_view.h</label>
        <link refid="tensor__list__view_8h_source"/>
        <childnode refid="3340" relation="include">
        </childnode>
      </node>
      <node id="3335">
        <label>/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/module.h</label>
        <link refid="module_8h_source"/>
        <childnode refid="3336" relation="include">
        </childnode>
        <childnode refid="3347" relation="include">
        </childnode>
        <childnode refid="3346" relation="include">
        </childnode>
        <childnode refid="3348" relation="include">
        </childnode>
        <childnode refid="3349" relation="include">
        </childnode>
        <childnode refid="3339" relation="include">
        </childnode>
        <childnode refid="3350" relation="include">
        </childnode>
        <childnode refid="3353" relation="include">
        </childnode>
        <childnode refid="3354" relation="include">
        </childnode>
        <childnode refid="3355" relation="include">
        </childnode>
        <childnode refid="3356" relation="include">
        </childnode>
      </node>
      <node id="3338">
        <label>/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/modules.h</label>
        <link refid="modules_8h_source"/>
        <childnode refid="3339" relation="include">
        </childnode>
      </node>
      <node id="3344">
        <label>/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/modules/embedding.h</label>
        <link refid="embedding_8h_source"/>
        <childnode refid="3338" relation="include">
        </childnode>
      </node>
      <node id="3374">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/TensorTransformations.h</label>
        <link refid="_tensor_transformations_8h_source"/>
      </node>
      <node id="3339">
        <label>/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn.h</label>
        <link refid="nn_8h_source"/>
        <childnode refid="3340" relation="include">
        </childnode>
      </node>
      <node id="3369">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cuda/CuFFTPlanCache.h</label>
        <link refid="_cu_f_f_t_plan_cache_8h_source"/>
      </node>
      <node id="3341">
        <label>/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/modules/conv.h</label>
        <link refid="conv_8h_source"/>
        <childnode refid="3338" relation="include">
        </childnode>
      </node>
      <node id="3355">
        <label>/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/optim/rmsprop.h</label>
        <link refid="rmsprop_8h_source"/>
        <childnode refid="3351" relation="include">
        </childnode>
      </node>
      <node id="3351">
        <label>/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/optim.h</label>
        <link refid="optim_8h_source"/>
        <childnode refid="3352" relation="include">
        </childnode>
        <childnode refid="3340" relation="include">
        </childnode>
      </node>
      <node id="3378">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/test/test_seed.h</label>
        <link refid="test__seed_8h_source"/>
      </node>
      <node id="3364">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/cudnn/Utils.h</label>
        <link refid="aten_2src_2_a_ten_2cudnn_2utils_8h_source"/>
      </node>
      <node id="3347">
        <label>/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/modules/any.h</label>
        <link refid="any_8h_source"/>
        <childnode refid="3348" relation="include">
        </childnode>
        <childnode refid="3338" relation="include">
        </childnode>
      </node>
      <node id="3363">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/cudnn/Descriptors.h</label>
        <link refid="cudnn_2_descriptors_8h_source"/>
      </node>
      <node id="3365">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/DLConvertor.h</label>
        <link refid="_d_l_convertor_8h_source"/>
      </node>
      <node id="3373">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/sparse/SparseUtils.h</label>
        <link refid="_sparse_utils_8h_source"/>
      </node>
      <node id="3352">
        <label>/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/serialization.h</label>
        <link refid="serialization_8h_source"/>
        <childnode refid="3340" relation="include">
        </childnode>
      </node>
      <node id="3349">
        <label>/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/parallel/data_parallel.h</label>
        <link refid="data__parallel_8h_source"/>
      </node>
      <node id="3377">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/CPUApplyUtils.h</label>
        <link refid="_c_p_u_apply_utils_8h_source"/>
      </node>
      <node id="3350">
        <label>/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/optim/adagrad.h</label>
        <link refid="adagrad_8h_source"/>
        <childnode refid="3351" relation="include">
        </childnode>
      </node>
      <node id="3342">
        <label>/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/modules/dropout.h</label>
        <link refid="dropout_8h_source"/>
        <childnode refid="3343" relation="include">
        </childnode>
        <childnode refid="3338" relation="include">
        </childnode>
      </node>
      <node id="3366">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/ReduceOpsKernel.h</label>
        <link refid="_reduce_ops_kernel_8h_source"/>
      </node>
      <node id="3371">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/Gesv.h</label>
        <link refid="_gesv_8h_source"/>
      </node>
      <node id="3336">
        <label>/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/cloneable.h</label>
        <link refid="cloneable_8h_source"/>
        <childnode refid="3337" relation="include">
        </childnode>
        <childnode refid="3341" relation="include">
        </childnode>
        <childnode refid="3342" relation="include">
        </childnode>
        <childnode refid="3344" relation="include">
        </childnode>
        <childnode refid="3345" relation="include">
        </childnode>
        <childnode refid="3346" relation="include">
        </childnode>
        <childnode refid="3343" relation="include">
        </childnode>
        <childnode refid="3339" relation="include">
        </childnode>
      </node>
      <node id="3334">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/ATen.h</label>
        <link refid="_a_ten_8h_source"/>
        <childnode refid="3335" relation="include">
        </childnode>
        <childnode refid="3343" relation="include">
        </childnode>
        <childnode refid="3350" relation="include">
        </childnode>
        <childnode refid="3353" relation="include">
        </childnode>
        <childnode refid="3354" relation="include">
        </childnode>
        <childnode refid="3355" relation="include">
        </childnode>
        <childnode refid="3356" relation="include">
        </childnode>
        <childnode refid="3357" relation="include">
        </childnode>
        <childnode refid="3363" relation="include">
        </childnode>
        <childnode refid="3364" relation="include">
        </childnode>
        <childnode refid="3365" relation="include">
        </childnode>
        <childnode refid="3366" relation="include">
        </childnode>
        <childnode refid="3367" relation="include">
        </childnode>
        <childnode refid="3368" relation="include">
        </childnode>
        <childnode refid="3369" relation="include">
        </childnode>
        <childnode refid="3370" relation="include">
        </childnode>
        <childnode refid="3371" relation="include">
        </childnode>
        <childnode refid="3372" relation="include">
        </childnode>
        <childnode refid="3373" relation="include">
        </childnode>
        <childnode refid="3374" relation="include">
        </childnode>
        <childnode refid="3375" relation="include">
        </childnode>
        <childnode refid="3378" relation="include">
        </childnode>
      </node>
      <node id="3345">
        <label>/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/modules/functional.h</label>
        <link refid="torch_2csrc_2api_2include_2torch_2nn_2modules_2functional_8h_source"/>
        <childnode refid="3338" relation="include">
        </childnode>
      </node>
      <node id="3372">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/LinearAlgebraUtils.h</label>
        <link refid="_linear_algebra_utils_8h_source"/>
      </node>
      <node id="3367">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/native/cpu/SoftmaxKernel.h</label>
        <link refid="_softmax_kernel_8h_source"/>
      </node>
      <node id="3346">
        <label>/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/nn/modules/linear.h</label>
        <link refid="linear_8h_source"/>
        <childnode refid="3338" relation="include">
        </childnode>
      </node>
      <node id="3375">
        <label>/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/Parallel.h</label>
        <link refid="_parallel_8h_source"/>
        <childnode refid="3349" relation="include">
        </childnode>
        <childnode refid="3376" relation="include">
        </childnode>
        <childnode refid="3377" relation="include">
        </childnode>
      </node>
      <node id="3354">
        <label>/Users/robkunkle/fork/goodlux/pytorch/torch/csrc/api/include/torch/optim/lbfgs.h</label>
        <link refid="lbfgs_8h_source"/>
        <childnode refid="3351" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="_dispatch_8h_1a602bf4cd56e9a37f8c757f7e7bd6ac94" prot="public" static="no">
        <name>AT_PRIVATE_CASE_TYPE</name>
        <param><defname>enum_type</defname></param>
        <param><defname>type</defname></param>
        <param><defname>...</defname></param>
        <initializer>case enum_type: {                                \
    using scalar_t = type;                         \
    return __VA_ARGS__();                          \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/Dispatch.h" line="7" column="9" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/Dispatch.h" bodystart="7" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_dispatch_8h_1a40519f2202971788209b94327432d13b" prot="public" static="no">
        <name>AT_DISPATCH_FLOATING_TYPES</name>
        <param><defname>TYPE</defname></param>
        <param><defname>NAME</defname></param>
        <param><defname>...</defname></param>
        <initializer>[&amp;] {                                                                       \
    const <ref refid="structat_1_1_type" kindref="compound">at::Type</ref>&amp; the_type = TYPE;                                          \
    switch (the_type.scalarType()) {                                          \
      AT_PRIVATE_CASE_TYPE(at::ScalarType::Double, double, __VA_ARGS__)       \
      AT_PRIVATE_CASE_TYPE(at::ScalarType::Float, float, __VA_ARGS__)         \
      default:                                                                \
        AT_ERROR(#NAME, &quot; not implemented for &apos;&quot;, the_type.toString(), &quot;&apos;&quot;); \
    }                                                                         \
  }()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/Dispatch.h" line="13" column="9" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/Dispatch.h" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_dispatch_8h_1ae7a0feed13d7e74d1d87ea59e878e76e" prot="public" static="no">
        <name>AT_DISPATCH_FLOATING_TYPES_AND_HALF</name>
        <param><defname>TYPE</defname></param>
        <param><defname>NAME</defname></param>
        <param><defname>...</defname></param>
        <initializer>[&amp;] {                                                                       \
    const <ref refid="structat_1_1_type" kindref="compound">at::Type</ref>&amp; the_type = TYPE;                                          \
    switch (the_type.scalarType()) {                                          \
      AT_PRIVATE_CASE_TYPE(at::ScalarType::Double, double, __VA_ARGS__)       \
      AT_PRIVATE_CASE_TYPE(at::ScalarType::Float, float, __VA_ARGS__)         \
      AT_PRIVATE_CASE_TYPE(at::ScalarType::Half, Half, __VA_ARGS__)           \
      default:                                                                \
        AT_ERROR(#NAME, &quot; not implemented for &apos;&quot;, the_type.toString(), &quot;&apos;&quot;); \
    }                                                                         \
  }()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/Dispatch.h" line="24" column="9" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/Dispatch.h" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_dispatch_8h_1a738e5ad93b576df1757c726c98c10aeb" prot="public" static="no">
        <name>AT_DISPATCH_INTEGRAL_TYPES</name>
        <param><defname>TYPE</defname></param>
        <param><defname>NAME</defname></param>
        <param><defname>...</defname></param>
        <initializer>[&amp;] {                                                                       \
    const <ref refid="structat_1_1_type" kindref="compound">at::Type</ref>&amp; the_type = TYPE;                                          \
    switch (the_type.scalarType()) {                                          \
      AT_PRIVATE_CASE_TYPE(at::ScalarType::Byte, uint8_t, __VA_ARGS__)        \
      AT_PRIVATE_CASE_TYPE(at::ScalarType::Char, int8_t, __VA_ARGS__)         \
      AT_PRIVATE_CASE_TYPE(at::ScalarType::Int, int32_t, __VA_ARGS__)         \
      AT_PRIVATE_CASE_TYPE(at::ScalarType::Long, int64_t, __VA_ARGS__)        \
      AT_PRIVATE_CASE_TYPE(at::ScalarType::Short, int16_t, __VA_ARGS__)       \
      default:                                                                \
        AT_ERROR(#NAME, &quot; not implemented for &apos;&quot;, the_type.toString(), &quot;&apos;&quot;); \
    }                                                                         \
  }()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/Dispatch.h" line="36" column="9" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/Dispatch.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_dispatch_8h_1aaa9898cf09c64f80796228eef3bc8940" prot="public" static="no">
        <name>AT_DISPATCH_ALL_TYPES</name>
        <param><defname>TYPE</defname></param>
        <param><defname>NAME</defname></param>
        <param><defname>...</defname></param>
        <initializer>[&amp;] {                                                                       \
    const <ref refid="structat_1_1_type" kindref="compound">at::Type</ref>&amp; the_type = TYPE;                                          \
    switch (the_type.scalarType()) {                                          \
      AT_PRIVATE_CASE_TYPE(at::ScalarType::Byte, uint8_t, __VA_ARGS__)        \
      AT_PRIVATE_CASE_TYPE(at::ScalarType::Char, int8_t, __VA_ARGS__)         \
      AT_PRIVATE_CASE_TYPE(at::ScalarType::Double, double, __VA_ARGS__)       \
      AT_PRIVATE_CASE_TYPE(at::ScalarType::Float, float, __VA_ARGS__)         \
      AT_PRIVATE_CASE_TYPE(at::ScalarType::Int, int32_t, __VA_ARGS__)         \
      AT_PRIVATE_CASE_TYPE(at::ScalarType::Long, int64_t, __VA_ARGS__)        \
      AT_PRIVATE_CASE_TYPE(at::ScalarType::Short, int16_t, __VA_ARGS__)       \
      default:                                                                \
        AT_ERROR(#NAME, &quot; not implemented for &apos;&quot;, the_type.toString(), &quot;&apos;&quot;); \
    }                                                                         \
  }()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/Dispatch.h" line="50" column="9" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/Dispatch.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_dispatch_8h_1a05e1d5c696f8405eb9fa0d7919b84288" prot="public" static="no">
        <name>AT_DISPATCH_ALL_TYPES_AND_HALF</name>
        <param><defname>TYPE</defname></param>
        <param><defname>NAME</defname></param>
        <param><defname>...</defname></param>
        <initializer>[&amp;] {                                                                       \
    const <ref refid="structat_1_1_type" kindref="compound">at::Type</ref>&amp; the_type = TYPE;                                          \
    switch (the_type.scalarType()) {                                          \
      AT_PRIVATE_CASE_TYPE(at::ScalarType::Byte, uint8_t, __VA_ARGS__)        \
      AT_PRIVATE_CASE_TYPE(at::ScalarType::Char, int8_t, __VA_ARGS__)         \
      AT_PRIVATE_CASE_TYPE(at::ScalarType::Double, double, __VA_ARGS__)       \
      AT_PRIVATE_CASE_TYPE(at::ScalarType::Float, float, __VA_ARGS__)         \
      AT_PRIVATE_CASE_TYPE(at::ScalarType::Int, int32_t, __VA_ARGS__)         \
      AT_PRIVATE_CASE_TYPE(at::ScalarType::Long, int64_t, __VA_ARGS__)        \
      AT_PRIVATE_CASE_TYPE(at::ScalarType::Short, int16_t, __VA_ARGS__)       \
      AT_PRIVATE_CASE_TYPE(at::ScalarType::Half, Half, __VA_ARGS__)           \
      default:                                                                \
        AT_ERROR(#NAME, &quot; not implemented for &apos;&quot;, the_type.toString(), &quot;&apos;&quot;); \
    }                                                                         \
  }()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/Dispatch.h" line="66" column="9" bodyfile="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/Dispatch.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ATen/Error.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ATen/Half.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ATen/Type.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AT_PRIVATE_CASE_TYPE(enum_type,<sp/>type,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="8"><highlight class="preprocessor"><sp/><sp/>case<sp/>enum_type:<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="9"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>using<sp/>scalar_t<sp/>=<sp/>type;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="10"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>__VA_ARGS__();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="11"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AT_DISPATCH_FLOATING_TYPES(TYPE,<sp/>NAME,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="14"><highlight class="preprocessor"><sp/><sp/>[&amp;]<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="15"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>const<sp/>at::Type&amp;<sp/>the_type<sp/>=<sp/>TYPE;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="16"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>switch<sp/>(the_type.scalarType())<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="17"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>AT_PRIVATE_CASE_TYPE(at::ScalarType::Double,<sp/>double,<sp/>__VA_ARGS__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="18"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>AT_PRIVATE_CASE_TYPE(at::ScalarType::Float,<sp/>float,<sp/>__VA_ARGS__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="19"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>default:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="20"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AT_ERROR(#NAME,<sp/>&quot;<sp/>not<sp/>implemented<sp/>for<sp/>&apos;&quot;,<sp/>the_type.toString(),<sp/>&quot;&apos;&quot;);<sp/>\</highlight></codeline>
<codeline lineno="21"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="22"><highlight class="preprocessor"><sp/><sp/>}()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AT_DISPATCH_FLOATING_TYPES_AND_HALF(TYPE,<sp/>NAME,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="25"><highlight class="preprocessor"><sp/><sp/>[&amp;]<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="26"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>const<sp/>at::Type&amp;<sp/>the_type<sp/>=<sp/>TYPE;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="27"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>switch<sp/>(the_type.scalarType())<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="28"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>AT_PRIVATE_CASE_TYPE(at::ScalarType::Double,<sp/>double,<sp/>__VA_ARGS__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="29"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>AT_PRIVATE_CASE_TYPE(at::ScalarType::Float,<sp/>float,<sp/>__VA_ARGS__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="30"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>AT_PRIVATE_CASE_TYPE(at::ScalarType::Half,<sp/>Half,<sp/>__VA_ARGS__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="31"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>default:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="32"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AT_ERROR(#NAME,<sp/>&quot;<sp/>not<sp/>implemented<sp/>for<sp/>&apos;&quot;,<sp/>the_type.toString(),<sp/>&quot;&apos;&quot;);<sp/>\</highlight></codeline>
<codeline lineno="33"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="34"><highlight class="preprocessor"><sp/><sp/>}()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AT_DISPATCH_INTEGRAL_TYPES(TYPE,<sp/>NAME,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="37"><highlight class="preprocessor"><sp/><sp/>[&amp;]<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="38"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>const<sp/>at::Type&amp;<sp/>the_type<sp/>=<sp/>TYPE;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="39"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>switch<sp/>(the_type.scalarType())<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="40"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>AT_PRIVATE_CASE_TYPE(at::ScalarType::Byte,<sp/>uint8_t,<sp/>__VA_ARGS__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="41"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>AT_PRIVATE_CASE_TYPE(at::ScalarType::Char,<sp/>int8_t,<sp/>__VA_ARGS__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="42"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>AT_PRIVATE_CASE_TYPE(at::ScalarType::Int,<sp/>int32_t,<sp/>__VA_ARGS__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="43"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>AT_PRIVATE_CASE_TYPE(at::ScalarType::Long,<sp/>int64_t,<sp/>__VA_ARGS__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="44"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>AT_PRIVATE_CASE_TYPE(at::ScalarType::Short,<sp/>int16_t,<sp/>__VA_ARGS__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="45"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>default:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="46"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AT_ERROR(#NAME,<sp/>&quot;<sp/>not<sp/>implemented<sp/>for<sp/>&apos;&quot;,<sp/>the_type.toString(),<sp/>&quot;&apos;&quot;);<sp/>\</highlight></codeline>
<codeline lineno="47"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="48"><highlight class="preprocessor"><sp/><sp/>}()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AT_DISPATCH_ALL_TYPES(TYPE,<sp/>NAME,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="51"><highlight class="preprocessor"><sp/><sp/>[&amp;]<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="52"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>const<sp/>at::Type&amp;<sp/>the_type<sp/>=<sp/>TYPE;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="53"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>switch<sp/>(the_type.scalarType())<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="54"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>AT_PRIVATE_CASE_TYPE(at::ScalarType::Byte,<sp/>uint8_t,<sp/>__VA_ARGS__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="55"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>AT_PRIVATE_CASE_TYPE(at::ScalarType::Char,<sp/>int8_t,<sp/>__VA_ARGS__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="56"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>AT_PRIVATE_CASE_TYPE(at::ScalarType::Double,<sp/>double,<sp/>__VA_ARGS__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="57"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>AT_PRIVATE_CASE_TYPE(at::ScalarType::Float,<sp/>float,<sp/>__VA_ARGS__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="58"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>AT_PRIVATE_CASE_TYPE(at::ScalarType::Int,<sp/>int32_t,<sp/>__VA_ARGS__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="59"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>AT_PRIVATE_CASE_TYPE(at::ScalarType::Long,<sp/>int64_t,<sp/>__VA_ARGS__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="60"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>AT_PRIVATE_CASE_TYPE(at::ScalarType::Short,<sp/>int16_t,<sp/>__VA_ARGS__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="61"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>default:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="62"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AT_ERROR(#NAME,<sp/>&quot;<sp/>not<sp/>implemented<sp/>for<sp/>&apos;&quot;,<sp/>the_type.toString(),<sp/>&quot;&apos;&quot;);<sp/>\</highlight></codeline>
<codeline lineno="63"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="64"><highlight class="preprocessor"><sp/><sp/>}()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AT_DISPATCH_ALL_TYPES_AND_HALF(TYPE,<sp/>NAME,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="67"><highlight class="preprocessor"><sp/><sp/>[&amp;]<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="68"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>const<sp/>at::Type&amp;<sp/>the_type<sp/>=<sp/>TYPE;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="69"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>switch<sp/>(the_type.scalarType())<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="70"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>AT_PRIVATE_CASE_TYPE(at::ScalarType::Byte,<sp/>uint8_t,<sp/>__VA_ARGS__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="71"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>AT_PRIVATE_CASE_TYPE(at::ScalarType::Char,<sp/>int8_t,<sp/>__VA_ARGS__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="72"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>AT_PRIVATE_CASE_TYPE(at::ScalarType::Double,<sp/>double,<sp/>__VA_ARGS__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="73"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>AT_PRIVATE_CASE_TYPE(at::ScalarType::Float,<sp/>float,<sp/>__VA_ARGS__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="74"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>AT_PRIVATE_CASE_TYPE(at::ScalarType::Int,<sp/>int32_t,<sp/>__VA_ARGS__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="75"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>AT_PRIVATE_CASE_TYPE(at::ScalarType::Long,<sp/>int64_t,<sp/>__VA_ARGS__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="76"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>AT_PRIVATE_CASE_TYPE(at::ScalarType::Short,<sp/>int16_t,<sp/>__VA_ARGS__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="77"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>AT_PRIVATE_CASE_TYPE(at::ScalarType::Half,<sp/>Half,<sp/>__VA_ARGS__)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="78"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>default:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="79"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AT_ERROR(#NAME,<sp/>&quot;<sp/>not<sp/>implemented<sp/>for<sp/>&apos;&quot;,<sp/>the_type.toString(),<sp/>&quot;&apos;&quot;);<sp/>\</highlight></codeline>
<codeline lineno="80"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="81"><highlight class="preprocessor"><sp/><sp/>}()</highlight></codeline>
    </programlisting>
    <location file="/Users/robkunkle/fork/goodlux/pytorch/aten/src/ATen/Dispatch.h"/>
  </compounddef>
</doxygen>
